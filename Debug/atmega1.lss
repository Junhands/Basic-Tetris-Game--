
atmega1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003dda  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000ea  00800060  00003dda  00003e6e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000162  0080014a  0080014a  00003f58  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00003f58  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00003fb4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000108  00000000  00000000  00003ff0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001a40  00000000  00000000  000040f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000832  00000000  00000000  00005b38  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000017b5  00000000  00000000  0000636a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000004d4  00000000  00000000  00007b20  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000053c  00000000  00000000  00007ff4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001c15  00000000  00000000  00008530  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000158  00000000  00000000  0000a145  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 6b 18 	jmp	0x30d6	; 0x30d6 <__vector_1>
       8:	0c 94 47 18 	jmp	0x308e	; 0x308e <__vector_2>
       c:	0c 94 69 17 	jmp	0x2ed2	; 0x2ed2 <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ea ed       	ldi	r30, 0xDA	; 218
      68:	fd e3       	ldi	r31, 0x3D	; 61
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	aa 34       	cpi	r26, 0x4A	; 74
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	22 e0       	ldi	r18, 0x02	; 2
      78:	aa e4       	ldi	r26, 0x4A	; 74
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ac 3a       	cpi	r26, 0xAC	; 172
      82:	b2 07       	cpc	r27, r18
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 71 1a 	call	0x34e2	; 0x34e2 <main>
      8a:	0c 94 eb 1e 	jmp	0x3dd6	; 0x3dd6 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <time>:
      92:	fc 01       	movw	r30, r24
      94:	0f b6       	in	r0, 0x3f	; 63
      96:	f8 94       	cli
      98:	60 91 a8 02 	lds	r22, 0x02A8	; 0x8002a8 <__system_time>
      9c:	70 91 a9 02 	lds	r23, 0x02A9	; 0x8002a9 <__system_time+0x1>
      a0:	80 91 aa 02 	lds	r24, 0x02AA	; 0x8002aa <__system_time+0x2>
      a4:	90 91 ab 02 	lds	r25, 0x02AB	; 0x8002ab <__system_time+0x3>
      a8:	0f be       	out	0x3f, r0	; 63
      aa:	30 97       	sbiw	r30, 0x00	; 0
      ac:	21 f0       	breq	.+8      	; 0xb6 <time+0x24>
      ae:	60 83       	st	Z, r22
      b0:	71 83       	std	Z+1, r23	; 0x01
      b2:	82 83       	std	Z+2, r24	; 0x02
      b4:	93 83       	std	Z+3, r25	; 0x03
      b6:	08 95       	ret

000000b8 <display>:

int isStarted = 0;
int isOngoing = 0;
unsigned int score = 0;
unsigned char tmp_LED[1][16];
void display(unsigned char LED[][16]){
      b8:	bc 01       	movw	r22, r24
	cli();
      ba:	f8 94       	cli

	for(int i = 0; i <= 16; i++){
      bc:	20 e0       	ldi	r18, 0x00	; 0
      be:	30 e0       	ldi	r19, 0x00	; 0
      c0:	15 c0       	rjmp	.+42     	; 0xec <display+0x34>
		// change loop count to change speed, lower will be faster
		PORTA = scroll_down[i];
      c2:	f9 01       	movw	r30, r18
      c4:	ee 0f       	add	r30, r30
      c6:	ff 1f       	adc	r31, r31
      c8:	eb 5e       	subi	r30, 0xEB	; 235
      ca:	fe 4f       	sbci	r31, 0xFE	; 254
      cc:	40 81       	ld	r20, Z
      ce:	51 81       	ldd	r21, Z+1	; 0x01
      d0:	4b bb       	out	0x1b, r20	; 27
		PORTC = LED[0][i];
      d2:	fb 01       	movw	r30, r22
      d4:	e2 0f       	add	r30, r18
      d6:	f3 1f       	adc	r31, r19
      d8:	90 81       	ld	r25, Z
      da:	95 bb       	out	0x15, r25	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
      dc:	89 ef       	ldi	r24, 0xF9	; 249
      de:	90 e0       	ldi	r25, 0x00	; 0
      e0:	01 97       	sbiw	r24, 0x01	; 1
      e2:	f1 f7       	brne	.-4      	; 0xe0 <display+0x28>
      e4:	00 c0       	rjmp	.+0      	; 0xe6 <display+0x2e>
      e6:	00 00       	nop
unsigned int score = 0;
unsigned char tmp_LED[1][16];
void display(unsigned char LED[][16]){
	cli();

	for(int i = 0; i <= 16; i++){
      e8:	2f 5f       	subi	r18, 0xFF	; 255
      ea:	3f 4f       	sbci	r19, 0xFF	; 255
      ec:	21 31       	cpi	r18, 0x11	; 17
      ee:	31 05       	cpc	r19, r1
      f0:	44 f3       	brlt	.-48     	; 0xc2 <display+0xa>
		// change loop count to change speed, lower will be faster
		PORTA = scroll_down[i];
		PORTC = LED[0][i];
		_delay_ms(1);
	}
	sei();
      f2:	78 94       	sei
      f4:	08 95       	ret

000000f6 <scrollingChar>:
}
void scrollingChar(unsigned int speed, int n){
      f6:	cf 92       	push	r12
      f8:	df 92       	push	r13
      fa:	ef 92       	push	r14
      fc:	ff 92       	push	r15
      fe:	0f 93       	push	r16
     100:	1f 93       	push	r17
     102:	cf 93       	push	r28
     104:	df 93       	push	r29
     106:	ec 01       	movw	r28, r24
     108:	7b 01       	movw	r14, r22
	for(int h = 0; h < 8; h++){
     10a:	00 e0       	ldi	r16, 0x00	; 0
     10c:	10 e0       	ldi	r17, 0x00	; 0
     10e:	32 c0       	rjmp	.+100    	; 0x174 <scrollingChar+0x7e>
		if(PINB == 0x01){
     110:	86 b3       	in	r24, 0x16	; 22
     112:	81 30       	cpi	r24, 0x01	; 1
     114:	91 f1       	breq	.+100    	; 0x17a <scrollingChar+0x84>
     116:	80 e0       	ldi	r24, 0x00	; 0
     118:	90 e0       	ldi	r25, 0x00	; 0
     11a:	0c c0       	rjmp	.+24     	; 0x134 <scrollingChar+0x3e>
			return;
		}
		for(int z = 0; z < 15; z++){
			tmp_LED[0][z] = tmp_LED[0][z+1];
     11c:	9c 01       	movw	r18, r24
     11e:	2f 5f       	subi	r18, 0xFF	; 255
     120:	3f 4f       	sbci	r19, 0xFF	; 255
     122:	f9 01       	movw	r30, r18
     124:	e8 56       	subi	r30, 0x68	; 104
     126:	fd 4f       	sbci	r31, 0xFD	; 253
     128:	40 81       	ld	r20, Z
     12a:	fc 01       	movw	r30, r24
     12c:	e8 56       	subi	r30, 0x68	; 104
     12e:	fd 4f       	sbci	r31, 0xFD	; 253
     130:	40 83       	st	Z, r20
void scrollingChar(unsigned int speed, int n){
	for(int h = 0; h < 8; h++){
		if(PINB == 0x01){
			return;
		}
		for(int z = 0; z < 15; z++){
     132:	c9 01       	movw	r24, r18
     134:	8f 30       	cpi	r24, 0x0F	; 15
     136:	91 05       	cpc	r25, r1
     138:	8c f3       	brlt	.-30     	; 0x11c <scrollingChar+0x26>
			tmp_LED[0][z] = tmp_LED[0][z+1];
		}
		tmp_LED[0][15] = text_array[n][h];
     13a:	f7 01       	movw	r30, r14
     13c:	ee 0f       	add	r30, r30
     13e:	ff 1f       	adc	r31, r31
     140:	ee 0f       	add	r30, r30
     142:	ff 1f       	adc	r31, r31
     144:	ee 0f       	add	r30, r30
     146:	ff 1f       	adc	r31, r31
     148:	e9 58       	subi	r30, 0x89	; 137
     14a:	ff 4f       	sbci	r31, 0xFF	; 255
     14c:	e0 0f       	add	r30, r16
     14e:	f1 1f       	adc	r31, r17
     150:	80 81       	ld	r24, Z
     152:	80 93 a7 02 	sts	0x02A7, r24	; 0x8002a7 <tmp_LED+0xf>
		for(int w = 0; w < speed; w++)
     156:	c1 2c       	mov	r12, r1
     158:	d1 2c       	mov	r13, r1
     15a:	07 c0       	rjmp	.+14     	; 0x16a <scrollingChar+0x74>
		{
			display(tmp_LED);
     15c:	88 e9       	ldi	r24, 0x98	; 152
     15e:	92 e0       	ldi	r25, 0x02	; 2
     160:	0e 94 5c 00 	call	0xb8	; 0xb8 <display>
		}
		for(int z = 0; z < 15; z++){
			tmp_LED[0][z] = tmp_LED[0][z+1];
		}
		tmp_LED[0][15] = text_array[n][h];
		for(int w = 0; w < speed; w++)
     164:	8f ef       	ldi	r24, 0xFF	; 255
     166:	c8 1a       	sub	r12, r24
     168:	d8 0a       	sbc	r13, r24
     16a:	cc 16       	cp	r12, r28
     16c:	dd 06       	cpc	r13, r29
     16e:	b0 f3       	brcs	.-20     	; 0x15c <scrollingChar+0x66>
		_delay_ms(1);
	}
	sei();
}
void scrollingChar(unsigned int speed, int n){
	for(int h = 0; h < 8; h++){
     170:	0f 5f       	subi	r16, 0xFF	; 255
     172:	1f 4f       	sbci	r17, 0xFF	; 255
     174:	08 30       	cpi	r16, 0x08	; 8
     176:	11 05       	cpc	r17, r1
     178:	5c f2       	brlt	.-106    	; 0x110 <scrollingChar+0x1a>
		for(int w = 0; w < speed; w++)
		{
			display(tmp_LED);
		}
	}
}
     17a:	df 91       	pop	r29
     17c:	cf 91       	pop	r28
     17e:	1f 91       	pop	r17
     180:	0f 91       	pop	r16
     182:	ff 90       	pop	r15
     184:	ef 90       	pop	r14
     186:	df 90       	pop	r13
     188:	cf 90       	pop	r12
     18a:	08 95       	ret

0000018c <scrollingText>:
void scrollingText(char text[], int speed){
     18c:	af 92       	push	r10
     18e:	bf 92       	push	r11
     190:	cf 92       	push	r12
     192:	df 92       	push	r13
     194:	ef 92       	push	r14
     196:	ff 92       	push	r15
     198:	0f 93       	push	r16
     19a:	1f 93       	push	r17
     19c:	cf 93       	push	r28
     19e:	df 93       	push	r29
     1a0:	8c 01       	movw	r16, r24
     1a2:	6b 01       	movw	r12, r22
	while(1){
		if(PINB == 0x01){
     1a4:	86 b3       	in	r24, 0x16	; 22
     1a6:	81 30       	cpi	r24, 0x01	; 1
     1a8:	31 f5       	brne	.+76     	; 0x1f6 <scrollingText+0x6a>
			score = 0;
     1aa:	10 92 4b 01 	sts	0x014B, r1	; 0x80014b <__data_end+0x1>
     1ae:	10 92 4a 01 	sts	0x014A, r1	; 0x80014a <__data_end>
			return;
     1b2:	2f c0       	rjmp	.+94     	; 0x212 <scrollingText+0x86>
		}
		for(int i = 0; i < strlen(text); i++){
			if(PINB == 0x01){
     1b4:	86 b3       	in	r24, 0x16	; 22
     1b6:	81 30       	cpi	r24, 0x01	; 1
     1b8:	a9 f4       	brne	.+42     	; 0x1e4 <scrollingText+0x58>
				score = 0;
     1ba:	10 92 4b 01 	sts	0x014B, r1	; 0x80014b <__data_end+0x1>
     1be:	10 92 4a 01 	sts	0x014A, r1	; 0x80014a <__data_end>
				return;
     1c2:	27 c0       	rjmp	.+78     	; 0x212 <scrollingText+0x86>
			}
			for(int j = 0; j < sizeof(character); j++){
				if(text[i] == character[j]){
     1c4:	f8 01       	movw	r30, r16
     1c6:	ea 0d       	add	r30, r10
     1c8:	fb 1d       	adc	r31, r11
     1ca:	90 81       	ld	r25, Z
     1cc:	fe 01       	movw	r30, r28
     1ce:	ec 59       	subi	r30, 0x9C	; 156
     1d0:	ff 4f       	sbci	r31, 0xFF	; 255
     1d2:	80 81       	ld	r24, Z
     1d4:	98 13       	cpse	r25, r24
     1d6:	04 c0       	rjmp	.+8      	; 0x1e0 <scrollingText+0x54>
					scrollingChar(speed, j);
     1d8:	be 01       	movw	r22, r28
     1da:	c6 01       	movw	r24, r12
     1dc:	0e 94 7b 00 	call	0xf6	; 0xf6 <scrollingChar>
		for(int i = 0; i < strlen(text); i++){
			if(PINB == 0x01){
				score = 0;
				return;
			}
			for(int j = 0; j < sizeof(character); j++){
     1e0:	21 96       	adiw	r28, 0x01	; 1
     1e2:	02 c0       	rjmp	.+4      	; 0x1e8 <scrollingText+0x5c>
     1e4:	c0 e0       	ldi	r28, 0x00	; 0
     1e6:	d0 e0       	ldi	r29, 0x00	; 0
     1e8:	c3 31       	cpi	r28, 0x13	; 19
     1ea:	d1 05       	cpc	r29, r1
     1ec:	58 f3       	brcs	.-42     	; 0x1c4 <scrollingText+0x38>
	while(1){
		if(PINB == 0x01){
			score = 0;
			return;
		}
		for(int i = 0; i < strlen(text); i++){
     1ee:	8f ef       	ldi	r24, 0xFF	; 255
     1f0:	e8 1a       	sub	r14, r24
     1f2:	f8 0a       	sbc	r15, r24
     1f4:	02 c0       	rjmp	.+4      	; 0x1fa <scrollingText+0x6e>
     1f6:	e1 2c       	mov	r14, r1
     1f8:	f1 2c       	mov	r15, r1
     1fa:	f8 01       	movw	r30, r16
     1fc:	01 90       	ld	r0, Z+
     1fe:	00 20       	and	r0, r0
     200:	e9 f7       	brne	.-6      	; 0x1fc <scrollingText+0x70>
     202:	31 97       	sbiw	r30, 0x01	; 1
     204:	e0 1b       	sub	r30, r16
     206:	f1 0b       	sbc	r31, r17
     208:	57 01       	movw	r10, r14
     20a:	ee 16       	cp	r14, r30
     20c:	ff 06       	cpc	r15, r31
     20e:	90 f2       	brcs	.-92     	; 0x1b4 <scrollingText+0x28>
     210:	c9 cf       	rjmp	.-110    	; 0x1a4 <scrollingText+0x18>
				}
			}
		}
	}

}
     212:	df 91       	pop	r29
     214:	cf 91       	pop	r28
     216:	1f 91       	pop	r17
     218:	0f 91       	pop	r16
     21a:	ff 90       	pop	r15
     21c:	ef 90       	pop	r14
     21e:	df 90       	pop	r13
     220:	cf 90       	pop	r12
     222:	bf 90       	pop	r11
     224:	af 90       	pop	r10
     226:	08 95       	ret

00000228 <getRow>:
/*-----*/
int getRow(int x) {
     228:	bc 01       	movw	r22, r24
	int row = 0;
	for (int i = 1; i <= 8; i++)
     22a:	21 e0       	ldi	r18, 0x01	; 1
     22c:	30 e0       	ldi	r19, 0x00	; 0
	}

}
/*-----*/
int getRow(int x) {
	int row = 0;
     22e:	80 e0       	ldi	r24, 0x00	; 0
     230:	90 e0       	ldi	r25, 0x00	; 0
	for (int i = 1; i <= 8; i++)
     232:	1e c0       	rjmp	.+60     	; 0x270 <getRow+0x48>
	row = row | (board[x][i] << (8-i));
     234:	fb 01       	movw	r30, r22
     236:	ee 0f       	add	r30, r30
     238:	ff 1f       	adc	r31, r31
     23a:	ee 0f       	add	r30, r30
     23c:	ff 1f       	adc	r31, r31
     23e:	ee 0f       	add	r30, r30
     240:	ff 1f       	adc	r31, r31
     242:	e6 0f       	add	r30, r22
     244:	f7 1f       	adc	r31, r23
     246:	e2 0f       	add	r30, r18
     248:	f3 1f       	adc	r31, r19
     24a:	ee 0f       	add	r30, r30
     24c:	ff 1f       	adc	r31, r31
     24e:	ec 5a       	subi	r30, 0xAC	; 172
     250:	fe 4f       	sbci	r31, 0xFE	; 254
     252:	40 81       	ld	r20, Z
     254:	51 81       	ldd	r21, Z+1	; 0x01
     256:	e8 e0       	ldi	r30, 0x08	; 8
     258:	f0 e0       	ldi	r31, 0x00	; 0
     25a:	e2 1b       	sub	r30, r18
     25c:	f3 0b       	sbc	r31, r19
     25e:	02 c0       	rjmp	.+4      	; 0x264 <getRow+0x3c>
     260:	44 0f       	add	r20, r20
     262:	55 1f       	adc	r21, r21
     264:	ea 95       	dec	r30
     266:	e2 f7       	brpl	.-8      	; 0x260 <getRow+0x38>
     268:	84 2b       	or	r24, r20
     26a:	95 2b       	or	r25, r21

}
/*-----*/
int getRow(int x) {
	int row = 0;
	for (int i = 1; i <= 8; i++)
     26c:	2f 5f       	subi	r18, 0xFF	; 255
     26e:	3f 4f       	sbci	r19, 0xFF	; 255
     270:	29 30       	cpi	r18, 0x09	; 9
     272:	31 05       	cpc	r19, r1
     274:	fc f2       	brlt	.-66     	; 0x234 <getRow+0xc>
	row = row | (board[x][i] << (8-i));
	return row;
}
     276:	08 95       	ret

00000278 <lightLED>:

void lightLED(int r, int c){
	board[r][c] = 1;
     278:	fc 01       	movw	r30, r24
     27a:	ee 0f       	add	r30, r30
     27c:	ff 1f       	adc	r31, r31
     27e:	ee 0f       	add	r30, r30
     280:	ff 1f       	adc	r31, r31
     282:	ee 0f       	add	r30, r30
     284:	ff 1f       	adc	r31, r31
     286:	e8 0f       	add	r30, r24
     288:	f9 1f       	adc	r31, r25
     28a:	e6 0f       	add	r30, r22
     28c:	f7 1f       	adc	r31, r23
     28e:	ee 0f       	add	r30, r30
     290:	ff 1f       	adc	r31, r31
     292:	ec 5a       	subi	r30, 0xAC	; 172
     294:	fe 4f       	sbci	r31, 0xFE	; 254
     296:	81 e0       	ldi	r24, 0x01	; 1
     298:	90 e0       	ldi	r25, 0x00	; 0
     29a:	91 83       	std	Z+1, r25	; 0x01
     29c:	80 83       	st	Z, r24
     29e:	08 95       	ret

000002a0 <makeT>:
}

int makeT(int r, int c){
     2a0:	8f 92       	push	r8
     2a2:	9f 92       	push	r9
     2a4:	af 92       	push	r10
     2a6:	bf 92       	push	r11
     2a8:	cf 92       	push	r12
     2aa:	df 92       	push	r13
     2ac:	ef 92       	push	r14
     2ae:	ff 92       	push	r15
     2b0:	0f 93       	push	r16
     2b2:	1f 93       	push	r17
     2b4:	cf 93       	push	r28
     2b6:	df 93       	push	r29
     2b8:	8c 01       	movw	r16, r24
     2ba:	7b 01       	movw	r14, r22
	if (version % 4 == 0){
     2bc:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <version>
     2c0:	90 91 51 01 	lds	r25, 0x0151	; 0x800151 <version+0x1>
     2c4:	83 70       	andi	r24, 0x03	; 3
     2c6:	99 27       	eor	r25, r25
     2c8:	89 2b       	or	r24, r25
     2ca:	09 f0       	breq	.+2      	; 0x2ce <makeT+0x2e>
     2cc:	79 c0       	rjmp	.+242    	; 0x3c0 <makeT+0x120>
		if (r > 17 || c < 2 || c > 7) return 0;
     2ce:	02 31       	cpi	r16, 0x12	; 18
     2d0:	11 05       	cpc	r17, r1
     2d2:	0c f0       	brlt	.+2      	; 0x2d6 <makeT+0x36>
     2d4:	17 c2       	rjmp	.+1070   	; 0x704 <__EEPROM_REGION_LENGTH__+0x304>
     2d6:	62 30       	cpi	r22, 0x02	; 2
     2d8:	71 05       	cpc	r23, r1
     2da:	0c f4       	brge	.+2      	; 0x2de <makeT+0x3e>
     2dc:	16 c2       	rjmp	.+1068   	; 0x70a <__EEPROM_REGION_LENGTH__+0x30a>
     2de:	68 30       	cpi	r22, 0x08	; 8
     2e0:	71 05       	cpc	r23, r1
     2e2:	0c f0       	brlt	.+2      	; 0x2e6 <makeT+0x46>
     2e4:	15 c2       	rjmp	.+1066   	; 0x710 <__EEPROM_REGION_LENGTH__+0x310>
		if (board[r][c] == 0 && board[r][c-1] == 0 &&
     2e6:	f8 01       	movw	r30, r16
     2e8:	ee 0f       	add	r30, r30
     2ea:	ff 1f       	adc	r31, r31
     2ec:	ee 0f       	add	r30, r30
     2ee:	ff 1f       	adc	r31, r31
     2f0:	ee 0f       	add	r30, r30
     2f2:	ff 1f       	adc	r31, r31
     2f4:	e0 0f       	add	r30, r16
     2f6:	f1 1f       	adc	r31, r17
     2f8:	e6 0f       	add	r30, r22
     2fa:	f7 1f       	adc	r31, r23
     2fc:	ee 0f       	add	r30, r30
     2fe:	ff 1f       	adc	r31, r31
     300:	ec 5a       	subi	r30, 0xAC	; 172
     302:	fe 4f       	sbci	r31, 0xFE	; 254
     304:	80 81       	ld	r24, Z
     306:	91 81       	ldd	r25, Z+1	; 0x01
     308:	00 97       	sbiw	r24, 0x00	; 0
     30a:	09 f0       	breq	.+2      	; 0x30e <makeT+0x6e>
     30c:	04 c2       	rjmp	.+1032   	; 0x716 <__EEPROM_REGION_LENGTH__+0x316>
     30e:	eb 01       	movw	r28, r22
     310:	21 97       	sbiw	r28, 0x01	; 1
     312:	f8 01       	movw	r30, r16
     314:	ee 0f       	add	r30, r30
     316:	ff 1f       	adc	r31, r31
     318:	ee 0f       	add	r30, r30
     31a:	ff 1f       	adc	r31, r31
     31c:	ee 0f       	add	r30, r30
     31e:	ff 1f       	adc	r31, r31
     320:	e0 0f       	add	r30, r16
     322:	f1 1f       	adc	r31, r17
     324:	ec 0f       	add	r30, r28
     326:	fd 1f       	adc	r31, r29
     328:	ee 0f       	add	r30, r30
     32a:	ff 1f       	adc	r31, r31
     32c:	ec 5a       	subi	r30, 0xAC	; 172
     32e:	fe 4f       	sbci	r31, 0xFE	; 254
     330:	20 81       	ld	r18, Z
     332:	31 81       	ldd	r19, Z+1	; 0x01
     334:	21 15       	cp	r18, r1
     336:	31 05       	cpc	r19, r1
     338:	09 f0       	breq	.+2      	; 0x33c <makeT+0x9c>
     33a:	1e c2       	rjmp	.+1084   	; 0x778 <__EEPROM_REGION_LENGTH__+0x378>
		board[r][c+1] == 0 && board[r-1][c] == 0){
     33c:	6b 01       	movw	r12, r22
     33e:	8f ef       	ldi	r24, 0xFF	; 255
     340:	c8 1a       	sub	r12, r24
     342:	d8 0a       	sbc	r13, r24
     344:	f8 01       	movw	r30, r16
     346:	ee 0f       	add	r30, r30
     348:	ff 1f       	adc	r31, r31
     34a:	ee 0f       	add	r30, r30
     34c:	ff 1f       	adc	r31, r31
     34e:	ee 0f       	add	r30, r30
     350:	ff 1f       	adc	r31, r31
     352:	e0 0f       	add	r30, r16
     354:	f1 1f       	adc	r31, r17
     356:	ec 0d       	add	r30, r12
     358:	fd 1d       	adc	r31, r13
     35a:	ee 0f       	add	r30, r30
     35c:	ff 1f       	adc	r31, r31
     35e:	ec 5a       	subi	r30, 0xAC	; 172
     360:	fe 4f       	sbci	r31, 0xFE	; 254
     362:	80 81       	ld	r24, Z
     364:	91 81       	ldd	r25, Z+1	; 0x01
}

int makeT(int r, int c){
	if (version % 4 == 0){
		if (r > 17 || c < 2 || c > 7) return 0;
		if (board[r][c] == 0 && board[r][c-1] == 0 &&
     366:	00 97       	sbiw	r24, 0x00	; 0
     368:	09 f0       	breq	.+2      	; 0x36c <makeT+0xcc>
     36a:	d8 c1       	rjmp	.+944    	; 0x71c <__EEPROM_REGION_LENGTH__+0x31c>
		board[r][c+1] == 0 && board[r-1][c] == 0){
     36c:	58 01       	movw	r10, r16
     36e:	21 e0       	ldi	r18, 0x01	; 1
     370:	a2 1a       	sub	r10, r18
     372:	b1 08       	sbc	r11, r1
     374:	f5 01       	movw	r30, r10
     376:	ee 0f       	add	r30, r30
     378:	ff 1f       	adc	r31, r31
     37a:	ee 0f       	add	r30, r30
     37c:	ff 1f       	adc	r31, r31
     37e:	ee 0f       	add	r30, r30
     380:	ff 1f       	adc	r31, r31
     382:	ea 0d       	add	r30, r10
     384:	fb 1d       	adc	r31, r11
     386:	e6 0f       	add	r30, r22
     388:	f7 1f       	adc	r31, r23
     38a:	ee 0f       	add	r30, r30
     38c:	ff 1f       	adc	r31, r31
     38e:	ec 5a       	subi	r30, 0xAC	; 172
     390:	fe 4f       	sbci	r31, 0xFE	; 254
     392:	20 81       	ld	r18, Z
     394:	31 81       	ldd	r19, Z+1	; 0x01
     396:	23 2b       	or	r18, r19
     398:	09 f0       	breq	.+2      	; 0x39c <makeT+0xfc>
     39a:	ee c1       	rjmp	.+988    	; 0x778 <__EEPROM_REGION_LENGTH__+0x378>
			lightLED(r,c);
     39c:	c8 01       	movw	r24, r16
     39e:	0e 94 3c 01 	call	0x278	; 0x278 <lightLED>
			lightLED(r,c-1);
     3a2:	be 01       	movw	r22, r28
     3a4:	c8 01       	movw	r24, r16
     3a6:	0e 94 3c 01 	call	0x278	; 0x278 <lightLED>
			lightLED(r,c+1);
     3aa:	b6 01       	movw	r22, r12
     3ac:	c8 01       	movw	r24, r16
     3ae:	0e 94 3c 01 	call	0x278	; 0x278 <lightLED>
			lightLED(r-1,c);
     3b2:	b7 01       	movw	r22, r14
     3b4:	c5 01       	movw	r24, r10
     3b6:	0e 94 3c 01 	call	0x278	; 0x278 <lightLED>
			return 1;
     3ba:	81 e0       	ldi	r24, 0x01	; 1
     3bc:	90 e0       	ldi	r25, 0x00	; 0
     3be:	dc c1       	rjmp	.+952    	; 0x778 <__EEPROM_REGION_LENGTH__+0x378>
		}
	}
	else if (version % 4 == 1){
     3c0:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <version>
     3c4:	90 91 51 01 	lds	r25, 0x0151	; 0x800151 <version+0x1>
     3c8:	83 70       	andi	r24, 0x03	; 3
     3ca:	90 78       	andi	r25, 0x80	; 128
     3cc:	99 23       	and	r25, r25
     3ce:	24 f4       	brge	.+8      	; 0x3d8 <makeT+0x138>
     3d0:	01 97       	sbiw	r24, 0x01	; 1
     3d2:	8c 6f       	ori	r24, 0xFC	; 252
     3d4:	9f 6f       	ori	r25, 0xFF	; 255
     3d6:	01 96       	adiw	r24, 0x01	; 1
     3d8:	ec 01       	movw	r28, r24
     3da:	01 97       	sbiw	r24, 0x01	; 1
     3dc:	09 f0       	breq	.+2      	; 0x3e0 <makeT+0x140>
     3de:	7d c0       	rjmp	.+250    	; 0x4da <__EEPROM_REGION_LENGTH__+0xda>
		if (r > 16 || c < 2 || c > 8) return 0;
     3e0:	01 31       	cpi	r16, 0x11	; 17
     3e2:	11 05       	cpc	r17, r1
     3e4:	0c f0       	brlt	.+2      	; 0x3e8 <makeT+0x148>
     3e6:	9c c1       	rjmp	.+824    	; 0x720 <__EEPROM_REGION_LENGTH__+0x320>
     3e8:	82 e0       	ldi	r24, 0x02	; 2
     3ea:	e8 16       	cp	r14, r24
     3ec:	f1 04       	cpc	r15, r1
     3ee:	0c f4       	brge	.+2      	; 0x3f2 <makeT+0x152>
     3f0:	9a c1       	rjmp	.+820    	; 0x726 <__EEPROM_REGION_LENGTH__+0x326>
     3f2:	29 e0       	ldi	r18, 0x09	; 9
     3f4:	e2 16       	cp	r14, r18
     3f6:	f1 04       	cpc	r15, r1
     3f8:	0c f0       	brlt	.+2      	; 0x3fc <makeT+0x15c>
     3fa:	98 c1       	rjmp	.+816    	; 0x72c <__EEPROM_REGION_LENGTH__+0x32c>
		if (board[r][c] == 0 && board[r-1][c] == 0 &&
     3fc:	f8 01       	movw	r30, r16
     3fe:	ee 0f       	add	r30, r30
     400:	ff 1f       	adc	r31, r31
     402:	ee 0f       	add	r30, r30
     404:	ff 1f       	adc	r31, r31
     406:	ee 0f       	add	r30, r30
     408:	ff 1f       	adc	r31, r31
     40a:	e0 0f       	add	r30, r16
     40c:	f1 1f       	adc	r31, r17
     40e:	ee 0d       	add	r30, r14
     410:	ff 1d       	adc	r31, r15
     412:	ee 0f       	add	r30, r30
     414:	ff 1f       	adc	r31, r31
     416:	ec 5a       	subi	r30, 0xAC	; 172
     418:	fe 4f       	sbci	r31, 0xFE	; 254
     41a:	80 81       	ld	r24, Z
     41c:	91 81       	ldd	r25, Z+1	; 0x01
     41e:	00 97       	sbiw	r24, 0x00	; 0
     420:	09 f0       	breq	.+2      	; 0x424 <__EEPROM_REGION_LENGTH__+0x24>
     422:	87 c1       	rjmp	.+782    	; 0x732 <__EEPROM_REGION_LENGTH__+0x332>
     424:	68 01       	movw	r12, r16
     426:	21 e0       	ldi	r18, 0x01	; 1
     428:	c2 1a       	sub	r12, r18
     42a:	d1 08       	sbc	r13, r1
     42c:	f6 01       	movw	r30, r12
     42e:	ee 0f       	add	r30, r30
     430:	ff 1f       	adc	r31, r31
     432:	ee 0f       	add	r30, r30
     434:	ff 1f       	adc	r31, r31
     436:	ee 0f       	add	r30, r30
     438:	ff 1f       	adc	r31, r31
     43a:	ec 0d       	add	r30, r12
     43c:	fd 1d       	adc	r31, r13
     43e:	ee 0d       	add	r30, r14
     440:	ff 1d       	adc	r31, r15
     442:	ee 0f       	add	r30, r30
     444:	ff 1f       	adc	r31, r31
     446:	ec 5a       	subi	r30, 0xAC	; 172
     448:	fe 4f       	sbci	r31, 0xFE	; 254
     44a:	20 81       	ld	r18, Z
     44c:	31 81       	ldd	r19, Z+1	; 0x01
     44e:	21 15       	cp	r18, r1
     450:	31 05       	cpc	r19, r1
     452:	09 f0       	breq	.+2      	; 0x456 <__EEPROM_REGION_LENGTH__+0x56>
     454:	91 c1       	rjmp	.+802    	; 0x778 <__EEPROM_REGION_LENGTH__+0x378>
		board[r][c-1] == 0 && board[r+1][c] == 0){
     456:	57 01       	movw	r10, r14
     458:	81 e0       	ldi	r24, 0x01	; 1
     45a:	a8 1a       	sub	r10, r24
     45c:	b1 08       	sbc	r11, r1
     45e:	f8 01       	movw	r30, r16
     460:	ee 0f       	add	r30, r30
     462:	ff 1f       	adc	r31, r31
     464:	ee 0f       	add	r30, r30
     466:	ff 1f       	adc	r31, r31
     468:	ee 0f       	add	r30, r30
     46a:	ff 1f       	adc	r31, r31
     46c:	e0 0f       	add	r30, r16
     46e:	f1 1f       	adc	r31, r17
     470:	ea 0d       	add	r30, r10
     472:	fb 1d       	adc	r31, r11
     474:	ee 0f       	add	r30, r30
     476:	ff 1f       	adc	r31, r31
     478:	ec 5a       	subi	r30, 0xAC	; 172
     47a:	fe 4f       	sbci	r31, 0xFE	; 254
     47c:	80 81       	ld	r24, Z
     47e:	91 81       	ldd	r25, Z+1	; 0x01
			return 1;
		}
	}
	else if (version % 4 == 1){
		if (r > 16 || c < 2 || c > 8) return 0;
		if (board[r][c] == 0 && board[r-1][c] == 0 &&
     480:	00 97       	sbiw	r24, 0x00	; 0
     482:	09 f0       	breq	.+2      	; 0x486 <__EEPROM_REGION_LENGTH__+0x86>
     484:	59 c1       	rjmp	.+690    	; 0x738 <__EEPROM_REGION_LENGTH__+0x338>
		board[r][c-1] == 0 && board[r+1][c] == 0){
     486:	48 01       	movw	r8, r16
     488:	2f ef       	ldi	r18, 0xFF	; 255
     48a:	82 1a       	sub	r8, r18
     48c:	92 0a       	sbc	r9, r18
     48e:	f4 01       	movw	r30, r8
     490:	ee 0f       	add	r30, r30
     492:	ff 1f       	adc	r31, r31
     494:	ee 0f       	add	r30, r30
     496:	ff 1f       	adc	r31, r31
     498:	ee 0f       	add	r30, r30
     49a:	ff 1f       	adc	r31, r31
     49c:	e8 0d       	add	r30, r8
     49e:	f9 1d       	adc	r31, r9
     4a0:	ee 0d       	add	r30, r14
     4a2:	ff 1d       	adc	r31, r15
     4a4:	ee 0f       	add	r30, r30
     4a6:	ff 1f       	adc	r31, r31
     4a8:	ec 5a       	subi	r30, 0xAC	; 172
     4aa:	fe 4f       	sbci	r31, 0xFE	; 254
     4ac:	20 81       	ld	r18, Z
     4ae:	31 81       	ldd	r19, Z+1	; 0x01
     4b0:	23 2b       	or	r18, r19
     4b2:	09 f0       	breq	.+2      	; 0x4b6 <__EEPROM_REGION_LENGTH__+0xb6>
     4b4:	61 c1       	rjmp	.+706    	; 0x778 <__EEPROM_REGION_LENGTH__+0x378>
			lightLED(r,c);
     4b6:	b7 01       	movw	r22, r14
     4b8:	c8 01       	movw	r24, r16
     4ba:	0e 94 3c 01 	call	0x278	; 0x278 <lightLED>
			lightLED(r-1,c);
     4be:	b7 01       	movw	r22, r14
     4c0:	c6 01       	movw	r24, r12
     4c2:	0e 94 3c 01 	call	0x278	; 0x278 <lightLED>
			lightLED(r,c-1);
     4c6:	b5 01       	movw	r22, r10
     4c8:	c8 01       	movw	r24, r16
     4ca:	0e 94 3c 01 	call	0x278	; 0x278 <lightLED>
			lightLED(r+1,c);
     4ce:	b7 01       	movw	r22, r14
     4d0:	c4 01       	movw	r24, r8
     4d2:	0e 94 3c 01 	call	0x278	; 0x278 <lightLED>
			return 1;
     4d6:	ce 01       	movw	r24, r28
     4d8:	4f c1       	rjmp	.+670    	; 0x778 <__EEPROM_REGION_LENGTH__+0x378>
		}
	}
	
	else if (version % 4 == 2){
     4da:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <version>
     4de:	90 91 51 01 	lds	r25, 0x0151	; 0x800151 <version+0x1>
     4e2:	83 70       	andi	r24, 0x03	; 3
     4e4:	90 78       	andi	r25, 0x80	; 128
     4e6:	99 23       	and	r25, r25
     4e8:	24 f4       	brge	.+8      	; 0x4f2 <__EEPROM_REGION_LENGTH__+0xf2>
     4ea:	01 97       	sbiw	r24, 0x01	; 1
     4ec:	8c 6f       	ori	r24, 0xFC	; 252
     4ee:	9f 6f       	ori	r25, 0xFF	; 255
     4f0:	01 96       	adiw	r24, 0x01	; 1
     4f2:	02 97       	sbiw	r24, 0x02	; 2
     4f4:	09 f0       	breq	.+2      	; 0x4f8 <__EEPROM_REGION_LENGTH__+0xf8>
     4f6:	7c c0       	rjmp	.+248    	; 0x5f0 <__EEPROM_REGION_LENGTH__+0x1f0>
		if (r > 16 || c < 2 || c > 7) return 0;
     4f8:	01 31       	cpi	r16, 0x11	; 17
     4fa:	11 05       	cpc	r17, r1
     4fc:	0c f0       	brlt	.+2      	; 0x500 <__EEPROM_REGION_LENGTH__+0x100>
     4fe:	1e c1       	rjmp	.+572    	; 0x73c <__EEPROM_REGION_LENGTH__+0x33c>
     500:	82 e0       	ldi	r24, 0x02	; 2
     502:	e8 16       	cp	r14, r24
     504:	f1 04       	cpc	r15, r1
     506:	0c f4       	brge	.+2      	; 0x50a <__EEPROM_REGION_LENGTH__+0x10a>
     508:	1c c1       	rjmp	.+568    	; 0x742 <__EEPROM_REGION_LENGTH__+0x342>
     50a:	28 e0       	ldi	r18, 0x08	; 8
     50c:	e2 16       	cp	r14, r18
     50e:	f1 04       	cpc	r15, r1
     510:	0c f0       	brlt	.+2      	; 0x514 <__EEPROM_REGION_LENGTH__+0x114>
     512:	1a c1       	rjmp	.+564    	; 0x748 <__EEPROM_REGION_LENGTH__+0x348>
		if (board[r][c] == 0 && board[r][c-1] == 0 &&
     514:	f8 01       	movw	r30, r16
     516:	ee 0f       	add	r30, r30
     518:	ff 1f       	adc	r31, r31
     51a:	ee 0f       	add	r30, r30
     51c:	ff 1f       	adc	r31, r31
     51e:	ee 0f       	add	r30, r30
     520:	ff 1f       	adc	r31, r31
     522:	e0 0f       	add	r30, r16
     524:	f1 1f       	adc	r31, r17
     526:	ee 0d       	add	r30, r14
     528:	ff 1d       	adc	r31, r15
     52a:	ee 0f       	add	r30, r30
     52c:	ff 1f       	adc	r31, r31
     52e:	ec 5a       	subi	r30, 0xAC	; 172
     530:	fe 4f       	sbci	r31, 0xFE	; 254
     532:	80 81       	ld	r24, Z
     534:	91 81       	ldd	r25, Z+1	; 0x01
     536:	00 97       	sbiw	r24, 0x00	; 0
     538:	09 f0       	breq	.+2      	; 0x53c <__EEPROM_REGION_LENGTH__+0x13c>
     53a:	09 c1       	rjmp	.+530    	; 0x74e <__EEPROM_REGION_LENGTH__+0x34e>
     53c:	e7 01       	movw	r28, r14
     53e:	21 97       	sbiw	r28, 0x01	; 1
     540:	f8 01       	movw	r30, r16
     542:	ee 0f       	add	r30, r30
     544:	ff 1f       	adc	r31, r31
     546:	ee 0f       	add	r30, r30
     548:	ff 1f       	adc	r31, r31
     54a:	ee 0f       	add	r30, r30
     54c:	ff 1f       	adc	r31, r31
     54e:	e0 0f       	add	r30, r16
     550:	f1 1f       	adc	r31, r17
     552:	ec 0f       	add	r30, r28
     554:	fd 1f       	adc	r31, r29
     556:	ee 0f       	add	r30, r30
     558:	ff 1f       	adc	r31, r31
     55a:	ec 5a       	subi	r30, 0xAC	; 172
     55c:	fe 4f       	sbci	r31, 0xFE	; 254
     55e:	20 81       	ld	r18, Z
     560:	31 81       	ldd	r19, Z+1	; 0x01
     562:	21 15       	cp	r18, r1
     564:	31 05       	cpc	r19, r1
     566:	09 f0       	breq	.+2      	; 0x56a <__EEPROM_REGION_LENGTH__+0x16a>
     568:	07 c1       	rjmp	.+526    	; 0x778 <__EEPROM_REGION_LENGTH__+0x378>
		board[r][c+1] == 0 && board[r+1][c] == 0){
     56a:	67 01       	movw	r12, r14
     56c:	8f ef       	ldi	r24, 0xFF	; 255
     56e:	c8 1a       	sub	r12, r24
     570:	d8 0a       	sbc	r13, r24
     572:	f8 01       	movw	r30, r16
     574:	ee 0f       	add	r30, r30
     576:	ff 1f       	adc	r31, r31
     578:	ee 0f       	add	r30, r30
     57a:	ff 1f       	adc	r31, r31
     57c:	ee 0f       	add	r30, r30
     57e:	ff 1f       	adc	r31, r31
     580:	e0 0f       	add	r30, r16
     582:	f1 1f       	adc	r31, r17
     584:	ec 0d       	add	r30, r12
     586:	fd 1d       	adc	r31, r13
     588:	ee 0f       	add	r30, r30
     58a:	ff 1f       	adc	r31, r31
     58c:	ec 5a       	subi	r30, 0xAC	; 172
     58e:	fe 4f       	sbci	r31, 0xFE	; 254
     590:	80 81       	ld	r24, Z
     592:	91 81       	ldd	r25, Z+1	; 0x01
		}
	}
	
	else if (version % 4 == 2){
		if (r > 16 || c < 2 || c > 7) return 0;
		if (board[r][c] == 0 && board[r][c-1] == 0 &&
     594:	00 97       	sbiw	r24, 0x00	; 0
     596:	09 f0       	breq	.+2      	; 0x59a <__EEPROM_REGION_LENGTH__+0x19a>
     598:	dd c0       	rjmp	.+442    	; 0x754 <__EEPROM_REGION_LENGTH__+0x354>
		board[r][c+1] == 0 && board[r+1][c] == 0){
     59a:	58 01       	movw	r10, r16
     59c:	2f ef       	ldi	r18, 0xFF	; 255
     59e:	a2 1a       	sub	r10, r18
     5a0:	b2 0a       	sbc	r11, r18
     5a2:	f5 01       	movw	r30, r10
     5a4:	ee 0f       	add	r30, r30
     5a6:	ff 1f       	adc	r31, r31
     5a8:	ee 0f       	add	r30, r30
     5aa:	ff 1f       	adc	r31, r31
     5ac:	ee 0f       	add	r30, r30
     5ae:	ff 1f       	adc	r31, r31
     5b0:	ea 0d       	add	r30, r10
     5b2:	fb 1d       	adc	r31, r11
     5b4:	ee 0d       	add	r30, r14
     5b6:	ff 1d       	adc	r31, r15
     5b8:	ee 0f       	add	r30, r30
     5ba:	ff 1f       	adc	r31, r31
     5bc:	ec 5a       	subi	r30, 0xAC	; 172
     5be:	fe 4f       	sbci	r31, 0xFE	; 254
     5c0:	20 81       	ld	r18, Z
     5c2:	31 81       	ldd	r19, Z+1	; 0x01
     5c4:	23 2b       	or	r18, r19
     5c6:	09 f0       	breq	.+2      	; 0x5ca <__EEPROM_REGION_LENGTH__+0x1ca>
     5c8:	d7 c0       	rjmp	.+430    	; 0x778 <__EEPROM_REGION_LENGTH__+0x378>
			lightLED(r,c);
     5ca:	b7 01       	movw	r22, r14
     5cc:	c8 01       	movw	r24, r16
     5ce:	0e 94 3c 01 	call	0x278	; 0x278 <lightLED>
			lightLED(r,c-1);
     5d2:	be 01       	movw	r22, r28
     5d4:	c8 01       	movw	r24, r16
     5d6:	0e 94 3c 01 	call	0x278	; 0x278 <lightLED>
			lightLED(r,c+1);
     5da:	b6 01       	movw	r22, r12
     5dc:	c8 01       	movw	r24, r16
     5de:	0e 94 3c 01 	call	0x278	; 0x278 <lightLED>
			lightLED(r+1,c);
     5e2:	b7 01       	movw	r22, r14
     5e4:	c5 01       	movw	r24, r10
     5e6:	0e 94 3c 01 	call	0x278	; 0x278 <lightLED>
			return 1;
     5ea:	81 e0       	ldi	r24, 0x01	; 1
     5ec:	90 e0       	ldi	r25, 0x00	; 0
     5ee:	c4 c0       	rjmp	.+392    	; 0x778 <__EEPROM_REGION_LENGTH__+0x378>
		}
	}
	else if (version % 4 == 3){
     5f0:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <version>
     5f4:	90 91 51 01 	lds	r25, 0x0151	; 0x800151 <version+0x1>
     5f8:	83 70       	andi	r24, 0x03	; 3
     5fa:	90 78       	andi	r25, 0x80	; 128
     5fc:	99 23       	and	r25, r25
     5fe:	24 f4       	brge	.+8      	; 0x608 <__EEPROM_REGION_LENGTH__+0x208>
     600:	01 97       	sbiw	r24, 0x01	; 1
     602:	8c 6f       	ori	r24, 0xFC	; 252
     604:	9f 6f       	ori	r25, 0xFF	; 255
     606:	01 96       	adiw	r24, 0x01	; 1
     608:	03 97       	sbiw	r24, 0x03	; 3
     60a:	09 f0       	breq	.+2      	; 0x60e <__EEPROM_REGION_LENGTH__+0x20e>
     60c:	a5 c0       	rjmp	.+330    	; 0x758 <__EEPROM_REGION_LENGTH__+0x358>
		if (r > 16 || c < 1 || c > 7) return 0;
     60e:	01 31       	cpi	r16, 0x11	; 17
     610:	11 05       	cpc	r17, r1
     612:	0c f0       	brlt	.+2      	; 0x616 <__EEPROM_REGION_LENGTH__+0x216>
     614:	a4 c0       	rjmp	.+328    	; 0x75e <__EEPROM_REGION_LENGTH__+0x35e>
     616:	1e 14       	cp	r1, r14
     618:	1f 04       	cpc	r1, r15
     61a:	0c f0       	brlt	.+2      	; 0x61e <__EEPROM_REGION_LENGTH__+0x21e>
     61c:	a3 c0       	rjmp	.+326    	; 0x764 <__EEPROM_REGION_LENGTH__+0x364>
     61e:	88 e0       	ldi	r24, 0x08	; 8
     620:	e8 16       	cp	r14, r24
     622:	f1 04       	cpc	r15, r1
     624:	0c f0       	brlt	.+2      	; 0x628 <__EEPROM_REGION_LENGTH__+0x228>
     626:	a1 c0       	rjmp	.+322    	; 0x76a <__EEPROM_REGION_LENGTH__+0x36a>
		if (board[r][c] == 0 && board[r-1][c] == 0 &&
     628:	f8 01       	movw	r30, r16
     62a:	ee 0f       	add	r30, r30
     62c:	ff 1f       	adc	r31, r31
     62e:	ee 0f       	add	r30, r30
     630:	ff 1f       	adc	r31, r31
     632:	ee 0f       	add	r30, r30
     634:	ff 1f       	adc	r31, r31
     636:	e0 0f       	add	r30, r16
     638:	f1 1f       	adc	r31, r17
     63a:	ee 0d       	add	r30, r14
     63c:	ff 1d       	adc	r31, r15
     63e:	ee 0f       	add	r30, r30
     640:	ff 1f       	adc	r31, r31
     642:	ec 5a       	subi	r30, 0xAC	; 172
     644:	fe 4f       	sbci	r31, 0xFE	; 254
     646:	80 81       	ld	r24, Z
     648:	91 81       	ldd	r25, Z+1	; 0x01
     64a:	00 97       	sbiw	r24, 0x00	; 0
     64c:	09 f0       	breq	.+2      	; 0x650 <__EEPROM_REGION_LENGTH__+0x250>
     64e:	90 c0       	rjmp	.+288    	; 0x770 <__EEPROM_REGION_LENGTH__+0x370>
     650:	e8 01       	movw	r28, r16
     652:	21 97       	sbiw	r28, 0x01	; 1
     654:	fe 01       	movw	r30, r28
     656:	ee 0f       	add	r30, r30
     658:	ff 1f       	adc	r31, r31
     65a:	ee 0f       	add	r30, r30
     65c:	ff 1f       	adc	r31, r31
     65e:	ee 0f       	add	r30, r30
     660:	ff 1f       	adc	r31, r31
     662:	ec 0f       	add	r30, r28
     664:	fd 1f       	adc	r31, r29
     666:	ee 0d       	add	r30, r14
     668:	ff 1d       	adc	r31, r15
     66a:	ee 0f       	add	r30, r30
     66c:	ff 1f       	adc	r31, r31
     66e:	ec 5a       	subi	r30, 0xAC	; 172
     670:	fe 4f       	sbci	r31, 0xFE	; 254
     672:	20 81       	ld	r18, Z
     674:	31 81       	ldd	r19, Z+1	; 0x01
     676:	21 15       	cp	r18, r1
     678:	31 05       	cpc	r19, r1
     67a:	09 f0       	breq	.+2      	; 0x67e <__EEPROM_REGION_LENGTH__+0x27e>
     67c:	7d c0       	rjmp	.+250    	; 0x778 <__EEPROM_REGION_LENGTH__+0x378>
		board[r][c+1] == 0 && board[r+1][c] == 0){
     67e:	67 01       	movw	r12, r14
     680:	8f ef       	ldi	r24, 0xFF	; 255
     682:	c8 1a       	sub	r12, r24
     684:	d8 0a       	sbc	r13, r24
     686:	f8 01       	movw	r30, r16
     688:	ee 0f       	add	r30, r30
     68a:	ff 1f       	adc	r31, r31
     68c:	ee 0f       	add	r30, r30
     68e:	ff 1f       	adc	r31, r31
     690:	ee 0f       	add	r30, r30
     692:	ff 1f       	adc	r31, r31
     694:	e0 0f       	add	r30, r16
     696:	f1 1f       	adc	r31, r17
     698:	ec 0d       	add	r30, r12
     69a:	fd 1d       	adc	r31, r13
     69c:	ee 0f       	add	r30, r30
     69e:	ff 1f       	adc	r31, r31
     6a0:	ec 5a       	subi	r30, 0xAC	; 172
     6a2:	fe 4f       	sbci	r31, 0xFE	; 254
     6a4:	80 81       	ld	r24, Z
     6a6:	91 81       	ldd	r25, Z+1	; 0x01
			return 1;
		}
	}
	else if (version % 4 == 3){
		if (r > 16 || c < 1 || c > 7) return 0;
		if (board[r][c] == 0 && board[r-1][c] == 0 &&
     6a8:	00 97       	sbiw	r24, 0x00	; 0
     6aa:	09 f0       	breq	.+2      	; 0x6ae <__EEPROM_REGION_LENGTH__+0x2ae>
     6ac:	64 c0       	rjmp	.+200    	; 0x776 <__EEPROM_REGION_LENGTH__+0x376>
		board[r][c+1] == 0 && board[r+1][c] == 0){
     6ae:	58 01       	movw	r10, r16
     6b0:	2f ef       	ldi	r18, 0xFF	; 255
     6b2:	a2 1a       	sub	r10, r18
     6b4:	b2 0a       	sbc	r11, r18
     6b6:	f5 01       	movw	r30, r10
     6b8:	ee 0f       	add	r30, r30
     6ba:	ff 1f       	adc	r31, r31
     6bc:	ee 0f       	add	r30, r30
     6be:	ff 1f       	adc	r31, r31
     6c0:	ee 0f       	add	r30, r30
     6c2:	ff 1f       	adc	r31, r31
     6c4:	ea 0d       	add	r30, r10
     6c6:	fb 1d       	adc	r31, r11
     6c8:	ee 0d       	add	r30, r14
     6ca:	ff 1d       	adc	r31, r15
     6cc:	ee 0f       	add	r30, r30
     6ce:	ff 1f       	adc	r31, r31
     6d0:	ec 5a       	subi	r30, 0xAC	; 172
     6d2:	fe 4f       	sbci	r31, 0xFE	; 254
     6d4:	20 81       	ld	r18, Z
     6d6:	31 81       	ldd	r19, Z+1	; 0x01
     6d8:	23 2b       	or	r18, r19
     6da:	09 f0       	breq	.+2      	; 0x6de <__EEPROM_REGION_LENGTH__+0x2de>
     6dc:	4d c0       	rjmp	.+154    	; 0x778 <__EEPROM_REGION_LENGTH__+0x378>
			lightLED(r,c);
     6de:	b7 01       	movw	r22, r14
     6e0:	c8 01       	movw	r24, r16
     6e2:	0e 94 3c 01 	call	0x278	; 0x278 <lightLED>
			lightLED(r-1,c);
     6e6:	b7 01       	movw	r22, r14
     6e8:	ce 01       	movw	r24, r28
     6ea:	0e 94 3c 01 	call	0x278	; 0x278 <lightLED>
			lightLED(r,c+1);
     6ee:	b6 01       	movw	r22, r12
     6f0:	c8 01       	movw	r24, r16
     6f2:	0e 94 3c 01 	call	0x278	; 0x278 <lightLED>
			lightLED(r+1,c);
     6f6:	b7 01       	movw	r22, r14
     6f8:	c5 01       	movw	r24, r10
     6fa:	0e 94 3c 01 	call	0x278	; 0x278 <lightLED>
			return 1;
     6fe:	81 e0       	ldi	r24, 0x01	; 1
     700:	90 e0       	ldi	r25, 0x00	; 0
     702:	3a c0       	rjmp	.+116    	; 0x778 <__EEPROM_REGION_LENGTH__+0x378>
	board[r][c] = 1;
}

int makeT(int r, int c){
	if (version % 4 == 0){
		if (r > 17 || c < 2 || c > 7) return 0;
     704:	80 e0       	ldi	r24, 0x00	; 0
     706:	90 e0       	ldi	r25, 0x00	; 0
     708:	37 c0       	rjmp	.+110    	; 0x778 <__EEPROM_REGION_LENGTH__+0x378>
     70a:	80 e0       	ldi	r24, 0x00	; 0
     70c:	90 e0       	ldi	r25, 0x00	; 0
     70e:	34 c0       	rjmp	.+104    	; 0x778 <__EEPROM_REGION_LENGTH__+0x378>
     710:	80 e0       	ldi	r24, 0x00	; 0
     712:	90 e0       	ldi	r25, 0x00	; 0
     714:	31 c0       	rjmp	.+98     	; 0x778 <__EEPROM_REGION_LENGTH__+0x378>
			lightLED(r,c+1);
			lightLED(r+1,c);
			return 1;
		}
	}
	return 0;
     716:	80 e0       	ldi	r24, 0x00	; 0
     718:	90 e0       	ldi	r25, 0x00	; 0
     71a:	2e c0       	rjmp	.+92     	; 0x778 <__EEPROM_REGION_LENGTH__+0x378>
     71c:	c9 01       	movw	r24, r18
     71e:	2c c0       	rjmp	.+88     	; 0x778 <__EEPROM_REGION_LENGTH__+0x378>
			lightLED(r-1,c);
			return 1;
		}
	}
	else if (version % 4 == 1){
		if (r > 16 || c < 2 || c > 8) return 0;
     720:	80 e0       	ldi	r24, 0x00	; 0
     722:	90 e0       	ldi	r25, 0x00	; 0
     724:	29 c0       	rjmp	.+82     	; 0x778 <__EEPROM_REGION_LENGTH__+0x378>
     726:	80 e0       	ldi	r24, 0x00	; 0
     728:	90 e0       	ldi	r25, 0x00	; 0
     72a:	26 c0       	rjmp	.+76     	; 0x778 <__EEPROM_REGION_LENGTH__+0x378>
     72c:	80 e0       	ldi	r24, 0x00	; 0
     72e:	90 e0       	ldi	r25, 0x00	; 0
     730:	23 c0       	rjmp	.+70     	; 0x778 <__EEPROM_REGION_LENGTH__+0x378>
			lightLED(r,c+1);
			lightLED(r+1,c);
			return 1;
		}
	}
	return 0;
     732:	80 e0       	ldi	r24, 0x00	; 0
     734:	90 e0       	ldi	r25, 0x00	; 0
     736:	20 c0       	rjmp	.+64     	; 0x778 <__EEPROM_REGION_LENGTH__+0x378>
     738:	c9 01       	movw	r24, r18
     73a:	1e c0       	rjmp	.+60     	; 0x778 <__EEPROM_REGION_LENGTH__+0x378>
			return 1;
		}
	}
	
	else if (version % 4 == 2){
		if (r > 16 || c < 2 || c > 7) return 0;
     73c:	80 e0       	ldi	r24, 0x00	; 0
     73e:	90 e0       	ldi	r25, 0x00	; 0
     740:	1b c0       	rjmp	.+54     	; 0x778 <__EEPROM_REGION_LENGTH__+0x378>
     742:	80 e0       	ldi	r24, 0x00	; 0
     744:	90 e0       	ldi	r25, 0x00	; 0
     746:	18 c0       	rjmp	.+48     	; 0x778 <__EEPROM_REGION_LENGTH__+0x378>
     748:	80 e0       	ldi	r24, 0x00	; 0
     74a:	90 e0       	ldi	r25, 0x00	; 0
     74c:	15 c0       	rjmp	.+42     	; 0x778 <__EEPROM_REGION_LENGTH__+0x378>
			lightLED(r,c+1);
			lightLED(r+1,c);
			return 1;
		}
	}
	return 0;
     74e:	80 e0       	ldi	r24, 0x00	; 0
     750:	90 e0       	ldi	r25, 0x00	; 0
     752:	12 c0       	rjmp	.+36     	; 0x778 <__EEPROM_REGION_LENGTH__+0x378>
     754:	c9 01       	movw	r24, r18
     756:	10 c0       	rjmp	.+32     	; 0x778 <__EEPROM_REGION_LENGTH__+0x378>
     758:	80 e0       	ldi	r24, 0x00	; 0
     75a:	90 e0       	ldi	r25, 0x00	; 0
     75c:	0d c0       	rjmp	.+26     	; 0x778 <__EEPROM_REGION_LENGTH__+0x378>
			lightLED(r+1,c);
			return 1;
		}
	}
	else if (version % 4 == 3){
		if (r > 16 || c < 1 || c > 7) return 0;
     75e:	80 e0       	ldi	r24, 0x00	; 0
     760:	90 e0       	ldi	r25, 0x00	; 0
     762:	0a c0       	rjmp	.+20     	; 0x778 <__EEPROM_REGION_LENGTH__+0x378>
     764:	80 e0       	ldi	r24, 0x00	; 0
     766:	90 e0       	ldi	r25, 0x00	; 0
     768:	07 c0       	rjmp	.+14     	; 0x778 <__EEPROM_REGION_LENGTH__+0x378>
     76a:	80 e0       	ldi	r24, 0x00	; 0
     76c:	90 e0       	ldi	r25, 0x00	; 0
     76e:	04 c0       	rjmp	.+8      	; 0x778 <__EEPROM_REGION_LENGTH__+0x378>
			lightLED(r,c+1);
			lightLED(r+1,c);
			return 1;
		}
	}
	return 0;
     770:	80 e0       	ldi	r24, 0x00	; 0
     772:	90 e0       	ldi	r25, 0x00	; 0
     774:	01 c0       	rjmp	.+2      	; 0x778 <__EEPROM_REGION_LENGTH__+0x378>
     776:	c9 01       	movw	r24, r18
}
     778:	df 91       	pop	r29
     77a:	cf 91       	pop	r28
     77c:	1f 91       	pop	r17
     77e:	0f 91       	pop	r16
     780:	ff 90       	pop	r15
     782:	ef 90       	pop	r14
     784:	df 90       	pop	r13
     786:	cf 90       	pop	r12
     788:	bf 90       	pop	r11
     78a:	af 90       	pop	r10
     78c:	9f 90       	pop	r9
     78e:	8f 90       	pop	r8
     790:	08 95       	ret

00000792 <makeBAR>:

int makeBAR(int r, int c){
     792:	af 92       	push	r10
     794:	bf 92       	push	r11
     796:	cf 92       	push	r12
     798:	df 92       	push	r13
     79a:	ef 92       	push	r14
     79c:	ff 92       	push	r15
     79e:	0f 93       	push	r16
     7a0:	1f 93       	push	r17
     7a2:	cf 93       	push	r28
     7a4:	df 93       	push	r29
     7a6:	8c 01       	movw	r16, r24
     7a8:	7b 01       	movw	r14, r22
	if (version % 2 == 0){
     7aa:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <version>
     7ae:	90 91 51 01 	lds	r25, 0x0151	; 0x800151 <version+0x1>
     7b2:	80 fd       	sbrc	r24, 0
     7b4:	5d c0       	rjmp	.+186    	; 0x870 <__stack+0x11>
		if (r > 17 || c < 2 || c > 7) return 0;
     7b6:	02 31       	cpi	r16, 0x12	; 18
     7b8:	11 05       	cpc	r17, r1
     7ba:	0c f0       	brlt	.+2      	; 0x7be <makeBAR+0x2c>
     7bc:	c8 c0       	rjmp	.+400    	; 0x94e <__stack+0xef>
     7be:	62 30       	cpi	r22, 0x02	; 2
     7c0:	71 05       	cpc	r23, r1
     7c2:	0c f4       	brge	.+2      	; 0x7c6 <makeBAR+0x34>
     7c4:	c7 c0       	rjmp	.+398    	; 0x954 <__stack+0xf5>
     7c6:	68 30       	cpi	r22, 0x08	; 8
     7c8:	71 05       	cpc	r23, r1
     7ca:	0c f0       	brlt	.+2      	; 0x7ce <makeBAR+0x3c>
     7cc:	c6 c0       	rjmp	.+396    	; 0x95a <__stack+0xfb>
		if (board[r][c] == 0 && board[r][c-1] == 0 &&
     7ce:	f8 01       	movw	r30, r16
     7d0:	ee 0f       	add	r30, r30
     7d2:	ff 1f       	adc	r31, r31
     7d4:	ee 0f       	add	r30, r30
     7d6:	ff 1f       	adc	r31, r31
     7d8:	ee 0f       	add	r30, r30
     7da:	ff 1f       	adc	r31, r31
     7dc:	e0 0f       	add	r30, r16
     7de:	f1 1f       	adc	r31, r17
     7e0:	e6 0f       	add	r30, r22
     7e2:	f7 1f       	adc	r31, r23
     7e4:	ee 0f       	add	r30, r30
     7e6:	ff 1f       	adc	r31, r31
     7e8:	ec 5a       	subi	r30, 0xAC	; 172
     7ea:	fe 4f       	sbci	r31, 0xFE	; 254
     7ec:	20 81       	ld	r18, Z
     7ee:	31 81       	ldd	r19, Z+1	; 0x01
     7f0:	21 15       	cp	r18, r1
     7f2:	31 05       	cpc	r19, r1
     7f4:	09 f0       	breq	.+2      	; 0x7f8 <makeBAR+0x66>
     7f6:	b4 c0       	rjmp	.+360    	; 0x960 <__stack+0x101>
     7f8:	eb 01       	movw	r28, r22
     7fa:	21 97       	sbiw	r28, 0x01	; 1
     7fc:	f8 01       	movw	r30, r16
     7fe:	ee 0f       	add	r30, r30
     800:	ff 1f       	adc	r31, r31
     802:	ee 0f       	add	r30, r30
     804:	ff 1f       	adc	r31, r31
     806:	ee 0f       	add	r30, r30
     808:	ff 1f       	adc	r31, r31
     80a:	e0 0f       	add	r30, r16
     80c:	f1 1f       	adc	r31, r17
     80e:	ec 0f       	add	r30, r28
     810:	fd 1f       	adc	r31, r29
     812:	ee 0f       	add	r30, r30
     814:	ff 1f       	adc	r31, r31
     816:	ec 5a       	subi	r30, 0xAC	; 172
     818:	fe 4f       	sbci	r31, 0xFE	; 254
     81a:	80 81       	ld	r24, Z
     81c:	91 81       	ldd	r25, Z+1	; 0x01
     81e:	00 97       	sbiw	r24, 0x00	; 0
     820:	09 f0       	breq	.+2      	; 0x824 <__DATA_REGION_LENGTH__+0x24>
     822:	a1 c0       	rjmp	.+322    	; 0x966 <__stack+0x107>
		board[r][c+1] == 0){
     824:	6b 01       	movw	r12, r22
     826:	2f ef       	ldi	r18, 0xFF	; 255
     828:	c2 1a       	sub	r12, r18
     82a:	d2 0a       	sbc	r13, r18
     82c:	f8 01       	movw	r30, r16
     82e:	ee 0f       	add	r30, r30
     830:	ff 1f       	adc	r31, r31
     832:	ee 0f       	add	r30, r30
     834:	ff 1f       	adc	r31, r31
     836:	ee 0f       	add	r30, r30
     838:	ff 1f       	adc	r31, r31
     83a:	e0 0f       	add	r30, r16
     83c:	f1 1f       	adc	r31, r17
     83e:	ec 0d       	add	r30, r12
     840:	fd 1d       	adc	r31, r13
     842:	ee 0f       	add	r30, r30
     844:	ff 1f       	adc	r31, r31
     846:	ec 5a       	subi	r30, 0xAC	; 172
     848:	fe 4f       	sbci	r31, 0xFE	; 254
     84a:	20 81       	ld	r18, Z
     84c:	31 81       	ldd	r19, Z+1	; 0x01
}

int makeBAR(int r, int c){
	if (version % 2 == 0){
		if (r > 17 || c < 2 || c > 7) return 0;
		if (board[r][c] == 0 && board[r][c-1] == 0 &&
     84e:	23 2b       	or	r18, r19
     850:	09 f0       	breq	.+2      	; 0x854 <__DATA_REGION_LENGTH__+0x54>
     852:	9b c0       	rjmp	.+310    	; 0x98a <__stack+0x12b>
		board[r][c+1] == 0){
			lightLED(r,c);
     854:	c8 01       	movw	r24, r16
     856:	0e 94 3c 01 	call	0x278	; 0x278 <lightLED>
			lightLED(r,c-1);
     85a:	be 01       	movw	r22, r28
     85c:	c8 01       	movw	r24, r16
     85e:	0e 94 3c 01 	call	0x278	; 0x278 <lightLED>
			lightLED(r,c+1);
     862:	b6 01       	movw	r22, r12
     864:	c8 01       	movw	r24, r16
     866:	0e 94 3c 01 	call	0x278	; 0x278 <lightLED>
			return 1;
     86a:	81 e0       	ldi	r24, 0x01	; 1
     86c:	90 e0       	ldi	r25, 0x00	; 0
     86e:	8d c0       	rjmp	.+282    	; 0x98a <__stack+0x12b>
		}
	}
	else if (version % 2 == 1){
     870:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <version>
     874:	90 91 51 01 	lds	r25, 0x0151	; 0x800151 <version+0x1>
     878:	81 70       	andi	r24, 0x01	; 1
     87a:	90 78       	andi	r25, 0x80	; 128
     87c:	99 23       	and	r25, r25
     87e:	24 f4       	brge	.+8      	; 0x888 <__stack+0x29>
     880:	01 97       	sbiw	r24, 0x01	; 1
     882:	8e 6f       	ori	r24, 0xFE	; 254
     884:	9f 6f       	ori	r25, 0xFF	; 255
     886:	01 96       	adiw	r24, 0x01	; 1
     888:	ec 01       	movw	r28, r24
     88a:	01 97       	sbiw	r24, 0x01	; 1
     88c:	09 f0       	breq	.+2      	; 0x890 <__stack+0x31>
     88e:	6d c0       	rjmp	.+218    	; 0x96a <__stack+0x10b>
		if (r > 16 || c < 1 || c > 8) return 0;
     890:	01 31       	cpi	r16, 0x11	; 17
     892:	11 05       	cpc	r17, r1
     894:	0c f0       	brlt	.+2      	; 0x898 <__stack+0x39>
     896:	6c c0       	rjmp	.+216    	; 0x970 <__stack+0x111>
     898:	1e 14       	cp	r1, r14
     89a:	1f 04       	cpc	r1, r15
     89c:	0c f0       	brlt	.+2      	; 0x8a0 <__stack+0x41>
     89e:	6b c0       	rjmp	.+214    	; 0x976 <__stack+0x117>
     8a0:	89 e0       	ldi	r24, 0x09	; 9
     8a2:	e8 16       	cp	r14, r24
     8a4:	f1 04       	cpc	r15, r1
     8a6:	0c f0       	brlt	.+2      	; 0x8aa <__stack+0x4b>
     8a8:	69 c0       	rjmp	.+210    	; 0x97c <__stack+0x11d>
		if (board[r][c] == 0 && board[r-1][c] == 0 &&
     8aa:	f8 01       	movw	r30, r16
     8ac:	ee 0f       	add	r30, r30
     8ae:	ff 1f       	adc	r31, r31
     8b0:	ee 0f       	add	r30, r30
     8b2:	ff 1f       	adc	r31, r31
     8b4:	ee 0f       	add	r30, r30
     8b6:	ff 1f       	adc	r31, r31
     8b8:	e0 0f       	add	r30, r16
     8ba:	f1 1f       	adc	r31, r17
     8bc:	ee 0d       	add	r30, r14
     8be:	ff 1d       	adc	r31, r15
     8c0:	ee 0f       	add	r30, r30
     8c2:	ff 1f       	adc	r31, r31
     8c4:	ec 5a       	subi	r30, 0xAC	; 172
     8c6:	fe 4f       	sbci	r31, 0xFE	; 254
     8c8:	80 81       	ld	r24, Z
     8ca:	91 81       	ldd	r25, Z+1	; 0x01
     8cc:	00 97       	sbiw	r24, 0x00	; 0
     8ce:	09 f0       	breq	.+2      	; 0x8d2 <__stack+0x73>
     8d0:	58 c0       	rjmp	.+176    	; 0x982 <__stack+0x123>
     8d2:	68 01       	movw	r12, r16
     8d4:	21 e0       	ldi	r18, 0x01	; 1
     8d6:	c2 1a       	sub	r12, r18
     8d8:	d1 08       	sbc	r13, r1
     8da:	f6 01       	movw	r30, r12
     8dc:	ee 0f       	add	r30, r30
     8de:	ff 1f       	adc	r31, r31
     8e0:	ee 0f       	add	r30, r30
     8e2:	ff 1f       	adc	r31, r31
     8e4:	ee 0f       	add	r30, r30
     8e6:	ff 1f       	adc	r31, r31
     8e8:	ec 0d       	add	r30, r12
     8ea:	fd 1d       	adc	r31, r13
     8ec:	ee 0d       	add	r30, r14
     8ee:	ff 1d       	adc	r31, r15
     8f0:	ee 0f       	add	r30, r30
     8f2:	ff 1f       	adc	r31, r31
     8f4:	ec 5a       	subi	r30, 0xAC	; 172
     8f6:	fe 4f       	sbci	r31, 0xFE	; 254
     8f8:	20 81       	ld	r18, Z
     8fa:	31 81       	ldd	r19, Z+1	; 0x01
     8fc:	21 15       	cp	r18, r1
     8fe:	31 05       	cpc	r19, r1
     900:	09 f0       	breq	.+2      	; 0x904 <__stack+0xa5>
     902:	43 c0       	rjmp	.+134    	; 0x98a <__stack+0x12b>
		board[r+1][c] == 0){
     904:	58 01       	movw	r10, r16
     906:	8f ef       	ldi	r24, 0xFF	; 255
     908:	a8 1a       	sub	r10, r24
     90a:	b8 0a       	sbc	r11, r24
     90c:	f5 01       	movw	r30, r10
     90e:	ee 0f       	add	r30, r30
     910:	ff 1f       	adc	r31, r31
     912:	ee 0f       	add	r30, r30
     914:	ff 1f       	adc	r31, r31
     916:	ee 0f       	add	r30, r30
     918:	ff 1f       	adc	r31, r31
     91a:	ea 0d       	add	r30, r10
     91c:	fb 1d       	adc	r31, r11
     91e:	ee 0d       	add	r30, r14
     920:	ff 1d       	adc	r31, r15
     922:	ee 0f       	add	r30, r30
     924:	ff 1f       	adc	r31, r31
     926:	ec 5a       	subi	r30, 0xAC	; 172
     928:	fe 4f       	sbci	r31, 0xFE	; 254
     92a:	80 81       	ld	r24, Z
     92c:	91 81       	ldd	r25, Z+1	; 0x01
			return 1;
		}
	}
	else if (version % 2 == 1){
		if (r > 16 || c < 1 || c > 8) return 0;
		if (board[r][c] == 0 && board[r-1][c] == 0 &&
     92e:	89 2b       	or	r24, r25
     930:	59 f5       	brne	.+86     	; 0x988 <__stack+0x129>
		board[r+1][c] == 0){
			lightLED(r,c);
     932:	b7 01       	movw	r22, r14
     934:	c8 01       	movw	r24, r16
     936:	0e 94 3c 01 	call	0x278	; 0x278 <lightLED>
			lightLED(r-1,c);
     93a:	b7 01       	movw	r22, r14
     93c:	c6 01       	movw	r24, r12
     93e:	0e 94 3c 01 	call	0x278	; 0x278 <lightLED>
			lightLED(r+1,c);
     942:	b7 01       	movw	r22, r14
     944:	c5 01       	movw	r24, r10
     946:	0e 94 3c 01 	call	0x278	; 0x278 <lightLED>
			return 1;
     94a:	ce 01       	movw	r24, r28
     94c:	1e c0       	rjmp	.+60     	; 0x98a <__stack+0x12b>
	return 0;
}

int makeBAR(int r, int c){
	if (version % 2 == 0){
		if (r > 17 || c < 2 || c > 7) return 0;
     94e:	80 e0       	ldi	r24, 0x00	; 0
     950:	90 e0       	ldi	r25, 0x00	; 0
     952:	1b c0       	rjmp	.+54     	; 0x98a <__stack+0x12b>
     954:	80 e0       	ldi	r24, 0x00	; 0
     956:	90 e0       	ldi	r25, 0x00	; 0
     958:	18 c0       	rjmp	.+48     	; 0x98a <__stack+0x12b>
     95a:	80 e0       	ldi	r24, 0x00	; 0
     95c:	90 e0       	ldi	r25, 0x00	; 0
     95e:	15 c0       	rjmp	.+42     	; 0x98a <__stack+0x12b>
			lightLED(r-1,c);
			lightLED(r+1,c);
			return 1;
		}
	}
	return 0;
     960:	80 e0       	ldi	r24, 0x00	; 0
     962:	90 e0       	ldi	r25, 0x00	; 0
     964:	12 c0       	rjmp	.+36     	; 0x98a <__stack+0x12b>
     966:	c9 01       	movw	r24, r18
     968:	10 c0       	rjmp	.+32     	; 0x98a <__stack+0x12b>
     96a:	80 e0       	ldi	r24, 0x00	; 0
     96c:	90 e0       	ldi	r25, 0x00	; 0
     96e:	0d c0       	rjmp	.+26     	; 0x98a <__stack+0x12b>
			lightLED(r,c+1);
			return 1;
		}
	}
	else if (version % 2 == 1){
		if (r > 16 || c < 1 || c > 8) return 0;
     970:	80 e0       	ldi	r24, 0x00	; 0
     972:	90 e0       	ldi	r25, 0x00	; 0
     974:	0a c0       	rjmp	.+20     	; 0x98a <__stack+0x12b>
     976:	80 e0       	ldi	r24, 0x00	; 0
     978:	90 e0       	ldi	r25, 0x00	; 0
     97a:	07 c0       	rjmp	.+14     	; 0x98a <__stack+0x12b>
     97c:	80 e0       	ldi	r24, 0x00	; 0
     97e:	90 e0       	ldi	r25, 0x00	; 0
     980:	04 c0       	rjmp	.+8      	; 0x98a <__stack+0x12b>
			lightLED(r-1,c);
			lightLED(r+1,c);
			return 1;
		}
	}
	return 0;
     982:	80 e0       	ldi	r24, 0x00	; 0
     984:	90 e0       	ldi	r25, 0x00	; 0
     986:	01 c0       	rjmp	.+2      	; 0x98a <__stack+0x12b>
     988:	c9 01       	movw	r24, r18
}
     98a:	df 91       	pop	r29
     98c:	cf 91       	pop	r28
     98e:	1f 91       	pop	r17
     990:	0f 91       	pop	r16
     992:	ff 90       	pop	r15
     994:	ef 90       	pop	r14
     996:	df 90       	pop	r13
     998:	cf 90       	pop	r12
     99a:	bf 90       	pop	r11
     99c:	af 90       	pop	r10
     99e:	08 95       	ret

000009a0 <makeSQUARE>:

int makeSQUARE(int r, int c){
     9a0:	cf 92       	push	r12
     9a2:	df 92       	push	r13
     9a4:	ef 92       	push	r14
     9a6:	ff 92       	push	r15
     9a8:	0f 93       	push	r16
     9aa:	1f 93       	push	r17
     9ac:	cf 93       	push	r28
     9ae:	df 93       	push	r29
	if (r > 17 || c < 1 || c > 7) return 0;
     9b0:	82 31       	cpi	r24, 0x12	; 18
     9b2:	91 05       	cpc	r25, r1
     9b4:	0c f0       	brlt	.+2      	; 0x9b8 <makeSQUARE+0x18>
     9b6:	74 c0       	rjmp	.+232    	; 0xaa0 <makeSQUARE+0x100>
     9b8:	16 16       	cp	r1, r22
     9ba:	17 06       	cpc	r1, r23
     9bc:	0c f0       	brlt	.+2      	; 0x9c0 <makeSQUARE+0x20>
     9be:	73 c0       	rjmp	.+230    	; 0xaa6 <makeSQUARE+0x106>
     9c0:	68 30       	cpi	r22, 0x08	; 8
     9c2:	71 05       	cpc	r23, r1
     9c4:	0c f0       	brlt	.+2      	; 0x9c8 <makeSQUARE+0x28>
     9c6:	72 c0       	rjmp	.+228    	; 0xaac <makeSQUARE+0x10c>
	if (board[r][c] == 0 && board[r][c+1] == 0 &&
     9c8:	fc 01       	movw	r30, r24
     9ca:	ee 0f       	add	r30, r30
     9cc:	ff 1f       	adc	r31, r31
     9ce:	ee 0f       	add	r30, r30
     9d0:	ff 1f       	adc	r31, r31
     9d2:	ee 0f       	add	r30, r30
     9d4:	ff 1f       	adc	r31, r31
     9d6:	e8 0f       	add	r30, r24
     9d8:	f9 1f       	adc	r31, r25
     9da:	e6 0f       	add	r30, r22
     9dc:	f7 1f       	adc	r31, r23
     9de:	ee 0f       	add	r30, r30
     9e0:	ff 1f       	adc	r31, r31
     9e2:	ec 5a       	subi	r30, 0xAC	; 172
     9e4:	fe 4f       	sbci	r31, 0xFE	; 254
     9e6:	20 81       	ld	r18, Z
     9e8:	31 81       	ldd	r19, Z+1	; 0x01
     9ea:	21 15       	cp	r18, r1
     9ec:	31 05       	cpc	r19, r1
     9ee:	09 f0       	breq	.+2      	; 0x9f2 <makeSQUARE+0x52>
     9f0:	60 c0       	rjmp	.+192    	; 0xab2 <makeSQUARE+0x112>
     9f2:	6b 01       	movw	r12, r22
     9f4:	4f ef       	ldi	r20, 0xFF	; 255
     9f6:	c4 1a       	sub	r12, r20
     9f8:	d4 0a       	sbc	r13, r20
     9fa:	fc 01       	movw	r30, r24
     9fc:	ee 0f       	add	r30, r30
     9fe:	ff 1f       	adc	r31, r31
     a00:	ee 0f       	add	r30, r30
     a02:	ff 1f       	adc	r31, r31
     a04:	ee 0f       	add	r30, r30
     a06:	ff 1f       	adc	r31, r31
     a08:	e8 0f       	add	r30, r24
     a0a:	f9 1f       	adc	r31, r25
     a0c:	ec 0d       	add	r30, r12
     a0e:	fd 1d       	adc	r31, r13
     a10:	ee 0f       	add	r30, r30
     a12:	ff 1f       	adc	r31, r31
     a14:	ec 5a       	subi	r30, 0xAC	; 172
     a16:	fe 4f       	sbci	r31, 0xFE	; 254
     a18:	40 81       	ld	r20, Z
     a1a:	51 81       	ldd	r21, Z+1	; 0x01
     a1c:	41 15       	cp	r20, r1
     a1e:	51 05       	cpc	r21, r1
     a20:	09 f0       	breq	.+2      	; 0xa24 <makeSQUARE+0x84>
     a22:	4b c0       	rjmp	.+150    	; 0xaba <makeSQUARE+0x11a>
	board[r-1][c] == 0 && board[r-1][c+1] == 0){
     a24:	7c 01       	movw	r14, r24
     a26:	21 e0       	ldi	r18, 0x01	; 1
     a28:	e2 1a       	sub	r14, r18
     a2a:	f1 08       	sbc	r15, r1
     a2c:	f7 01       	movw	r30, r14
     a2e:	ee 0f       	add	r30, r30
     a30:	ff 1f       	adc	r31, r31
     a32:	ee 0f       	add	r30, r30
     a34:	ff 1f       	adc	r31, r31
     a36:	ee 0f       	add	r30, r30
     a38:	ff 1f       	adc	r31, r31
     a3a:	ee 0d       	add	r30, r14
     a3c:	ff 1d       	adc	r31, r15
     a3e:	e6 0f       	add	r30, r22
     a40:	f7 1f       	adc	r31, r23
     a42:	ee 0f       	add	r30, r30
     a44:	ff 1f       	adc	r31, r31
     a46:	ec 5a       	subi	r30, 0xAC	; 172
     a48:	fe 4f       	sbci	r31, 0xFE	; 254
     a4a:	20 81       	ld	r18, Z
     a4c:	31 81       	ldd	r19, Z+1	; 0x01
	return 0;
}

int makeSQUARE(int r, int c){
	if (r > 17 || c < 1 || c > 7) return 0;
	if (board[r][c] == 0 && board[r][c+1] == 0 &&
     a4e:	21 15       	cp	r18, r1
     a50:	31 05       	cpc	r19, r1
     a52:	91 f5       	brne	.+100    	; 0xab8 <makeSQUARE+0x118>
	board[r-1][c] == 0 && board[r-1][c+1] == 0){
     a54:	f7 01       	movw	r30, r14
     a56:	ee 0f       	add	r30, r30
     a58:	ff 1f       	adc	r31, r31
     a5a:	ee 0f       	add	r30, r30
     a5c:	ff 1f       	adc	r31, r31
     a5e:	ee 0f       	add	r30, r30
     a60:	ff 1f       	adc	r31, r31
     a62:	ee 0d       	add	r30, r14
     a64:	ff 1d       	adc	r31, r15
     a66:	ec 0d       	add	r30, r12
     a68:	fd 1d       	adc	r31, r13
     a6a:	ee 0f       	add	r30, r30
     a6c:	ff 1f       	adc	r31, r31
     a6e:	ec 5a       	subi	r30, 0xAC	; 172
     a70:	fe 4f       	sbci	r31, 0xFE	; 254
     a72:	40 81       	ld	r20, Z
     a74:	51 81       	ldd	r21, Z+1	; 0x01
     a76:	45 2b       	or	r20, r21
     a78:	01 f5       	brne	.+64     	; 0xaba <makeSQUARE+0x11a>
     a7a:	8b 01       	movw	r16, r22
     a7c:	ec 01       	movw	r28, r24
		lightLED(r,c);
     a7e:	0e 94 3c 01 	call	0x278	; 0x278 <lightLED>
		lightLED(r,c+1);
     a82:	b6 01       	movw	r22, r12
     a84:	ce 01       	movw	r24, r28
     a86:	0e 94 3c 01 	call	0x278	; 0x278 <lightLED>
		lightLED(r-1,c);
     a8a:	b8 01       	movw	r22, r16
     a8c:	c7 01       	movw	r24, r14
     a8e:	0e 94 3c 01 	call	0x278	; 0x278 <lightLED>
		lightLED(r-1,c+1);
     a92:	b6 01       	movw	r22, r12
     a94:	c7 01       	movw	r24, r14
     a96:	0e 94 3c 01 	call	0x278	; 0x278 <lightLED>
		return 1;
     a9a:	21 e0       	ldi	r18, 0x01	; 1
     a9c:	30 e0       	ldi	r19, 0x00	; 0
     a9e:	0d c0       	rjmp	.+26     	; 0xaba <makeSQUARE+0x11a>
	}
	return 0;
}

int makeSQUARE(int r, int c){
	if (r > 17 || c < 1 || c > 7) return 0;
     aa0:	20 e0       	ldi	r18, 0x00	; 0
     aa2:	30 e0       	ldi	r19, 0x00	; 0
     aa4:	0a c0       	rjmp	.+20     	; 0xaba <makeSQUARE+0x11a>
     aa6:	20 e0       	ldi	r18, 0x00	; 0
     aa8:	30 e0       	ldi	r19, 0x00	; 0
     aaa:	07 c0       	rjmp	.+14     	; 0xaba <makeSQUARE+0x11a>
     aac:	20 e0       	ldi	r18, 0x00	; 0
     aae:	30 e0       	ldi	r19, 0x00	; 0
     ab0:	04 c0       	rjmp	.+8      	; 0xaba <makeSQUARE+0x11a>
		lightLED(r,c+1);
		lightLED(r-1,c);
		lightLED(r-1,c+1);
		return 1;
	}
	return 0;
     ab2:	20 e0       	ldi	r18, 0x00	; 0
     ab4:	30 e0       	ldi	r19, 0x00	; 0
     ab6:	01 c0       	rjmp	.+2      	; 0xaba <makeSQUARE+0x11a>
     ab8:	9a 01       	movw	r18, r20
}
     aba:	c9 01       	movw	r24, r18
     abc:	df 91       	pop	r29
     abe:	cf 91       	pop	r28
     ac0:	1f 91       	pop	r17
     ac2:	0f 91       	pop	r16
     ac4:	ff 90       	pop	r15
     ac6:	ef 90       	pop	r14
     ac8:	df 90       	pop	r13
     aca:	cf 90       	pop	r12
     acc:	08 95       	ret

00000ace <makeL>:

int makeL(int r, int c){
     ace:	8f 92       	push	r8
     ad0:	9f 92       	push	r9
     ad2:	af 92       	push	r10
     ad4:	bf 92       	push	r11
     ad6:	cf 92       	push	r12
     ad8:	df 92       	push	r13
     ada:	ef 92       	push	r14
     adc:	ff 92       	push	r15
     ade:	0f 93       	push	r16
     ae0:	1f 93       	push	r17
     ae2:	cf 93       	push	r28
     ae4:	df 93       	push	r29
     ae6:	8c 01       	movw	r16, r24
     ae8:	7b 01       	movw	r14, r22
	if (version % 4 == 0) {
     aea:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <version>
     aee:	90 91 51 01 	lds	r25, 0x0151	; 0x800151 <version+0x1>
     af2:	83 70       	andi	r24, 0x03	; 3
     af4:	99 27       	eor	r25, r25
     af6:	89 2b       	or	r24, r25
     af8:	09 f0       	breq	.+2      	; 0xafc <makeL+0x2e>
     afa:	79 c0       	rjmp	.+242    	; 0xbee <makeL+0x120>
		if (r > 16 || c < 2 || c > 8) return 0;
     afc:	01 31       	cpi	r16, 0x11	; 17
     afe:	11 05       	cpc	r17, r1
     b00:	0c f0       	brlt	.+2      	; 0xb04 <makeL+0x36>
     b02:	17 c2       	rjmp	.+1070   	; 0xf32 <makeL+0x464>
     b04:	62 30       	cpi	r22, 0x02	; 2
     b06:	71 05       	cpc	r23, r1
     b08:	0c f4       	brge	.+2      	; 0xb0c <makeL+0x3e>
     b0a:	16 c2       	rjmp	.+1068   	; 0xf38 <makeL+0x46a>
     b0c:	69 30       	cpi	r22, 0x09	; 9
     b0e:	71 05       	cpc	r23, r1
     b10:	0c f0       	brlt	.+2      	; 0xb14 <makeL+0x46>
     b12:	15 c2       	rjmp	.+1066   	; 0xf3e <makeL+0x470>
		if (board[r][c] == 0 && board[r+1][c-1] == 0 &&
     b14:	f8 01       	movw	r30, r16
     b16:	ee 0f       	add	r30, r30
     b18:	ff 1f       	adc	r31, r31
     b1a:	ee 0f       	add	r30, r30
     b1c:	ff 1f       	adc	r31, r31
     b1e:	ee 0f       	add	r30, r30
     b20:	ff 1f       	adc	r31, r31
     b22:	e0 0f       	add	r30, r16
     b24:	f1 1f       	adc	r31, r17
     b26:	e6 0f       	add	r30, r22
     b28:	f7 1f       	adc	r31, r23
     b2a:	ee 0f       	add	r30, r30
     b2c:	ff 1f       	adc	r31, r31
     b2e:	ec 5a       	subi	r30, 0xAC	; 172
     b30:	fe 4f       	sbci	r31, 0xFE	; 254
     b32:	80 81       	ld	r24, Z
     b34:	91 81       	ldd	r25, Z+1	; 0x01
     b36:	00 97       	sbiw	r24, 0x00	; 0
     b38:	09 f0       	breq	.+2      	; 0xb3c <makeL+0x6e>
     b3a:	04 c2       	rjmp	.+1032   	; 0xf44 <makeL+0x476>
     b3c:	e8 01       	movw	r28, r16
     b3e:	21 96       	adiw	r28, 0x01	; 1
     b40:	6b 01       	movw	r12, r22
     b42:	21 e0       	ldi	r18, 0x01	; 1
     b44:	c2 1a       	sub	r12, r18
     b46:	d1 08       	sbc	r13, r1
     b48:	fe 01       	movw	r30, r28
     b4a:	ee 0f       	add	r30, r30
     b4c:	ff 1f       	adc	r31, r31
     b4e:	ee 0f       	add	r30, r30
     b50:	ff 1f       	adc	r31, r31
     b52:	ee 0f       	add	r30, r30
     b54:	ff 1f       	adc	r31, r31
     b56:	ec 0f       	add	r30, r28
     b58:	fd 1f       	adc	r31, r29
     b5a:	ec 0d       	add	r30, r12
     b5c:	fd 1d       	adc	r31, r13
     b5e:	ee 0f       	add	r30, r30
     b60:	ff 1f       	adc	r31, r31
     b62:	ec 5a       	subi	r30, 0xAC	; 172
     b64:	fe 4f       	sbci	r31, 0xFE	; 254
     b66:	20 81       	ld	r18, Z
     b68:	31 81       	ldd	r19, Z+1	; 0x01
     b6a:	21 15       	cp	r18, r1
     b6c:	31 05       	cpc	r19, r1
     b6e:	09 f0       	breq	.+2      	; 0xb72 <makeL+0xa4>
     b70:	1a c2       	rjmp	.+1076   	; 0xfa6 <makeL+0x4d8>
		board[r-1][c] == 0 && board[r+1][c] == 0){
     b72:	58 01       	movw	r10, r16
     b74:	81 e0       	ldi	r24, 0x01	; 1
     b76:	a8 1a       	sub	r10, r24
     b78:	b1 08       	sbc	r11, r1
     b7a:	f5 01       	movw	r30, r10
     b7c:	ee 0f       	add	r30, r30
     b7e:	ff 1f       	adc	r31, r31
     b80:	ee 0f       	add	r30, r30
     b82:	ff 1f       	adc	r31, r31
     b84:	ee 0f       	add	r30, r30
     b86:	ff 1f       	adc	r31, r31
     b88:	ea 0d       	add	r30, r10
     b8a:	fb 1d       	adc	r31, r11
     b8c:	e6 0f       	add	r30, r22
     b8e:	f7 1f       	adc	r31, r23
     b90:	ee 0f       	add	r30, r30
     b92:	ff 1f       	adc	r31, r31
     b94:	ec 5a       	subi	r30, 0xAC	; 172
     b96:	fe 4f       	sbci	r31, 0xFE	; 254
     b98:	80 81       	ld	r24, Z
     b9a:	91 81       	ldd	r25, Z+1	; 0x01
}

int makeL(int r, int c){
	if (version % 4 == 0) {
		if (r > 16 || c < 2 || c > 8) return 0;
		if (board[r][c] == 0 && board[r+1][c-1] == 0 &&
     b9c:	00 97       	sbiw	r24, 0x00	; 0
     b9e:	09 f0       	breq	.+2      	; 0xba2 <makeL+0xd4>
     ba0:	d4 c1       	rjmp	.+936    	; 0xf4a <makeL+0x47c>
		board[r-1][c] == 0 && board[r+1][c] == 0){
     ba2:	fe 01       	movw	r30, r28
     ba4:	ee 0f       	add	r30, r30
     ba6:	ff 1f       	adc	r31, r31
     ba8:	ee 0f       	add	r30, r30
     baa:	ff 1f       	adc	r31, r31
     bac:	ee 0f       	add	r30, r30
     bae:	ff 1f       	adc	r31, r31
     bb0:	ec 0f       	add	r30, r28
     bb2:	fd 1f       	adc	r31, r29
     bb4:	e6 0f       	add	r30, r22
     bb6:	f7 1f       	adc	r31, r23
     bb8:	ee 0f       	add	r30, r30
     bba:	ff 1f       	adc	r31, r31
     bbc:	ec 5a       	subi	r30, 0xAC	; 172
     bbe:	fe 4f       	sbci	r31, 0xFE	; 254
     bc0:	20 81       	ld	r18, Z
     bc2:	31 81       	ldd	r19, Z+1	; 0x01
     bc4:	23 2b       	or	r18, r19
     bc6:	09 f0       	breq	.+2      	; 0xbca <makeL+0xfc>
     bc8:	ee c1       	rjmp	.+988    	; 0xfa6 <makeL+0x4d8>
			lightLED(r,c);
     bca:	c8 01       	movw	r24, r16
     bcc:	0e 94 3c 01 	call	0x278	; 0x278 <lightLED>
			lightLED(r+1,c);
     bd0:	b7 01       	movw	r22, r14
     bd2:	ce 01       	movw	r24, r28
     bd4:	0e 94 3c 01 	call	0x278	; 0x278 <lightLED>
			lightLED(r+1,c-1);
     bd8:	b6 01       	movw	r22, r12
     bda:	ce 01       	movw	r24, r28
     bdc:	0e 94 3c 01 	call	0x278	; 0x278 <lightLED>
			lightLED(r-1,c);
     be0:	b7 01       	movw	r22, r14
     be2:	c5 01       	movw	r24, r10
     be4:	0e 94 3c 01 	call	0x278	; 0x278 <lightLED>
			return 1;
     be8:	81 e0       	ldi	r24, 0x01	; 1
     bea:	90 e0       	ldi	r25, 0x00	; 0
     bec:	dc c1       	rjmp	.+952    	; 0xfa6 <makeL+0x4d8>
		}
	}
	else if (version % 4 == 1) {
     bee:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <version>
     bf2:	90 91 51 01 	lds	r25, 0x0151	; 0x800151 <version+0x1>
     bf6:	83 70       	andi	r24, 0x03	; 3
     bf8:	90 78       	andi	r25, 0x80	; 128
     bfa:	99 23       	and	r25, r25
     bfc:	24 f4       	brge	.+8      	; 0xc06 <makeL+0x138>
     bfe:	01 97       	sbiw	r24, 0x01	; 1
     c00:	8c 6f       	ori	r24, 0xFC	; 252
     c02:	9f 6f       	ori	r25, 0xFF	; 255
     c04:	01 96       	adiw	r24, 0x01	; 1
     c06:	ec 01       	movw	r28, r24
     c08:	01 97       	sbiw	r24, 0x01	; 1
     c0a:	09 f0       	breq	.+2      	; 0xc0e <makeL+0x140>
     c0c:	7d c0       	rjmp	.+250    	; 0xd08 <makeL+0x23a>
		if (r > 16 || c < 2 || c > 7) return 0;
     c0e:	01 31       	cpi	r16, 0x11	; 17
     c10:	11 05       	cpc	r17, r1
     c12:	0c f0       	brlt	.+2      	; 0xc16 <makeL+0x148>
     c14:	9c c1       	rjmp	.+824    	; 0xf4e <makeL+0x480>
     c16:	22 e0       	ldi	r18, 0x02	; 2
     c18:	e2 16       	cp	r14, r18
     c1a:	f1 04       	cpc	r15, r1
     c1c:	0c f4       	brge	.+2      	; 0xc20 <makeL+0x152>
     c1e:	9a c1       	rjmp	.+820    	; 0xf54 <makeL+0x486>
     c20:	88 e0       	ldi	r24, 0x08	; 8
     c22:	e8 16       	cp	r14, r24
     c24:	f1 04       	cpc	r15, r1
     c26:	0c f0       	brlt	.+2      	; 0xc2a <makeL+0x15c>
     c28:	98 c1       	rjmp	.+816    	; 0xf5a <makeL+0x48c>
		if (board[r][c] == 0 && board[r][c+1] == 0 &&
     c2a:	f8 01       	movw	r30, r16
     c2c:	ee 0f       	add	r30, r30
     c2e:	ff 1f       	adc	r31, r31
     c30:	ee 0f       	add	r30, r30
     c32:	ff 1f       	adc	r31, r31
     c34:	ee 0f       	add	r30, r30
     c36:	ff 1f       	adc	r31, r31
     c38:	e0 0f       	add	r30, r16
     c3a:	f1 1f       	adc	r31, r17
     c3c:	ee 0d       	add	r30, r14
     c3e:	ff 1d       	adc	r31, r15
     c40:	ee 0f       	add	r30, r30
     c42:	ff 1f       	adc	r31, r31
     c44:	ec 5a       	subi	r30, 0xAC	; 172
     c46:	fe 4f       	sbci	r31, 0xFE	; 254
     c48:	80 81       	ld	r24, Z
     c4a:	91 81       	ldd	r25, Z+1	; 0x01
     c4c:	00 97       	sbiw	r24, 0x00	; 0
     c4e:	09 f0       	breq	.+2      	; 0xc52 <makeL+0x184>
     c50:	87 c1       	rjmp	.+782    	; 0xf60 <makeL+0x492>
     c52:	67 01       	movw	r12, r14
     c54:	2f ef       	ldi	r18, 0xFF	; 255
     c56:	c2 1a       	sub	r12, r18
     c58:	d2 0a       	sbc	r13, r18
     c5a:	f8 01       	movw	r30, r16
     c5c:	ee 0f       	add	r30, r30
     c5e:	ff 1f       	adc	r31, r31
     c60:	ee 0f       	add	r30, r30
     c62:	ff 1f       	adc	r31, r31
     c64:	ee 0f       	add	r30, r30
     c66:	ff 1f       	adc	r31, r31
     c68:	e0 0f       	add	r30, r16
     c6a:	f1 1f       	adc	r31, r17
     c6c:	ec 0d       	add	r30, r12
     c6e:	fd 1d       	adc	r31, r13
     c70:	ee 0f       	add	r30, r30
     c72:	ff 1f       	adc	r31, r31
     c74:	ec 5a       	subi	r30, 0xAC	; 172
     c76:	fe 4f       	sbci	r31, 0xFE	; 254
     c78:	20 81       	ld	r18, Z
     c7a:	31 81       	ldd	r19, Z+1	; 0x01
     c7c:	21 15       	cp	r18, r1
     c7e:	31 05       	cpc	r19, r1
     c80:	09 f0       	breq	.+2      	; 0xc84 <makeL+0x1b6>
     c82:	91 c1       	rjmp	.+802    	; 0xfa6 <makeL+0x4d8>
		board[r][c-1] == 0 && board[r+1][c+1] == 0){
     c84:	57 01       	movw	r10, r14
     c86:	81 e0       	ldi	r24, 0x01	; 1
     c88:	a8 1a       	sub	r10, r24
     c8a:	b1 08       	sbc	r11, r1
     c8c:	f8 01       	movw	r30, r16
     c8e:	ee 0f       	add	r30, r30
     c90:	ff 1f       	adc	r31, r31
     c92:	ee 0f       	add	r30, r30
     c94:	ff 1f       	adc	r31, r31
     c96:	ee 0f       	add	r30, r30
     c98:	ff 1f       	adc	r31, r31
     c9a:	e0 0f       	add	r30, r16
     c9c:	f1 1f       	adc	r31, r17
     c9e:	ea 0d       	add	r30, r10
     ca0:	fb 1d       	adc	r31, r11
     ca2:	ee 0f       	add	r30, r30
     ca4:	ff 1f       	adc	r31, r31
     ca6:	ec 5a       	subi	r30, 0xAC	; 172
     ca8:	fe 4f       	sbci	r31, 0xFE	; 254
     caa:	80 81       	ld	r24, Z
     cac:	91 81       	ldd	r25, Z+1	; 0x01
			return 1;
		}
	}
	else if (version % 4 == 1) {
		if (r > 16 || c < 2 || c > 7) return 0;
		if (board[r][c] == 0 && board[r][c+1] == 0 &&
     cae:	00 97       	sbiw	r24, 0x00	; 0
     cb0:	09 f0       	breq	.+2      	; 0xcb4 <makeL+0x1e6>
     cb2:	59 c1       	rjmp	.+690    	; 0xf66 <makeL+0x498>
		board[r][c-1] == 0 && board[r+1][c+1] == 0){
     cb4:	48 01       	movw	r8, r16
     cb6:	2f ef       	ldi	r18, 0xFF	; 255
     cb8:	82 1a       	sub	r8, r18
     cba:	92 0a       	sbc	r9, r18
     cbc:	f4 01       	movw	r30, r8
     cbe:	ee 0f       	add	r30, r30
     cc0:	ff 1f       	adc	r31, r31
     cc2:	ee 0f       	add	r30, r30
     cc4:	ff 1f       	adc	r31, r31
     cc6:	ee 0f       	add	r30, r30
     cc8:	ff 1f       	adc	r31, r31
     cca:	e8 0d       	add	r30, r8
     ccc:	f9 1d       	adc	r31, r9
     cce:	ec 0d       	add	r30, r12
     cd0:	fd 1d       	adc	r31, r13
     cd2:	ee 0f       	add	r30, r30
     cd4:	ff 1f       	adc	r31, r31
     cd6:	ec 5a       	subi	r30, 0xAC	; 172
     cd8:	fe 4f       	sbci	r31, 0xFE	; 254
     cda:	20 81       	ld	r18, Z
     cdc:	31 81       	ldd	r19, Z+1	; 0x01
     cde:	23 2b       	or	r18, r19
     ce0:	09 f0       	breq	.+2      	; 0xce4 <makeL+0x216>
     ce2:	61 c1       	rjmp	.+706    	; 0xfa6 <makeL+0x4d8>
			lightLED(r,c);
     ce4:	b7 01       	movw	r22, r14
     ce6:	c8 01       	movw	r24, r16
     ce8:	0e 94 3c 01 	call	0x278	; 0x278 <lightLED>
			lightLED(r,c+1);
     cec:	b6 01       	movw	r22, r12
     cee:	c8 01       	movw	r24, r16
     cf0:	0e 94 3c 01 	call	0x278	; 0x278 <lightLED>
			lightLED(r,c-1);
     cf4:	b5 01       	movw	r22, r10
     cf6:	c8 01       	movw	r24, r16
     cf8:	0e 94 3c 01 	call	0x278	; 0x278 <lightLED>
			lightLED(r+1,c+1);
     cfc:	b6 01       	movw	r22, r12
     cfe:	c4 01       	movw	r24, r8
     d00:	0e 94 3c 01 	call	0x278	; 0x278 <lightLED>
			return 1;
     d04:	ce 01       	movw	r24, r28
     d06:	4f c1       	rjmp	.+670    	; 0xfa6 <makeL+0x4d8>
		}
	}
	else if (version % 4 == 2) {
     d08:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <version>
     d0c:	90 91 51 01 	lds	r25, 0x0151	; 0x800151 <version+0x1>
     d10:	83 70       	andi	r24, 0x03	; 3
     d12:	90 78       	andi	r25, 0x80	; 128
     d14:	99 23       	and	r25, r25
     d16:	24 f4       	brge	.+8      	; 0xd20 <makeL+0x252>
     d18:	01 97       	sbiw	r24, 0x01	; 1
     d1a:	8c 6f       	ori	r24, 0xFC	; 252
     d1c:	9f 6f       	ori	r25, 0xFF	; 255
     d1e:	01 96       	adiw	r24, 0x01	; 1
     d20:	02 97       	sbiw	r24, 0x02	; 2
     d22:	09 f0       	breq	.+2      	; 0xd26 <makeL+0x258>
     d24:	7b c0       	rjmp	.+246    	; 0xe1c <makeL+0x34e>
		if (r > 17 || c < 1 || c > 7) return 0;
     d26:	02 31       	cpi	r16, 0x12	; 18
     d28:	11 05       	cpc	r17, r1
     d2a:	0c f0       	brlt	.+2      	; 0xd2e <makeL+0x260>
     d2c:	1e c1       	rjmp	.+572    	; 0xf6a <makeL+0x49c>
     d2e:	1e 14       	cp	r1, r14
     d30:	1f 04       	cpc	r1, r15
     d32:	0c f0       	brlt	.+2      	; 0xd36 <makeL+0x268>
     d34:	1d c1       	rjmp	.+570    	; 0xf70 <makeL+0x4a2>
     d36:	88 e0       	ldi	r24, 0x08	; 8
     d38:	e8 16       	cp	r14, r24
     d3a:	f1 04       	cpc	r15, r1
     d3c:	0c f0       	brlt	.+2      	; 0xd40 <makeL+0x272>
     d3e:	1b c1       	rjmp	.+566    	; 0xf76 <makeL+0x4a8>
		if (board[r][c] == 0 && board[r-1][c+1] == 0 &&
     d40:	f8 01       	movw	r30, r16
     d42:	ee 0f       	add	r30, r30
     d44:	ff 1f       	adc	r31, r31
     d46:	ee 0f       	add	r30, r30
     d48:	ff 1f       	adc	r31, r31
     d4a:	ee 0f       	add	r30, r30
     d4c:	ff 1f       	adc	r31, r31
     d4e:	e0 0f       	add	r30, r16
     d50:	f1 1f       	adc	r31, r17
     d52:	ee 0d       	add	r30, r14
     d54:	ff 1d       	adc	r31, r15
     d56:	ee 0f       	add	r30, r30
     d58:	ff 1f       	adc	r31, r31
     d5a:	ec 5a       	subi	r30, 0xAC	; 172
     d5c:	fe 4f       	sbci	r31, 0xFE	; 254
     d5e:	80 81       	ld	r24, Z
     d60:	91 81       	ldd	r25, Z+1	; 0x01
     d62:	00 97       	sbiw	r24, 0x00	; 0
     d64:	09 f0       	breq	.+2      	; 0xd68 <makeL+0x29a>
     d66:	0a c1       	rjmp	.+532    	; 0xf7c <makeL+0x4ae>
     d68:	e8 01       	movw	r28, r16
     d6a:	21 97       	sbiw	r28, 0x01	; 1
     d6c:	67 01       	movw	r12, r14
     d6e:	2f ef       	ldi	r18, 0xFF	; 255
     d70:	c2 1a       	sub	r12, r18
     d72:	d2 0a       	sbc	r13, r18
     d74:	fe 01       	movw	r30, r28
     d76:	ee 0f       	add	r30, r30
     d78:	ff 1f       	adc	r31, r31
     d7a:	ee 0f       	add	r30, r30
     d7c:	ff 1f       	adc	r31, r31
     d7e:	ee 0f       	add	r30, r30
     d80:	ff 1f       	adc	r31, r31
     d82:	ec 0f       	add	r30, r28
     d84:	fd 1f       	adc	r31, r29
     d86:	ec 0d       	add	r30, r12
     d88:	fd 1d       	adc	r31, r13
     d8a:	ee 0f       	add	r30, r30
     d8c:	ff 1f       	adc	r31, r31
     d8e:	ec 5a       	subi	r30, 0xAC	; 172
     d90:	fe 4f       	sbci	r31, 0xFE	; 254
     d92:	20 81       	ld	r18, Z
     d94:	31 81       	ldd	r19, Z+1	; 0x01
     d96:	21 15       	cp	r18, r1
     d98:	31 05       	cpc	r19, r1
     d9a:	09 f0       	breq	.+2      	; 0xd9e <makeL+0x2d0>
     d9c:	04 c1       	rjmp	.+520    	; 0xfa6 <makeL+0x4d8>
		board[r+1][c] == 0 && board[r-1][c] == 0){
     d9e:	58 01       	movw	r10, r16
     da0:	8f ef       	ldi	r24, 0xFF	; 255
     da2:	a8 1a       	sub	r10, r24
     da4:	b8 0a       	sbc	r11, r24
     da6:	f5 01       	movw	r30, r10
     da8:	ee 0f       	add	r30, r30
     daa:	ff 1f       	adc	r31, r31
     dac:	ee 0f       	add	r30, r30
     dae:	ff 1f       	adc	r31, r31
     db0:	ee 0f       	add	r30, r30
     db2:	ff 1f       	adc	r31, r31
     db4:	ea 0d       	add	r30, r10
     db6:	fb 1d       	adc	r31, r11
     db8:	ee 0d       	add	r30, r14
     dba:	ff 1d       	adc	r31, r15
     dbc:	ee 0f       	add	r30, r30
     dbe:	ff 1f       	adc	r31, r31
     dc0:	ec 5a       	subi	r30, 0xAC	; 172
     dc2:	fe 4f       	sbci	r31, 0xFE	; 254
     dc4:	80 81       	ld	r24, Z
     dc6:	91 81       	ldd	r25, Z+1	; 0x01
			return 1;
		}
	}
	else if (version % 4 == 2) {
		if (r > 17 || c < 1 || c > 7) return 0;
		if (board[r][c] == 0 && board[r-1][c+1] == 0 &&
     dc8:	00 97       	sbiw	r24, 0x00	; 0
     dca:	09 f0       	breq	.+2      	; 0xdce <makeL+0x300>
     dcc:	da c0       	rjmp	.+436    	; 0xf82 <makeL+0x4b4>
		board[r+1][c] == 0 && board[r-1][c] == 0){
     dce:	fe 01       	movw	r30, r28
     dd0:	ee 0f       	add	r30, r30
     dd2:	ff 1f       	adc	r31, r31
     dd4:	ee 0f       	add	r30, r30
     dd6:	ff 1f       	adc	r31, r31
     dd8:	ee 0f       	add	r30, r30
     dda:	ff 1f       	adc	r31, r31
     ddc:	ec 0f       	add	r30, r28
     dde:	fd 1f       	adc	r31, r29
     de0:	ee 0d       	add	r30, r14
     de2:	ff 1d       	adc	r31, r15
     de4:	ee 0f       	add	r30, r30
     de6:	ff 1f       	adc	r31, r31
     de8:	ec 5a       	subi	r30, 0xAC	; 172
     dea:	fe 4f       	sbci	r31, 0xFE	; 254
     dec:	20 81       	ld	r18, Z
     dee:	31 81       	ldd	r19, Z+1	; 0x01
     df0:	23 2b       	or	r18, r19
     df2:	09 f0       	breq	.+2      	; 0xdf6 <makeL+0x328>
     df4:	d8 c0       	rjmp	.+432    	; 0xfa6 <makeL+0x4d8>
			lightLED(r,c);
     df6:	b7 01       	movw	r22, r14
     df8:	c8 01       	movw	r24, r16
     dfa:	0e 94 3c 01 	call	0x278	; 0x278 <lightLED>
			lightLED(r-1,c+1);
     dfe:	b6 01       	movw	r22, r12
     e00:	ce 01       	movw	r24, r28
     e02:	0e 94 3c 01 	call	0x278	; 0x278 <lightLED>
			lightLED(r+1,c);
     e06:	b7 01       	movw	r22, r14
     e08:	c5 01       	movw	r24, r10
     e0a:	0e 94 3c 01 	call	0x278	; 0x278 <lightLED>
			lightLED(r-1,c);
     e0e:	b7 01       	movw	r22, r14
     e10:	ce 01       	movw	r24, r28
     e12:	0e 94 3c 01 	call	0x278	; 0x278 <lightLED>
			return 1;
     e16:	81 e0       	ldi	r24, 0x01	; 1
     e18:	90 e0       	ldi	r25, 0x00	; 0
     e1a:	c5 c0       	rjmp	.+394    	; 0xfa6 <makeL+0x4d8>
		}
	}
	else if (version % 4 == 3) {
     e1c:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <version>
     e20:	90 91 51 01 	lds	r25, 0x0151	; 0x800151 <version+0x1>
     e24:	83 70       	andi	r24, 0x03	; 3
     e26:	90 78       	andi	r25, 0x80	; 128
     e28:	99 23       	and	r25, r25
     e2a:	24 f4       	brge	.+8      	; 0xe34 <makeL+0x366>
     e2c:	01 97       	sbiw	r24, 0x01	; 1
     e2e:	8c 6f       	ori	r24, 0xFC	; 252
     e30:	9f 6f       	ori	r25, 0xFF	; 255
     e32:	01 96       	adiw	r24, 0x01	; 1
     e34:	03 97       	sbiw	r24, 0x03	; 3
     e36:	09 f0       	breq	.+2      	; 0xe3a <makeL+0x36c>
     e38:	a6 c0       	rjmp	.+332    	; 0xf86 <makeL+0x4b8>
		if (r > 17 || c < 2 || c > 7) return 0;
     e3a:	02 31       	cpi	r16, 0x12	; 18
     e3c:	11 05       	cpc	r17, r1
     e3e:	0c f0       	brlt	.+2      	; 0xe42 <makeL+0x374>
     e40:	a5 c0       	rjmp	.+330    	; 0xf8c <makeL+0x4be>
     e42:	22 e0       	ldi	r18, 0x02	; 2
     e44:	e2 16       	cp	r14, r18
     e46:	f1 04       	cpc	r15, r1
     e48:	0c f4       	brge	.+2      	; 0xe4c <makeL+0x37e>
     e4a:	a3 c0       	rjmp	.+326    	; 0xf92 <makeL+0x4c4>
     e4c:	88 e0       	ldi	r24, 0x08	; 8
     e4e:	e8 16       	cp	r14, r24
     e50:	f1 04       	cpc	r15, r1
     e52:	0c f0       	brlt	.+2      	; 0xe56 <makeL+0x388>
     e54:	a1 c0       	rjmp	.+322    	; 0xf98 <makeL+0x4ca>
		if (board[r][c] == 0 && board[r][c-1] == 0 &&
     e56:	f8 01       	movw	r30, r16
     e58:	ee 0f       	add	r30, r30
     e5a:	ff 1f       	adc	r31, r31
     e5c:	ee 0f       	add	r30, r30
     e5e:	ff 1f       	adc	r31, r31
     e60:	ee 0f       	add	r30, r30
     e62:	ff 1f       	adc	r31, r31
     e64:	e0 0f       	add	r30, r16
     e66:	f1 1f       	adc	r31, r17
     e68:	ee 0d       	add	r30, r14
     e6a:	ff 1d       	adc	r31, r15
     e6c:	ee 0f       	add	r30, r30
     e6e:	ff 1f       	adc	r31, r31
     e70:	ec 5a       	subi	r30, 0xAC	; 172
     e72:	fe 4f       	sbci	r31, 0xFE	; 254
     e74:	80 81       	ld	r24, Z
     e76:	91 81       	ldd	r25, Z+1	; 0x01
     e78:	00 97       	sbiw	r24, 0x00	; 0
     e7a:	09 f0       	breq	.+2      	; 0xe7e <makeL+0x3b0>
     e7c:	90 c0       	rjmp	.+288    	; 0xf9e <makeL+0x4d0>
     e7e:	e7 01       	movw	r28, r14
     e80:	21 97       	sbiw	r28, 0x01	; 1
     e82:	f8 01       	movw	r30, r16
     e84:	ee 0f       	add	r30, r30
     e86:	ff 1f       	adc	r31, r31
     e88:	ee 0f       	add	r30, r30
     e8a:	ff 1f       	adc	r31, r31
     e8c:	ee 0f       	add	r30, r30
     e8e:	ff 1f       	adc	r31, r31
     e90:	e0 0f       	add	r30, r16
     e92:	f1 1f       	adc	r31, r17
     e94:	ec 0f       	add	r30, r28
     e96:	fd 1f       	adc	r31, r29
     e98:	ee 0f       	add	r30, r30
     e9a:	ff 1f       	adc	r31, r31
     e9c:	ec 5a       	subi	r30, 0xAC	; 172
     e9e:	fe 4f       	sbci	r31, 0xFE	; 254
     ea0:	20 81       	ld	r18, Z
     ea2:	31 81       	ldd	r19, Z+1	; 0x01
     ea4:	21 15       	cp	r18, r1
     ea6:	31 05       	cpc	r19, r1
     ea8:	09 f0       	breq	.+2      	; 0xeac <makeL+0x3de>
     eaa:	7d c0       	rjmp	.+250    	; 0xfa6 <makeL+0x4d8>
		board[r][c+1] == 0 && board[r-1][c-1] == 0){
     eac:	67 01       	movw	r12, r14
     eae:	8f ef       	ldi	r24, 0xFF	; 255
     eb0:	c8 1a       	sub	r12, r24
     eb2:	d8 0a       	sbc	r13, r24
     eb4:	f8 01       	movw	r30, r16
     eb6:	ee 0f       	add	r30, r30
     eb8:	ff 1f       	adc	r31, r31
     eba:	ee 0f       	add	r30, r30
     ebc:	ff 1f       	adc	r31, r31
     ebe:	ee 0f       	add	r30, r30
     ec0:	ff 1f       	adc	r31, r31
     ec2:	e0 0f       	add	r30, r16
     ec4:	f1 1f       	adc	r31, r17
     ec6:	ec 0d       	add	r30, r12
     ec8:	fd 1d       	adc	r31, r13
     eca:	ee 0f       	add	r30, r30
     ecc:	ff 1f       	adc	r31, r31
     ece:	ec 5a       	subi	r30, 0xAC	; 172
     ed0:	fe 4f       	sbci	r31, 0xFE	; 254
     ed2:	80 81       	ld	r24, Z
     ed4:	91 81       	ldd	r25, Z+1	; 0x01
			return 1;
		}
	}
	else if (version % 4 == 3) {
		if (r > 17 || c < 2 || c > 7) return 0;
		if (board[r][c] == 0 && board[r][c-1] == 0 &&
     ed6:	00 97       	sbiw	r24, 0x00	; 0
     ed8:	09 f0       	breq	.+2      	; 0xedc <makeL+0x40e>
     eda:	64 c0       	rjmp	.+200    	; 0xfa4 <makeL+0x4d6>
		board[r][c+1] == 0 && board[r-1][c-1] == 0){
     edc:	58 01       	movw	r10, r16
     ede:	21 e0       	ldi	r18, 0x01	; 1
     ee0:	a2 1a       	sub	r10, r18
     ee2:	b1 08       	sbc	r11, r1
     ee4:	f5 01       	movw	r30, r10
     ee6:	ee 0f       	add	r30, r30
     ee8:	ff 1f       	adc	r31, r31
     eea:	ee 0f       	add	r30, r30
     eec:	ff 1f       	adc	r31, r31
     eee:	ee 0f       	add	r30, r30
     ef0:	ff 1f       	adc	r31, r31
     ef2:	ea 0d       	add	r30, r10
     ef4:	fb 1d       	adc	r31, r11
     ef6:	ec 0f       	add	r30, r28
     ef8:	fd 1f       	adc	r31, r29
     efa:	ee 0f       	add	r30, r30
     efc:	ff 1f       	adc	r31, r31
     efe:	ec 5a       	subi	r30, 0xAC	; 172
     f00:	fe 4f       	sbci	r31, 0xFE	; 254
     f02:	20 81       	ld	r18, Z
     f04:	31 81       	ldd	r19, Z+1	; 0x01
     f06:	23 2b       	or	r18, r19
     f08:	09 f0       	breq	.+2      	; 0xf0c <makeL+0x43e>
     f0a:	4d c0       	rjmp	.+154    	; 0xfa6 <makeL+0x4d8>
			lightLED(r,c);
     f0c:	b7 01       	movw	r22, r14
     f0e:	c8 01       	movw	r24, r16
     f10:	0e 94 3c 01 	call	0x278	; 0x278 <lightLED>
			lightLED(r,c-1);
     f14:	be 01       	movw	r22, r28
     f16:	c8 01       	movw	r24, r16
     f18:	0e 94 3c 01 	call	0x278	; 0x278 <lightLED>
			lightLED(r,c+1);
     f1c:	b6 01       	movw	r22, r12
     f1e:	c8 01       	movw	r24, r16
     f20:	0e 94 3c 01 	call	0x278	; 0x278 <lightLED>
			lightLED(r-1,c-1);
     f24:	be 01       	movw	r22, r28
     f26:	c5 01       	movw	r24, r10
     f28:	0e 94 3c 01 	call	0x278	; 0x278 <lightLED>
			return 1;
     f2c:	81 e0       	ldi	r24, 0x01	; 1
     f2e:	90 e0       	ldi	r25, 0x00	; 0
     f30:	3a c0       	rjmp	.+116    	; 0xfa6 <makeL+0x4d8>
	return 0;
}

int makeL(int r, int c){
	if (version % 4 == 0) {
		if (r > 16 || c < 2 || c > 8) return 0;
     f32:	80 e0       	ldi	r24, 0x00	; 0
     f34:	90 e0       	ldi	r25, 0x00	; 0
     f36:	37 c0       	rjmp	.+110    	; 0xfa6 <makeL+0x4d8>
     f38:	80 e0       	ldi	r24, 0x00	; 0
     f3a:	90 e0       	ldi	r25, 0x00	; 0
     f3c:	34 c0       	rjmp	.+104    	; 0xfa6 <makeL+0x4d8>
     f3e:	80 e0       	ldi	r24, 0x00	; 0
     f40:	90 e0       	ldi	r25, 0x00	; 0
     f42:	31 c0       	rjmp	.+98     	; 0xfa6 <makeL+0x4d8>
			lightLED(r,c+1);
			lightLED(r-1,c-1);
			return 1;
		}
	}
	return 0;
     f44:	80 e0       	ldi	r24, 0x00	; 0
     f46:	90 e0       	ldi	r25, 0x00	; 0
     f48:	2e c0       	rjmp	.+92     	; 0xfa6 <makeL+0x4d8>
     f4a:	c9 01       	movw	r24, r18
     f4c:	2c c0       	rjmp	.+88     	; 0xfa6 <makeL+0x4d8>
			lightLED(r-1,c);
			return 1;
		}
	}
	else if (version % 4 == 1) {
		if (r > 16 || c < 2 || c > 7) return 0;
     f4e:	80 e0       	ldi	r24, 0x00	; 0
     f50:	90 e0       	ldi	r25, 0x00	; 0
     f52:	29 c0       	rjmp	.+82     	; 0xfa6 <makeL+0x4d8>
     f54:	80 e0       	ldi	r24, 0x00	; 0
     f56:	90 e0       	ldi	r25, 0x00	; 0
     f58:	26 c0       	rjmp	.+76     	; 0xfa6 <makeL+0x4d8>
     f5a:	80 e0       	ldi	r24, 0x00	; 0
     f5c:	90 e0       	ldi	r25, 0x00	; 0
     f5e:	23 c0       	rjmp	.+70     	; 0xfa6 <makeL+0x4d8>
			lightLED(r,c+1);
			lightLED(r-1,c-1);
			return 1;
		}
	}
	return 0;
     f60:	80 e0       	ldi	r24, 0x00	; 0
     f62:	90 e0       	ldi	r25, 0x00	; 0
     f64:	20 c0       	rjmp	.+64     	; 0xfa6 <makeL+0x4d8>
     f66:	c9 01       	movw	r24, r18
     f68:	1e c0       	rjmp	.+60     	; 0xfa6 <makeL+0x4d8>
			lightLED(r+1,c+1);
			return 1;
		}
	}
	else if (version % 4 == 2) {
		if (r > 17 || c < 1 || c > 7) return 0;
     f6a:	80 e0       	ldi	r24, 0x00	; 0
     f6c:	90 e0       	ldi	r25, 0x00	; 0
     f6e:	1b c0       	rjmp	.+54     	; 0xfa6 <makeL+0x4d8>
     f70:	80 e0       	ldi	r24, 0x00	; 0
     f72:	90 e0       	ldi	r25, 0x00	; 0
     f74:	18 c0       	rjmp	.+48     	; 0xfa6 <makeL+0x4d8>
     f76:	80 e0       	ldi	r24, 0x00	; 0
     f78:	90 e0       	ldi	r25, 0x00	; 0
     f7a:	15 c0       	rjmp	.+42     	; 0xfa6 <makeL+0x4d8>
			lightLED(r,c+1);
			lightLED(r-1,c-1);
			return 1;
		}
	}
	return 0;
     f7c:	80 e0       	ldi	r24, 0x00	; 0
     f7e:	90 e0       	ldi	r25, 0x00	; 0
     f80:	12 c0       	rjmp	.+36     	; 0xfa6 <makeL+0x4d8>
     f82:	c9 01       	movw	r24, r18
     f84:	10 c0       	rjmp	.+32     	; 0xfa6 <makeL+0x4d8>
     f86:	80 e0       	ldi	r24, 0x00	; 0
     f88:	90 e0       	ldi	r25, 0x00	; 0
     f8a:	0d c0       	rjmp	.+26     	; 0xfa6 <makeL+0x4d8>
			lightLED(r-1,c);
			return 1;
		}
	}
	else if (version % 4 == 3) {
		if (r > 17 || c < 2 || c > 7) return 0;
     f8c:	80 e0       	ldi	r24, 0x00	; 0
     f8e:	90 e0       	ldi	r25, 0x00	; 0
     f90:	0a c0       	rjmp	.+20     	; 0xfa6 <makeL+0x4d8>
     f92:	80 e0       	ldi	r24, 0x00	; 0
     f94:	90 e0       	ldi	r25, 0x00	; 0
     f96:	07 c0       	rjmp	.+14     	; 0xfa6 <makeL+0x4d8>
     f98:	80 e0       	ldi	r24, 0x00	; 0
     f9a:	90 e0       	ldi	r25, 0x00	; 0
     f9c:	04 c0       	rjmp	.+8      	; 0xfa6 <makeL+0x4d8>
			lightLED(r,c+1);
			lightLED(r-1,c-1);
			return 1;
		}
	}
	return 0;
     f9e:	80 e0       	ldi	r24, 0x00	; 0
     fa0:	90 e0       	ldi	r25, 0x00	; 0
     fa2:	01 c0       	rjmp	.+2      	; 0xfa6 <makeL+0x4d8>
     fa4:	c9 01       	movw	r24, r18
}
     fa6:	df 91       	pop	r29
     fa8:	cf 91       	pop	r28
     faa:	1f 91       	pop	r17
     fac:	0f 91       	pop	r16
     fae:	ff 90       	pop	r15
     fb0:	ef 90       	pop	r14
     fb2:	df 90       	pop	r13
     fb4:	cf 90       	pop	r12
     fb6:	bf 90       	pop	r11
     fb8:	af 90       	pop	r10
     fba:	9f 90       	pop	r9
     fbc:	8f 90       	pop	r8
     fbe:	08 95       	ret

00000fc0 <makeS>:

int makeS(int r, int c){
     fc0:	8f 92       	push	r8
     fc2:	9f 92       	push	r9
     fc4:	af 92       	push	r10
     fc6:	bf 92       	push	r11
     fc8:	cf 92       	push	r12
     fca:	df 92       	push	r13
     fcc:	ef 92       	push	r14
     fce:	ff 92       	push	r15
     fd0:	0f 93       	push	r16
     fd2:	1f 93       	push	r17
     fd4:	cf 93       	push	r28
     fd6:	df 93       	push	r29
     fd8:	8c 01       	movw	r16, r24
     fda:	7b 01       	movw	r14, r22
	if (version % 2 == 0){
     fdc:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <version>
     fe0:	90 91 51 01 	lds	r25, 0x0151	; 0x800151 <version+0x1>
     fe4:	80 fd       	sbrc	r24, 0
     fe6:	79 c0       	rjmp	.+242    	; 0x10da <makeS+0x11a>
		if (r > 17 || c < 2 || c > 7) return 0;
     fe8:	02 31       	cpi	r16, 0x12	; 18
     fea:	11 05       	cpc	r17, r1
     fec:	0c f0       	brlt	.+2      	; 0xff0 <makeS+0x30>
     fee:	00 c1       	rjmp	.+512    	; 0x11f0 <makeS+0x230>
     ff0:	62 30       	cpi	r22, 0x02	; 2
     ff2:	71 05       	cpc	r23, r1
     ff4:	0c f4       	brge	.+2      	; 0xff8 <makeS+0x38>
     ff6:	ff c0       	rjmp	.+510    	; 0x11f6 <makeS+0x236>
     ff8:	68 30       	cpi	r22, 0x08	; 8
     ffa:	71 05       	cpc	r23, r1
     ffc:	0c f0       	brlt	.+2      	; 0x1000 <makeS+0x40>
     ffe:	fe c0       	rjmp	.+508    	; 0x11fc <makeS+0x23c>
		if (board[r][c] == 0 && board[r][c-1] == 0
    1000:	f8 01       	movw	r30, r16
    1002:	ee 0f       	add	r30, r30
    1004:	ff 1f       	adc	r31, r31
    1006:	ee 0f       	add	r30, r30
    1008:	ff 1f       	adc	r31, r31
    100a:	ee 0f       	add	r30, r30
    100c:	ff 1f       	adc	r31, r31
    100e:	e0 0f       	add	r30, r16
    1010:	f1 1f       	adc	r31, r17
    1012:	e6 0f       	add	r30, r22
    1014:	f7 1f       	adc	r31, r23
    1016:	ee 0f       	add	r30, r30
    1018:	ff 1f       	adc	r31, r31
    101a:	ec 5a       	subi	r30, 0xAC	; 172
    101c:	fe 4f       	sbci	r31, 0xFE	; 254
    101e:	80 81       	ld	r24, Z
    1020:	91 81       	ldd	r25, Z+1	; 0x01
    1022:	00 97       	sbiw	r24, 0x00	; 0
    1024:	09 f0       	breq	.+2      	; 0x1028 <makeS+0x68>
    1026:	ed c0       	rjmp	.+474    	; 0x1202 <makeS+0x242>
    1028:	eb 01       	movw	r28, r22
    102a:	21 97       	sbiw	r28, 0x01	; 1
    102c:	f8 01       	movw	r30, r16
    102e:	ee 0f       	add	r30, r30
    1030:	ff 1f       	adc	r31, r31
    1032:	ee 0f       	add	r30, r30
    1034:	ff 1f       	adc	r31, r31
    1036:	ee 0f       	add	r30, r30
    1038:	ff 1f       	adc	r31, r31
    103a:	e0 0f       	add	r30, r16
    103c:	f1 1f       	adc	r31, r17
    103e:	ec 0f       	add	r30, r28
    1040:	fd 1f       	adc	r31, r29
    1042:	ee 0f       	add	r30, r30
    1044:	ff 1f       	adc	r31, r31
    1046:	ec 5a       	subi	r30, 0xAC	; 172
    1048:	fe 4f       	sbci	r31, 0xFE	; 254
    104a:	20 81       	ld	r18, Z
    104c:	31 81       	ldd	r19, Z+1	; 0x01
    104e:	21 15       	cp	r18, r1
    1050:	31 05       	cpc	r19, r1
    1052:	09 f0       	breq	.+2      	; 0x1056 <makeS+0x96>
    1054:	eb c0       	rjmp	.+470    	; 0x122c <makeS+0x26c>
		&& board[r-1][c+1] == 0 && board[r-1][c]==0){
    1056:	68 01       	movw	r12, r16
    1058:	81 e0       	ldi	r24, 0x01	; 1
    105a:	c8 1a       	sub	r12, r24
    105c:	d1 08       	sbc	r13, r1
    105e:	5b 01       	movw	r10, r22
    1060:	8f ef       	ldi	r24, 0xFF	; 255
    1062:	a8 1a       	sub	r10, r24
    1064:	b8 0a       	sbc	r11, r24
    1066:	f6 01       	movw	r30, r12
    1068:	ee 0f       	add	r30, r30
    106a:	ff 1f       	adc	r31, r31
    106c:	ee 0f       	add	r30, r30
    106e:	ff 1f       	adc	r31, r31
    1070:	ee 0f       	add	r30, r30
    1072:	ff 1f       	adc	r31, r31
    1074:	ec 0d       	add	r30, r12
    1076:	fd 1d       	adc	r31, r13
    1078:	ea 0d       	add	r30, r10
    107a:	fb 1d       	adc	r31, r11
    107c:	ee 0f       	add	r30, r30
    107e:	ff 1f       	adc	r31, r31
    1080:	ec 5a       	subi	r30, 0xAC	; 172
    1082:	fe 4f       	sbci	r31, 0xFE	; 254
    1084:	80 81       	ld	r24, Z
    1086:	91 81       	ldd	r25, Z+1	; 0x01
    1088:	00 97       	sbiw	r24, 0x00	; 0
    108a:	09 f0       	breq	.+2      	; 0x108e <makeS+0xce>
    108c:	bd c0       	rjmp	.+378    	; 0x1208 <makeS+0x248>
    108e:	f6 01       	movw	r30, r12
    1090:	ee 0f       	add	r30, r30
    1092:	ff 1f       	adc	r31, r31
    1094:	ee 0f       	add	r30, r30
    1096:	ff 1f       	adc	r31, r31
    1098:	ee 0f       	add	r30, r30
    109a:	ff 1f       	adc	r31, r31
    109c:	ec 0d       	add	r30, r12
    109e:	fd 1d       	adc	r31, r13
    10a0:	e6 0f       	add	r30, r22
    10a2:	f7 1f       	adc	r31, r23
    10a4:	ee 0f       	add	r30, r30
    10a6:	ff 1f       	adc	r31, r31
    10a8:	ec 5a       	subi	r30, 0xAC	; 172
    10aa:	fe 4f       	sbci	r31, 0xFE	; 254
    10ac:	20 81       	ld	r18, Z
    10ae:	31 81       	ldd	r19, Z+1	; 0x01
    10b0:	23 2b       	or	r18, r19
    10b2:	09 f0       	breq	.+2      	; 0x10b6 <makeS+0xf6>
    10b4:	bb c0       	rjmp	.+374    	; 0x122c <makeS+0x26c>
			lightLED(r,c);
    10b6:	c8 01       	movw	r24, r16
    10b8:	0e 94 3c 01 	call	0x278	; 0x278 <lightLED>
			lightLED(r,c-1);
    10bc:	be 01       	movw	r22, r28
    10be:	c8 01       	movw	r24, r16
    10c0:	0e 94 3c 01 	call	0x278	; 0x278 <lightLED>
			lightLED(r-1,c);
    10c4:	b7 01       	movw	r22, r14
    10c6:	c6 01       	movw	r24, r12
    10c8:	0e 94 3c 01 	call	0x278	; 0x278 <lightLED>
			lightLED(r-1,c+1);
    10cc:	b5 01       	movw	r22, r10
    10ce:	c6 01       	movw	r24, r12
    10d0:	0e 94 3c 01 	call	0x278	; 0x278 <lightLED>
			return 1;
    10d4:	81 e0       	ldi	r24, 0x01	; 1
    10d6:	90 e0       	ldi	r25, 0x00	; 0
    10d8:	a9 c0       	rjmp	.+338    	; 0x122c <makeS+0x26c>
		}
	}
	else if (version % 2 == 1){
    10da:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <version>
    10de:	90 91 51 01 	lds	r25, 0x0151	; 0x800151 <version+0x1>
    10e2:	81 70       	andi	r24, 0x01	; 1
    10e4:	90 78       	andi	r25, 0x80	; 128
    10e6:	99 23       	and	r25, r25
    10e8:	24 f4       	brge	.+8      	; 0x10f2 <makeS+0x132>
    10ea:	01 97       	sbiw	r24, 0x01	; 1
    10ec:	8e 6f       	ori	r24, 0xFE	; 254
    10ee:	9f 6f       	ori	r25, 0xFF	; 255
    10f0:	01 96       	adiw	r24, 0x01	; 1
    10f2:	ec 01       	movw	r28, r24
    10f4:	01 97       	sbiw	r24, 0x01	; 1
    10f6:	09 f0       	breq	.+2      	; 0x10fa <makeS+0x13a>
    10f8:	89 c0       	rjmp	.+274    	; 0x120c <makeS+0x24c>
		if (r > 16 || c < 1 || c > 7) return 0;
    10fa:	01 31       	cpi	r16, 0x11	; 17
    10fc:	11 05       	cpc	r17, r1
    10fe:	0c f0       	brlt	.+2      	; 0x1102 <makeS+0x142>
    1100:	88 c0       	rjmp	.+272    	; 0x1212 <makeS+0x252>
    1102:	1e 14       	cp	r1, r14
    1104:	1f 04       	cpc	r1, r15
    1106:	0c f0       	brlt	.+2      	; 0x110a <makeS+0x14a>
    1108:	87 c0       	rjmp	.+270    	; 0x1218 <makeS+0x258>
    110a:	28 e0       	ldi	r18, 0x08	; 8
    110c:	e2 16       	cp	r14, r18
    110e:	f1 04       	cpc	r15, r1
    1110:	0c f0       	brlt	.+2      	; 0x1114 <makeS+0x154>
    1112:	85 c0       	rjmp	.+266    	; 0x121e <makeS+0x25e>
		if (board[r][c] == 0 && board[r][c+1] == 0
    1114:	f8 01       	movw	r30, r16
    1116:	ee 0f       	add	r30, r30
    1118:	ff 1f       	adc	r31, r31
    111a:	ee 0f       	add	r30, r30
    111c:	ff 1f       	adc	r31, r31
    111e:	ee 0f       	add	r30, r30
    1120:	ff 1f       	adc	r31, r31
    1122:	e0 0f       	add	r30, r16
    1124:	f1 1f       	adc	r31, r17
    1126:	ee 0d       	add	r30, r14
    1128:	ff 1d       	adc	r31, r15
    112a:	ee 0f       	add	r30, r30
    112c:	ff 1f       	adc	r31, r31
    112e:	ec 5a       	subi	r30, 0xAC	; 172
    1130:	fe 4f       	sbci	r31, 0xFE	; 254
    1132:	80 81       	ld	r24, Z
    1134:	91 81       	ldd	r25, Z+1	; 0x01
    1136:	00 97       	sbiw	r24, 0x00	; 0
    1138:	09 f0       	breq	.+2      	; 0x113c <makeS+0x17c>
    113a:	74 c0       	rjmp	.+232    	; 0x1224 <makeS+0x264>
    113c:	67 01       	movw	r12, r14
    113e:	2f ef       	ldi	r18, 0xFF	; 255
    1140:	c2 1a       	sub	r12, r18
    1142:	d2 0a       	sbc	r13, r18
    1144:	f8 01       	movw	r30, r16
    1146:	ee 0f       	add	r30, r30
    1148:	ff 1f       	adc	r31, r31
    114a:	ee 0f       	add	r30, r30
    114c:	ff 1f       	adc	r31, r31
    114e:	ee 0f       	add	r30, r30
    1150:	ff 1f       	adc	r31, r31
    1152:	e0 0f       	add	r30, r16
    1154:	f1 1f       	adc	r31, r17
    1156:	ec 0d       	add	r30, r12
    1158:	fd 1d       	adc	r31, r13
    115a:	ee 0f       	add	r30, r30
    115c:	ff 1f       	adc	r31, r31
    115e:	ec 5a       	subi	r30, 0xAC	; 172
    1160:	fe 4f       	sbci	r31, 0xFE	; 254
    1162:	20 81       	ld	r18, Z
    1164:	31 81       	ldd	r19, Z+1	; 0x01
    1166:	21 15       	cp	r18, r1
    1168:	31 05       	cpc	r19, r1
    116a:	09 f0       	breq	.+2      	; 0x116e <makeS+0x1ae>
    116c:	5f c0       	rjmp	.+190    	; 0x122c <makeS+0x26c>
		&& board[r-1][c] == 0 && board[r+1][c+1]==0){
    116e:	58 01       	movw	r10, r16
    1170:	81 e0       	ldi	r24, 0x01	; 1
    1172:	a8 1a       	sub	r10, r24
    1174:	b1 08       	sbc	r11, r1
    1176:	f5 01       	movw	r30, r10
    1178:	ee 0f       	add	r30, r30
    117a:	ff 1f       	adc	r31, r31
    117c:	ee 0f       	add	r30, r30
    117e:	ff 1f       	adc	r31, r31
    1180:	ee 0f       	add	r30, r30
    1182:	ff 1f       	adc	r31, r31
    1184:	ea 0d       	add	r30, r10
    1186:	fb 1d       	adc	r31, r11
    1188:	ee 0d       	add	r30, r14
    118a:	ff 1d       	adc	r31, r15
    118c:	ee 0f       	add	r30, r30
    118e:	ff 1f       	adc	r31, r31
    1190:	ec 5a       	subi	r30, 0xAC	; 172
    1192:	fe 4f       	sbci	r31, 0xFE	; 254
    1194:	80 81       	ld	r24, Z
    1196:	91 81       	ldd	r25, Z+1	; 0x01
    1198:	00 97       	sbiw	r24, 0x00	; 0
    119a:	09 f0       	breq	.+2      	; 0x119e <makeS+0x1de>
    119c:	46 c0       	rjmp	.+140    	; 0x122a <makeS+0x26a>
    119e:	48 01       	movw	r8, r16
    11a0:	2f ef       	ldi	r18, 0xFF	; 255
    11a2:	82 1a       	sub	r8, r18
    11a4:	92 0a       	sbc	r9, r18
    11a6:	f4 01       	movw	r30, r8
    11a8:	ee 0f       	add	r30, r30
    11aa:	ff 1f       	adc	r31, r31
    11ac:	ee 0f       	add	r30, r30
    11ae:	ff 1f       	adc	r31, r31
    11b0:	ee 0f       	add	r30, r30
    11b2:	ff 1f       	adc	r31, r31
    11b4:	e8 0d       	add	r30, r8
    11b6:	f9 1d       	adc	r31, r9
    11b8:	ec 0d       	add	r30, r12
    11ba:	fd 1d       	adc	r31, r13
    11bc:	ee 0f       	add	r30, r30
    11be:	ff 1f       	adc	r31, r31
    11c0:	ec 5a       	subi	r30, 0xAC	; 172
    11c2:	fe 4f       	sbci	r31, 0xFE	; 254
    11c4:	20 81       	ld	r18, Z
    11c6:	31 81       	ldd	r19, Z+1	; 0x01
    11c8:	23 2b       	or	r18, r19
    11ca:	81 f5       	brne	.+96     	; 0x122c <makeS+0x26c>
			lightLED(r,c);
    11cc:	b7 01       	movw	r22, r14
    11ce:	c8 01       	movw	r24, r16
    11d0:	0e 94 3c 01 	call	0x278	; 0x278 <lightLED>
			lightLED(r,c+1);
    11d4:	b6 01       	movw	r22, r12
    11d6:	c8 01       	movw	r24, r16
    11d8:	0e 94 3c 01 	call	0x278	; 0x278 <lightLED>
			lightLED(r+1,c+1);
    11dc:	b6 01       	movw	r22, r12
    11de:	c4 01       	movw	r24, r8
    11e0:	0e 94 3c 01 	call	0x278	; 0x278 <lightLED>
			lightLED(r-1,c);
    11e4:	b7 01       	movw	r22, r14
    11e6:	c5 01       	movw	r24, r10
    11e8:	0e 94 3c 01 	call	0x278	; 0x278 <lightLED>
			return 1;
    11ec:	ce 01       	movw	r24, r28
    11ee:	1e c0       	rjmp	.+60     	; 0x122c <makeS+0x26c>
	return 0;
}

int makeS(int r, int c){
	if (version % 2 == 0){
		if (r > 17 || c < 2 || c > 7) return 0;
    11f0:	80 e0       	ldi	r24, 0x00	; 0
    11f2:	90 e0       	ldi	r25, 0x00	; 0
    11f4:	1b c0       	rjmp	.+54     	; 0x122c <makeS+0x26c>
    11f6:	80 e0       	ldi	r24, 0x00	; 0
    11f8:	90 e0       	ldi	r25, 0x00	; 0
    11fa:	18 c0       	rjmp	.+48     	; 0x122c <makeS+0x26c>
    11fc:	80 e0       	ldi	r24, 0x00	; 0
    11fe:	90 e0       	ldi	r25, 0x00	; 0
    1200:	15 c0       	rjmp	.+42     	; 0x122c <makeS+0x26c>
			lightLED(r+1,c+1);
			lightLED(r-1,c);
			return 1;
		}
	}
	return 0;
    1202:	80 e0       	ldi	r24, 0x00	; 0
    1204:	90 e0       	ldi	r25, 0x00	; 0
    1206:	12 c0       	rjmp	.+36     	; 0x122c <makeS+0x26c>
    1208:	c9 01       	movw	r24, r18
    120a:	10 c0       	rjmp	.+32     	; 0x122c <makeS+0x26c>
    120c:	80 e0       	ldi	r24, 0x00	; 0
    120e:	90 e0       	ldi	r25, 0x00	; 0
    1210:	0d c0       	rjmp	.+26     	; 0x122c <makeS+0x26c>
			lightLED(r-1,c+1);
			return 1;
		}
	}
	else if (version % 2 == 1){
		if (r > 16 || c < 1 || c > 7) return 0;
    1212:	80 e0       	ldi	r24, 0x00	; 0
    1214:	90 e0       	ldi	r25, 0x00	; 0
    1216:	0a c0       	rjmp	.+20     	; 0x122c <makeS+0x26c>
    1218:	80 e0       	ldi	r24, 0x00	; 0
    121a:	90 e0       	ldi	r25, 0x00	; 0
    121c:	07 c0       	rjmp	.+14     	; 0x122c <makeS+0x26c>
    121e:	80 e0       	ldi	r24, 0x00	; 0
    1220:	90 e0       	ldi	r25, 0x00	; 0
    1222:	04 c0       	rjmp	.+8      	; 0x122c <makeS+0x26c>
			lightLED(r+1,c+1);
			lightLED(r-1,c);
			return 1;
		}
	}
	return 0;
    1224:	80 e0       	ldi	r24, 0x00	; 0
    1226:	90 e0       	ldi	r25, 0x00	; 0
    1228:	01 c0       	rjmp	.+2      	; 0x122c <makeS+0x26c>
    122a:	c9 01       	movw	r24, r18
}
    122c:	df 91       	pop	r29
    122e:	cf 91       	pop	r28
    1230:	1f 91       	pop	r17
    1232:	0f 91       	pop	r16
    1234:	ff 90       	pop	r15
    1236:	ef 90       	pop	r14
    1238:	df 90       	pop	r13
    123a:	cf 90       	pop	r12
    123c:	bf 90       	pop	r11
    123e:	af 90       	pop	r10
    1240:	9f 90       	pop	r9
    1242:	8f 90       	pop	r8
    1244:	08 95       	ret

00001246 <makeZ>:

int makeZ(int r, int c){
    1246:	8f 92       	push	r8
    1248:	9f 92       	push	r9
    124a:	af 92       	push	r10
    124c:	bf 92       	push	r11
    124e:	cf 92       	push	r12
    1250:	df 92       	push	r13
    1252:	ef 92       	push	r14
    1254:	ff 92       	push	r15
    1256:	0f 93       	push	r16
    1258:	1f 93       	push	r17
    125a:	cf 93       	push	r28
    125c:	df 93       	push	r29
    125e:	8c 01       	movw	r16, r24
    1260:	7b 01       	movw	r14, r22
	if (version % 2 == 0){
    1262:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <version>
    1266:	90 91 51 01 	lds	r25, 0x0151	; 0x800151 <version+0x1>
    126a:	80 fd       	sbrc	r24, 0
    126c:	79 c0       	rjmp	.+242    	; 0x1360 <makeZ+0x11a>
		if (r > 17 || c < 2 || c > 7) return 0;
    126e:	02 31       	cpi	r16, 0x12	; 18
    1270:	11 05       	cpc	r17, r1
    1272:	0c f0       	brlt	.+2      	; 0x1276 <makeZ+0x30>
    1274:	00 c1       	rjmp	.+512    	; 0x1476 <makeZ+0x230>
    1276:	62 30       	cpi	r22, 0x02	; 2
    1278:	71 05       	cpc	r23, r1
    127a:	0c f4       	brge	.+2      	; 0x127e <makeZ+0x38>
    127c:	ff c0       	rjmp	.+510    	; 0x147c <makeZ+0x236>
    127e:	68 30       	cpi	r22, 0x08	; 8
    1280:	71 05       	cpc	r23, r1
    1282:	0c f0       	brlt	.+2      	; 0x1286 <makeZ+0x40>
    1284:	fe c0       	rjmp	.+508    	; 0x1482 <makeZ+0x23c>
		if (board[r][c] == 0 && board[r][c+1] == 0
    1286:	f8 01       	movw	r30, r16
    1288:	ee 0f       	add	r30, r30
    128a:	ff 1f       	adc	r31, r31
    128c:	ee 0f       	add	r30, r30
    128e:	ff 1f       	adc	r31, r31
    1290:	ee 0f       	add	r30, r30
    1292:	ff 1f       	adc	r31, r31
    1294:	e0 0f       	add	r30, r16
    1296:	f1 1f       	adc	r31, r17
    1298:	e6 0f       	add	r30, r22
    129a:	f7 1f       	adc	r31, r23
    129c:	ee 0f       	add	r30, r30
    129e:	ff 1f       	adc	r31, r31
    12a0:	ec 5a       	subi	r30, 0xAC	; 172
    12a2:	fe 4f       	sbci	r31, 0xFE	; 254
    12a4:	80 81       	ld	r24, Z
    12a6:	91 81       	ldd	r25, Z+1	; 0x01
    12a8:	00 97       	sbiw	r24, 0x00	; 0
    12aa:	09 f0       	breq	.+2      	; 0x12ae <makeZ+0x68>
    12ac:	ed c0       	rjmp	.+474    	; 0x1488 <makeZ+0x242>
    12ae:	eb 01       	movw	r28, r22
    12b0:	21 96       	adiw	r28, 0x01	; 1
    12b2:	f8 01       	movw	r30, r16
    12b4:	ee 0f       	add	r30, r30
    12b6:	ff 1f       	adc	r31, r31
    12b8:	ee 0f       	add	r30, r30
    12ba:	ff 1f       	adc	r31, r31
    12bc:	ee 0f       	add	r30, r30
    12be:	ff 1f       	adc	r31, r31
    12c0:	e0 0f       	add	r30, r16
    12c2:	f1 1f       	adc	r31, r17
    12c4:	ec 0f       	add	r30, r28
    12c6:	fd 1f       	adc	r31, r29
    12c8:	ee 0f       	add	r30, r30
    12ca:	ff 1f       	adc	r31, r31
    12cc:	ec 5a       	subi	r30, 0xAC	; 172
    12ce:	fe 4f       	sbci	r31, 0xFE	; 254
    12d0:	20 81       	ld	r18, Z
    12d2:	31 81       	ldd	r19, Z+1	; 0x01
    12d4:	21 15       	cp	r18, r1
    12d6:	31 05       	cpc	r19, r1
    12d8:	09 f0       	breq	.+2      	; 0x12dc <makeZ+0x96>
    12da:	eb c0       	rjmp	.+470    	; 0x14b2 <makeZ+0x26c>
		&& board[r-1][c] == 0 && board[r-1][c-1]==0){
    12dc:	68 01       	movw	r12, r16
    12de:	81 e0       	ldi	r24, 0x01	; 1
    12e0:	c8 1a       	sub	r12, r24
    12e2:	d1 08       	sbc	r13, r1
    12e4:	f6 01       	movw	r30, r12
    12e6:	ee 0f       	add	r30, r30
    12e8:	ff 1f       	adc	r31, r31
    12ea:	ee 0f       	add	r30, r30
    12ec:	ff 1f       	adc	r31, r31
    12ee:	ee 0f       	add	r30, r30
    12f0:	ff 1f       	adc	r31, r31
    12f2:	ec 0d       	add	r30, r12
    12f4:	fd 1d       	adc	r31, r13
    12f6:	e6 0f       	add	r30, r22
    12f8:	f7 1f       	adc	r31, r23
    12fa:	ee 0f       	add	r30, r30
    12fc:	ff 1f       	adc	r31, r31
    12fe:	ec 5a       	subi	r30, 0xAC	; 172
    1300:	fe 4f       	sbci	r31, 0xFE	; 254
    1302:	80 81       	ld	r24, Z
    1304:	91 81       	ldd	r25, Z+1	; 0x01
    1306:	00 97       	sbiw	r24, 0x00	; 0
    1308:	09 f0       	breq	.+2      	; 0x130c <makeZ+0xc6>
    130a:	c1 c0       	rjmp	.+386    	; 0x148e <makeZ+0x248>
    130c:	5b 01       	movw	r10, r22
    130e:	21 e0       	ldi	r18, 0x01	; 1
    1310:	a2 1a       	sub	r10, r18
    1312:	b1 08       	sbc	r11, r1
    1314:	f6 01       	movw	r30, r12
    1316:	ee 0f       	add	r30, r30
    1318:	ff 1f       	adc	r31, r31
    131a:	ee 0f       	add	r30, r30
    131c:	ff 1f       	adc	r31, r31
    131e:	ee 0f       	add	r30, r30
    1320:	ff 1f       	adc	r31, r31
    1322:	ec 0d       	add	r30, r12
    1324:	fd 1d       	adc	r31, r13
    1326:	ea 0d       	add	r30, r10
    1328:	fb 1d       	adc	r31, r11
    132a:	ee 0f       	add	r30, r30
    132c:	ff 1f       	adc	r31, r31
    132e:	ec 5a       	subi	r30, 0xAC	; 172
    1330:	fe 4f       	sbci	r31, 0xFE	; 254
    1332:	20 81       	ld	r18, Z
    1334:	31 81       	ldd	r19, Z+1	; 0x01
    1336:	23 2b       	or	r18, r19
    1338:	09 f0       	breq	.+2      	; 0x133c <makeZ+0xf6>
    133a:	bb c0       	rjmp	.+374    	; 0x14b2 <makeZ+0x26c>
			lightLED(r,c);
    133c:	c8 01       	movw	r24, r16
    133e:	0e 94 3c 01 	call	0x278	; 0x278 <lightLED>
			lightLED(r,c+1);
    1342:	be 01       	movw	r22, r28
    1344:	c8 01       	movw	r24, r16
    1346:	0e 94 3c 01 	call	0x278	; 0x278 <lightLED>
			lightLED(r-1,c);
    134a:	b7 01       	movw	r22, r14
    134c:	c6 01       	movw	r24, r12
    134e:	0e 94 3c 01 	call	0x278	; 0x278 <lightLED>
			lightLED(r-1,c-1);
    1352:	b5 01       	movw	r22, r10
    1354:	c6 01       	movw	r24, r12
    1356:	0e 94 3c 01 	call	0x278	; 0x278 <lightLED>
			return 1;
    135a:	81 e0       	ldi	r24, 0x01	; 1
    135c:	90 e0       	ldi	r25, 0x00	; 0
    135e:	a9 c0       	rjmp	.+338    	; 0x14b2 <makeZ+0x26c>
		}
	}
	else if (version % 2 == 1){
    1360:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <version>
    1364:	90 91 51 01 	lds	r25, 0x0151	; 0x800151 <version+0x1>
    1368:	81 70       	andi	r24, 0x01	; 1
    136a:	90 78       	andi	r25, 0x80	; 128
    136c:	99 23       	and	r25, r25
    136e:	24 f4       	brge	.+8      	; 0x1378 <makeZ+0x132>
    1370:	01 97       	sbiw	r24, 0x01	; 1
    1372:	8e 6f       	ori	r24, 0xFE	; 254
    1374:	9f 6f       	ori	r25, 0xFF	; 255
    1376:	01 96       	adiw	r24, 0x01	; 1
    1378:	ec 01       	movw	r28, r24
    137a:	01 97       	sbiw	r24, 0x01	; 1
    137c:	09 f0       	breq	.+2      	; 0x1380 <makeZ+0x13a>
    137e:	89 c0       	rjmp	.+274    	; 0x1492 <makeZ+0x24c>
		if (r > 16 || c < 1 || c > 7) return 0;
    1380:	01 31       	cpi	r16, 0x11	; 17
    1382:	11 05       	cpc	r17, r1
    1384:	0c f0       	brlt	.+2      	; 0x1388 <makeZ+0x142>
    1386:	88 c0       	rjmp	.+272    	; 0x1498 <makeZ+0x252>
    1388:	1e 14       	cp	r1, r14
    138a:	1f 04       	cpc	r1, r15
    138c:	0c f0       	brlt	.+2      	; 0x1390 <makeZ+0x14a>
    138e:	87 c0       	rjmp	.+270    	; 0x149e <makeZ+0x258>
    1390:	88 e0       	ldi	r24, 0x08	; 8
    1392:	e8 16       	cp	r14, r24
    1394:	f1 04       	cpc	r15, r1
    1396:	0c f0       	brlt	.+2      	; 0x139a <makeZ+0x154>
    1398:	85 c0       	rjmp	.+266    	; 0x14a4 <makeZ+0x25e>
		if (board[r][c] == 0 && board[r][c+1] == 0
    139a:	f8 01       	movw	r30, r16
    139c:	ee 0f       	add	r30, r30
    139e:	ff 1f       	adc	r31, r31
    13a0:	ee 0f       	add	r30, r30
    13a2:	ff 1f       	adc	r31, r31
    13a4:	ee 0f       	add	r30, r30
    13a6:	ff 1f       	adc	r31, r31
    13a8:	e0 0f       	add	r30, r16
    13aa:	f1 1f       	adc	r31, r17
    13ac:	ee 0d       	add	r30, r14
    13ae:	ff 1d       	adc	r31, r15
    13b0:	ee 0f       	add	r30, r30
    13b2:	ff 1f       	adc	r31, r31
    13b4:	ec 5a       	subi	r30, 0xAC	; 172
    13b6:	fe 4f       	sbci	r31, 0xFE	; 254
    13b8:	80 81       	ld	r24, Z
    13ba:	91 81       	ldd	r25, Z+1	; 0x01
    13bc:	00 97       	sbiw	r24, 0x00	; 0
    13be:	09 f0       	breq	.+2      	; 0x13c2 <makeZ+0x17c>
    13c0:	74 c0       	rjmp	.+232    	; 0x14aa <makeZ+0x264>
    13c2:	67 01       	movw	r12, r14
    13c4:	2f ef       	ldi	r18, 0xFF	; 255
    13c6:	c2 1a       	sub	r12, r18
    13c8:	d2 0a       	sbc	r13, r18
    13ca:	f8 01       	movw	r30, r16
    13cc:	ee 0f       	add	r30, r30
    13ce:	ff 1f       	adc	r31, r31
    13d0:	ee 0f       	add	r30, r30
    13d2:	ff 1f       	adc	r31, r31
    13d4:	ee 0f       	add	r30, r30
    13d6:	ff 1f       	adc	r31, r31
    13d8:	e0 0f       	add	r30, r16
    13da:	f1 1f       	adc	r31, r17
    13dc:	ec 0d       	add	r30, r12
    13de:	fd 1d       	adc	r31, r13
    13e0:	ee 0f       	add	r30, r30
    13e2:	ff 1f       	adc	r31, r31
    13e4:	ec 5a       	subi	r30, 0xAC	; 172
    13e6:	fe 4f       	sbci	r31, 0xFE	; 254
    13e8:	20 81       	ld	r18, Z
    13ea:	31 81       	ldd	r19, Z+1	; 0x01
    13ec:	21 15       	cp	r18, r1
    13ee:	31 05       	cpc	r19, r1
    13f0:	09 f0       	breq	.+2      	; 0x13f4 <makeZ+0x1ae>
    13f2:	5f c0       	rjmp	.+190    	; 0x14b2 <makeZ+0x26c>
		&& board[r-1][c+1] == 0 && board[r+1][c]==0){
    13f4:	58 01       	movw	r10, r16
    13f6:	81 e0       	ldi	r24, 0x01	; 1
    13f8:	a8 1a       	sub	r10, r24
    13fa:	b1 08       	sbc	r11, r1
    13fc:	f5 01       	movw	r30, r10
    13fe:	ee 0f       	add	r30, r30
    1400:	ff 1f       	adc	r31, r31
    1402:	ee 0f       	add	r30, r30
    1404:	ff 1f       	adc	r31, r31
    1406:	ee 0f       	add	r30, r30
    1408:	ff 1f       	adc	r31, r31
    140a:	ea 0d       	add	r30, r10
    140c:	fb 1d       	adc	r31, r11
    140e:	ec 0d       	add	r30, r12
    1410:	fd 1d       	adc	r31, r13
    1412:	ee 0f       	add	r30, r30
    1414:	ff 1f       	adc	r31, r31
    1416:	ec 5a       	subi	r30, 0xAC	; 172
    1418:	fe 4f       	sbci	r31, 0xFE	; 254
    141a:	80 81       	ld	r24, Z
    141c:	91 81       	ldd	r25, Z+1	; 0x01
    141e:	00 97       	sbiw	r24, 0x00	; 0
    1420:	09 f0       	breq	.+2      	; 0x1424 <makeZ+0x1de>
    1422:	46 c0       	rjmp	.+140    	; 0x14b0 <makeZ+0x26a>
    1424:	48 01       	movw	r8, r16
    1426:	2f ef       	ldi	r18, 0xFF	; 255
    1428:	82 1a       	sub	r8, r18
    142a:	92 0a       	sbc	r9, r18
    142c:	f4 01       	movw	r30, r8
    142e:	ee 0f       	add	r30, r30
    1430:	ff 1f       	adc	r31, r31
    1432:	ee 0f       	add	r30, r30
    1434:	ff 1f       	adc	r31, r31
    1436:	ee 0f       	add	r30, r30
    1438:	ff 1f       	adc	r31, r31
    143a:	e8 0d       	add	r30, r8
    143c:	f9 1d       	adc	r31, r9
    143e:	ee 0d       	add	r30, r14
    1440:	ff 1d       	adc	r31, r15
    1442:	ee 0f       	add	r30, r30
    1444:	ff 1f       	adc	r31, r31
    1446:	ec 5a       	subi	r30, 0xAC	; 172
    1448:	fe 4f       	sbci	r31, 0xFE	; 254
    144a:	20 81       	ld	r18, Z
    144c:	31 81       	ldd	r19, Z+1	; 0x01
    144e:	23 2b       	or	r18, r19
    1450:	81 f5       	brne	.+96     	; 0x14b2 <makeZ+0x26c>
			lightLED(r,c);
    1452:	b7 01       	movw	r22, r14
    1454:	c8 01       	movw	r24, r16
    1456:	0e 94 3c 01 	call	0x278	; 0x278 <lightLED>
			lightLED(r,c+1);
    145a:	b6 01       	movw	r22, r12
    145c:	c8 01       	movw	r24, r16
    145e:	0e 94 3c 01 	call	0x278	; 0x278 <lightLED>
			lightLED(r-1,c+1);
    1462:	b6 01       	movw	r22, r12
    1464:	c5 01       	movw	r24, r10
    1466:	0e 94 3c 01 	call	0x278	; 0x278 <lightLED>
			lightLED(r+1,c);
    146a:	b7 01       	movw	r22, r14
    146c:	c4 01       	movw	r24, r8
    146e:	0e 94 3c 01 	call	0x278	; 0x278 <lightLED>
			return 1;
    1472:	ce 01       	movw	r24, r28
    1474:	1e c0       	rjmp	.+60     	; 0x14b2 <makeZ+0x26c>
	return 0;
}

int makeZ(int r, int c){
	if (version % 2 == 0){
		if (r > 17 || c < 2 || c > 7) return 0;
    1476:	80 e0       	ldi	r24, 0x00	; 0
    1478:	90 e0       	ldi	r25, 0x00	; 0
    147a:	1b c0       	rjmp	.+54     	; 0x14b2 <makeZ+0x26c>
    147c:	80 e0       	ldi	r24, 0x00	; 0
    147e:	90 e0       	ldi	r25, 0x00	; 0
    1480:	18 c0       	rjmp	.+48     	; 0x14b2 <makeZ+0x26c>
    1482:	80 e0       	ldi	r24, 0x00	; 0
    1484:	90 e0       	ldi	r25, 0x00	; 0
    1486:	15 c0       	rjmp	.+42     	; 0x14b2 <makeZ+0x26c>
			lightLED(r-1,c+1);
			lightLED(r+1,c);
			return 1;
		}
	}
	return 0;
    1488:	80 e0       	ldi	r24, 0x00	; 0
    148a:	90 e0       	ldi	r25, 0x00	; 0
    148c:	12 c0       	rjmp	.+36     	; 0x14b2 <makeZ+0x26c>
    148e:	c9 01       	movw	r24, r18
    1490:	10 c0       	rjmp	.+32     	; 0x14b2 <makeZ+0x26c>
    1492:	80 e0       	ldi	r24, 0x00	; 0
    1494:	90 e0       	ldi	r25, 0x00	; 0
    1496:	0d c0       	rjmp	.+26     	; 0x14b2 <makeZ+0x26c>
			lightLED(r-1,c-1);
			return 1;
		}
	}
	else if (version % 2 == 1){
		if (r > 16 || c < 1 || c > 7) return 0;
    1498:	80 e0       	ldi	r24, 0x00	; 0
    149a:	90 e0       	ldi	r25, 0x00	; 0
    149c:	0a c0       	rjmp	.+20     	; 0x14b2 <makeZ+0x26c>
    149e:	80 e0       	ldi	r24, 0x00	; 0
    14a0:	90 e0       	ldi	r25, 0x00	; 0
    14a2:	07 c0       	rjmp	.+14     	; 0x14b2 <makeZ+0x26c>
    14a4:	80 e0       	ldi	r24, 0x00	; 0
    14a6:	90 e0       	ldi	r25, 0x00	; 0
    14a8:	04 c0       	rjmp	.+8      	; 0x14b2 <makeZ+0x26c>
			lightLED(r-1,c+1);
			lightLED(r+1,c);
			return 1;
		}
	}
	return 0;
    14aa:	80 e0       	ldi	r24, 0x00	; 0
    14ac:	90 e0       	ldi	r25, 0x00	; 0
    14ae:	01 c0       	rjmp	.+2      	; 0x14b2 <makeZ+0x26c>
    14b0:	c9 01       	movw	r24, r18
}
    14b2:	df 91       	pop	r29
    14b4:	cf 91       	pop	r28
    14b6:	1f 91       	pop	r17
    14b8:	0f 91       	pop	r16
    14ba:	ff 90       	pop	r15
    14bc:	ef 90       	pop	r14
    14be:	df 90       	pop	r13
    14c0:	cf 90       	pop	r12
    14c2:	bf 90       	pop	r11
    14c4:	af 90       	pop	r10
    14c6:	9f 90       	pop	r9
    14c8:	8f 90       	pop	r8
    14ca:	08 95       	ret

000014cc <check_rotate_collision>:

int check_rotate_collision(){
	int i = curX;
    14cc:	20 91 13 01 	lds	r18, 0x0113	; 0x800113 <curX>
    14d0:	30 91 14 01 	lds	r19, 0x0114	; 0x800114 <curX+0x1>
	int j = curY;
    14d4:	60 91 11 01 	lds	r22, 0x0111	; 0x800111 <curY>
    14d8:	70 91 12 01 	lds	r23, 0x0112	; 0x800112 <curY+0x1>
	switch(type){
    14dc:	80 91 52 01 	lds	r24, 0x0152	; 0x800152 <type>
    14e0:	90 91 53 01 	lds	r25, 0x0153	; 0x800153 <type+0x1>
    14e4:	83 30       	cpi	r24, 0x03	; 3
    14e6:	91 05       	cpc	r25, r1
    14e8:	09 f4       	brne	.+2      	; 0x14ec <check_rotate_collision+0x20>
    14ea:	cb c2       	rjmp	.+1430   	; 0x1a82 <check_rotate_collision+0x5b6>
    14ec:	3c f4       	brge	.+14     	; 0x14fc <check_rotate_collision+0x30>
    14ee:	81 30       	cpi	r24, 0x01	; 1
    14f0:	91 05       	cpc	r25, r1
    14f2:	71 f0       	breq	.+28     	; 0x1510 <check_rotate_collision+0x44>
    14f4:	02 97       	sbiw	r24, 0x02	; 2
    14f6:	09 f4       	brne	.+2      	; 0x14fa <check_rotate_collision+0x2e>
    14f8:	63 c0       	rjmp	.+198    	; 0x15c0 <check_rotate_collision+0xf4>
    14fa:	c2 c2       	rjmp	.+1412   	; 0x1a80 <check_rotate_collision+0x5b4>
    14fc:	85 30       	cpi	r24, 0x05	; 5
    14fe:	91 05       	cpc	r25, r1
    1500:	09 f4       	brne	.+2      	; 0x1504 <check_rotate_collision+0x38>
    1502:	51 c2       	rjmp	.+1186   	; 0x19a6 <check_rotate_collision+0x4da>
    1504:	0c f4       	brge	.+2      	; 0x1508 <check_rotate_collision+0x3c>
    1506:	b0 c0       	rjmp	.+352    	; 0x1668 <check_rotate_collision+0x19c>
    1508:	06 97       	sbiw	r24, 0x06	; 6
    150a:	09 f4       	brne	.+2      	; 0x150e <check_rotate_collision+0x42>
    150c:	df c1       	rjmp	.+958    	; 0x18cc <check_rotate_collision+0x400>
    150e:	b8 c2       	rjmp	.+1392   	; 0x1a80 <check_rotate_collision+0x5b4>
		case 1: // makeT
			switch(version) {
    1510:	40 91 50 01 	lds	r20, 0x0150	; 0x800150 <version>
    1514:	50 91 51 01 	lds	r21, 0x0151	; 0x800151 <version+0x1>
    1518:	41 30       	cpi	r20, 0x01	; 1
    151a:	51 05       	cpc	r21, r1
    151c:	49 f1       	breq	.+82     	; 0x1570 <check_rotate_collision+0xa4>
    151e:	1c f4       	brge	.+6      	; 0x1526 <check_rotate_collision+0x5a>
    1520:	45 2b       	or	r20, r21
    1522:	49 f0       	breq	.+18     	; 0x1536 <check_rotate_collision+0x6a>
    1524:	ad c2       	rjmp	.+1370   	; 0x1a80 <check_rotate_collision+0x5b4>
    1526:	42 30       	cpi	r20, 0x02	; 2
    1528:	51 05       	cpc	r21, r1
    152a:	09 f4       	brne	.+2      	; 0x152e <check_rotate_collision+0x62>
    152c:	ad c2       	rjmp	.+1370   	; 0x1a88 <check_rotate_collision+0x5bc>
    152e:	43 30       	cpi	r20, 0x03	; 3
    1530:	51 05       	cpc	r21, r1
    1532:	91 f1       	breq	.+100    	; 0x1598 <check_rotate_collision+0xcc>
    1534:	a5 c2       	rjmp	.+1354   	; 0x1a80 <check_rotate_collision+0x5b4>
				case 0:
					return (i == 17 || board[i+1][j]) ;
    1536:	21 31       	cpi	r18, 0x11	; 17
    1538:	31 05       	cpc	r19, r1
    153a:	09 f4       	brne	.+2      	; 0x153e <check_rotate_collision+0x72>
    153c:	a8 c2       	rjmp	.+1360   	; 0x1a8e <check_rotate_collision+0x5c2>
    153e:	2f 5f       	subi	r18, 0xFF	; 255
    1540:	3f 4f       	sbci	r19, 0xFF	; 255
    1542:	f9 01       	movw	r30, r18
    1544:	ee 0f       	add	r30, r30
    1546:	ff 1f       	adc	r31, r31
    1548:	ee 0f       	add	r30, r30
    154a:	ff 1f       	adc	r31, r31
    154c:	ee 0f       	add	r30, r30
    154e:	ff 1f       	adc	r31, r31
    1550:	e2 0f       	add	r30, r18
    1552:	f3 1f       	adc	r31, r19
    1554:	e6 0f       	add	r30, r22
    1556:	f7 1f       	adc	r31, r23
    1558:	ee 0f       	add	r30, r30
    155a:	ff 1f       	adc	r31, r31
    155c:	ec 5a       	subi	r30, 0xAC	; 172
    155e:	fe 4f       	sbci	r31, 0xFE	; 254
    1560:	40 81       	ld	r20, Z
    1562:	51 81       	ldd	r21, Z+1	; 0x01
    1564:	41 15       	cp	r20, r1
    1566:	51 05       	cpc	r21, r1
    1568:	09 f4       	brne	.+2      	; 0x156c <check_rotate_collision+0xa0>
    156a:	c1 c2       	rjmp	.+1410   	; 0x1aee <check_rotate_collision+0x622>
    156c:	ac 01       	movw	r20, r24
    156e:	bf c2       	rjmp	.+1406   	; 0x1aee <check_rotate_collision+0x622>
				case 1:
					return board[i][j+1] ;
    1570:	6f 5f       	subi	r22, 0xFF	; 255
    1572:	7f 4f       	sbci	r23, 0xFF	; 255
    1574:	f9 01       	movw	r30, r18
    1576:	ee 0f       	add	r30, r30
    1578:	ff 1f       	adc	r31, r31
    157a:	ee 0f       	add	r30, r30
    157c:	ff 1f       	adc	r31, r31
    157e:	ee 0f       	add	r30, r30
    1580:	ff 1f       	adc	r31, r31
    1582:	e2 0f       	add	r30, r18
    1584:	f3 1f       	adc	r31, r19
    1586:	e6 0f       	add	r30, r22
    1588:	f7 1f       	adc	r31, r23
    158a:	ee 0f       	add	r30, r30
    158c:	ff 1f       	adc	r31, r31
    158e:	ec 5a       	subi	r30, 0xAC	; 172
    1590:	fe 4f       	sbci	r31, 0xFE	; 254
    1592:	40 81       	ld	r20, Z
    1594:	51 81       	ldd	r21, Z+1	; 0x01
    1596:	ab c2       	rjmp	.+1366   	; 0x1aee <check_rotate_collision+0x622>
				case 2:
					return 0 ;
				case 3:
					return board[i][j-1];
    1598:	61 50       	subi	r22, 0x01	; 1
    159a:	71 09       	sbc	r23, r1
    159c:	f9 01       	movw	r30, r18
    159e:	ee 0f       	add	r30, r30
    15a0:	ff 1f       	adc	r31, r31
    15a2:	ee 0f       	add	r30, r30
    15a4:	ff 1f       	adc	r31, r31
    15a6:	ee 0f       	add	r30, r30
    15a8:	ff 1f       	adc	r31, r31
    15aa:	e2 0f       	add	r30, r18
    15ac:	f3 1f       	adc	r31, r19
    15ae:	e6 0f       	add	r30, r22
    15b0:	f7 1f       	adc	r31, r23
    15b2:	ee 0f       	add	r30, r30
    15b4:	ff 1f       	adc	r31, r31
    15b6:	ec 5a       	subi	r30, 0xAC	; 172
    15b8:	fe 4f       	sbci	r31, 0xFE	; 254
    15ba:	40 81       	ld	r20, Z
    15bc:	51 81       	ldd	r21, Z+1	; 0x01
    15be:	97 c2       	rjmp	.+1326   	; 0x1aee <check_rotate_collision+0x622>
			}
			break;
		case 2: // makeBAR
			if(version == 0){
    15c0:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <version>
    15c4:	90 91 51 01 	lds	r25, 0x0151	; 0x800151 <version+0x1>
    15c8:	89 2b       	or	r24, r25
    15ca:	f1 f4       	brne	.+60     	; 0x1608 <check_rotate_collision+0x13c>
				return (i == 17 || board[i+1][j]) ;
    15cc:	21 31       	cpi	r18, 0x11	; 17
    15ce:	31 05       	cpc	r19, r1
    15d0:	09 f4       	brne	.+2      	; 0x15d4 <check_rotate_collision+0x108>
    15d2:	5f c2       	rjmp	.+1214   	; 0x1a92 <check_rotate_collision+0x5c6>
    15d4:	2f 5f       	subi	r18, 0xFF	; 255
    15d6:	3f 4f       	sbci	r19, 0xFF	; 255
    15d8:	f9 01       	movw	r30, r18
    15da:	ee 0f       	add	r30, r30
    15dc:	ff 1f       	adc	r31, r31
    15de:	ee 0f       	add	r30, r30
    15e0:	ff 1f       	adc	r31, r31
    15e2:	ee 0f       	add	r30, r30
    15e4:	ff 1f       	adc	r31, r31
    15e6:	e2 0f       	add	r30, r18
    15e8:	f3 1f       	adc	r31, r19
    15ea:	e6 0f       	add	r30, r22
    15ec:	f7 1f       	adc	r31, r23
    15ee:	ee 0f       	add	r30, r30
    15f0:	ff 1f       	adc	r31, r31
    15f2:	ec 5a       	subi	r30, 0xAC	; 172
    15f4:	fe 4f       	sbci	r31, 0xFE	; 254
    15f6:	40 81       	ld	r20, Z
    15f8:	51 81       	ldd	r21, Z+1	; 0x01
    15fa:	41 15       	cp	r20, r1
    15fc:	51 05       	cpc	r21, r1
    15fe:	09 f4       	brne	.+2      	; 0x1602 <check_rotate_collision+0x136>
    1600:	76 c2       	rjmp	.+1260   	; 0x1aee <check_rotate_collision+0x622>
    1602:	41 e0       	ldi	r20, 0x01	; 1
    1604:	50 e0       	ldi	r21, 0x00	; 0
    1606:	73 c2       	rjmp	.+1254   	; 0x1aee <check_rotate_collision+0x622>
			}
			else return (board[i][j+1] || board[i][j-1]);
    1608:	f9 01       	movw	r30, r18
    160a:	ee 0f       	add	r30, r30
    160c:	ff 1f       	adc	r31, r31
    160e:	ee 0f       	add	r30, r30
    1610:	ff 1f       	adc	r31, r31
    1612:	ee 0f       	add	r30, r30
    1614:	ff 1f       	adc	r31, r31
    1616:	e2 0f       	add	r30, r18
    1618:	f3 1f       	adc	r31, r19
    161a:	cb 01       	movw	r24, r22
    161c:	01 96       	adiw	r24, 0x01	; 1
    161e:	e8 0f       	add	r30, r24
    1620:	f9 1f       	adc	r31, r25
    1622:	ee 0f       	add	r30, r30
    1624:	ff 1f       	adc	r31, r31
    1626:	ec 5a       	subi	r30, 0xAC	; 172
    1628:	fe 4f       	sbci	r31, 0xFE	; 254
    162a:	80 81       	ld	r24, Z
    162c:	91 81       	ldd	r25, Z+1	; 0x01
    162e:	89 2b       	or	r24, r25
    1630:	09 f0       	breq	.+2      	; 0x1634 <check_rotate_collision+0x168>
    1632:	32 c2       	rjmp	.+1124   	; 0x1a98 <check_rotate_collision+0x5cc>
    1634:	61 50       	subi	r22, 0x01	; 1
    1636:	71 09       	sbc	r23, r1
    1638:	f9 01       	movw	r30, r18
    163a:	ee 0f       	add	r30, r30
    163c:	ff 1f       	adc	r31, r31
    163e:	ee 0f       	add	r30, r30
    1640:	ff 1f       	adc	r31, r31
    1642:	ee 0f       	add	r30, r30
    1644:	ff 1f       	adc	r31, r31
    1646:	e2 0f       	add	r30, r18
    1648:	f3 1f       	adc	r31, r19
    164a:	e6 0f       	add	r30, r22
    164c:	f7 1f       	adc	r31, r23
    164e:	ee 0f       	add	r30, r30
    1650:	ff 1f       	adc	r31, r31
    1652:	ec 5a       	subi	r30, 0xAC	; 172
    1654:	fe 4f       	sbci	r31, 0xFE	; 254
    1656:	40 81       	ld	r20, Z
    1658:	51 81       	ldd	r21, Z+1	; 0x01
    165a:	41 15       	cp	r20, r1
    165c:	51 05       	cpc	r21, r1
    165e:	09 f4       	brne	.+2      	; 0x1662 <check_rotate_collision+0x196>
    1660:	46 c2       	rjmp	.+1164   	; 0x1aee <check_rotate_collision+0x622>
    1662:	41 e0       	ldi	r20, 0x01	; 1
    1664:	50 e0       	ldi	r21, 0x00	; 0
    1666:	43 c2       	rjmp	.+1158   	; 0x1aee <check_rotate_collision+0x622>
			break;
		case 3: // makeSquare
			return 1;
			break;
		case 4: // makeL
			switch(version) {
    1668:	40 91 50 01 	lds	r20, 0x0150	; 0x800150 <version>
    166c:	50 91 51 01 	lds	r21, 0x0151	; 0x800151 <version+0x1>
    1670:	41 30       	cpi	r20, 0x01	; 1
    1672:	51 05       	cpc	r21, r1
    1674:	09 f4       	brne	.+2      	; 0x1678 <check_rotate_collision+0x1ac>
    1676:	54 c0       	rjmp	.+168    	; 0x1720 <check_rotate_collision+0x254>
    1678:	1c f4       	brge	.+6      	; 0x1680 <check_rotate_collision+0x1b4>
    167a:	45 2b       	or	r20, r21
    167c:	51 f0       	breq	.+20     	; 0x1692 <check_rotate_collision+0x1c6>
    167e:	00 c2       	rjmp	.+1024   	; 0x1a80 <check_rotate_collision+0x5b4>
    1680:	42 30       	cpi	r20, 0x02	; 2
    1682:	51 05       	cpc	r21, r1
    1684:	09 f4       	brne	.+2      	; 0x1688 <check_rotate_collision+0x1bc>
    1686:	90 c0       	rjmp	.+288    	; 0x17a8 <check_rotate_collision+0x2dc>
    1688:	43 30       	cpi	r20, 0x03	; 3
    168a:	51 05       	cpc	r21, r1
    168c:	09 f4       	brne	.+2      	; 0x1690 <check_rotate_collision+0x1c4>
    168e:	d3 c0       	rjmp	.+422    	; 0x1836 <check_rotate_collision+0x36a>
    1690:	f7 c1       	rjmp	.+1006   	; 0x1a80 <check_rotate_collision+0x5b4>
				case 0:
				return (board[i][j-1] || board[i][j+1] || board[i+1][j+1]);
    1692:	f9 01       	movw	r30, r18
    1694:	ee 0f       	add	r30, r30
    1696:	ff 1f       	adc	r31, r31
    1698:	ee 0f       	add	r30, r30
    169a:	ff 1f       	adc	r31, r31
    169c:	ee 0f       	add	r30, r30
    169e:	ff 1f       	adc	r31, r31
    16a0:	e2 0f       	add	r30, r18
    16a2:	f3 1f       	adc	r31, r19
    16a4:	cb 01       	movw	r24, r22
    16a6:	01 97       	sbiw	r24, 0x01	; 1
    16a8:	e8 0f       	add	r30, r24
    16aa:	f9 1f       	adc	r31, r25
    16ac:	ee 0f       	add	r30, r30
    16ae:	ff 1f       	adc	r31, r31
    16b0:	ec 5a       	subi	r30, 0xAC	; 172
    16b2:	fe 4f       	sbci	r31, 0xFE	; 254
    16b4:	80 81       	ld	r24, Z
    16b6:	91 81       	ldd	r25, Z+1	; 0x01
    16b8:	89 2b       	or	r24, r25
    16ba:	09 f0       	breq	.+2      	; 0x16be <check_rotate_collision+0x1f2>
    16bc:	f0 c1       	rjmp	.+992    	; 0x1a9e <check_rotate_collision+0x5d2>
    16be:	6f 5f       	subi	r22, 0xFF	; 255
    16c0:	7f 4f       	sbci	r23, 0xFF	; 255
    16c2:	f9 01       	movw	r30, r18
    16c4:	ee 0f       	add	r30, r30
    16c6:	ff 1f       	adc	r31, r31
    16c8:	ee 0f       	add	r30, r30
    16ca:	ff 1f       	adc	r31, r31
    16cc:	ee 0f       	add	r30, r30
    16ce:	ff 1f       	adc	r31, r31
    16d0:	e2 0f       	add	r30, r18
    16d2:	f3 1f       	adc	r31, r19
    16d4:	e6 0f       	add	r30, r22
    16d6:	f7 1f       	adc	r31, r23
    16d8:	ee 0f       	add	r30, r30
    16da:	ff 1f       	adc	r31, r31
    16dc:	ec 5a       	subi	r30, 0xAC	; 172
    16de:	fe 4f       	sbci	r31, 0xFE	; 254
    16e0:	80 81       	ld	r24, Z
    16e2:	91 81       	ldd	r25, Z+1	; 0x01
    16e4:	89 2b       	or	r24, r25
    16e6:	09 f0       	breq	.+2      	; 0x16ea <check_rotate_collision+0x21e>
    16e8:	dd c1       	rjmp	.+954    	; 0x1aa4 <check_rotate_collision+0x5d8>
    16ea:	2f 5f       	subi	r18, 0xFF	; 255
    16ec:	3f 4f       	sbci	r19, 0xFF	; 255
    16ee:	f9 01       	movw	r30, r18
    16f0:	ee 0f       	add	r30, r30
    16f2:	ff 1f       	adc	r31, r31
    16f4:	ee 0f       	add	r30, r30
    16f6:	ff 1f       	adc	r31, r31
    16f8:	ee 0f       	add	r30, r30
    16fa:	ff 1f       	adc	r31, r31
    16fc:	2e 0f       	add	r18, r30
    16fe:	3f 1f       	adc	r19, r31
    1700:	62 0f       	add	r22, r18
    1702:	73 1f       	adc	r23, r19
    1704:	fb 01       	movw	r30, r22
    1706:	ee 0f       	add	r30, r30
    1708:	ff 1f       	adc	r31, r31
    170a:	ec 5a       	subi	r30, 0xAC	; 172
    170c:	fe 4f       	sbci	r31, 0xFE	; 254
    170e:	40 81       	ld	r20, Z
    1710:	51 81       	ldd	r21, Z+1	; 0x01
    1712:	41 15       	cp	r20, r1
    1714:	51 05       	cpc	r21, r1
    1716:	09 f4       	brne	.+2      	; 0x171a <check_rotate_collision+0x24e>
    1718:	ea c1       	rjmp	.+980    	; 0x1aee <check_rotate_collision+0x622>
    171a:	41 e0       	ldi	r20, 0x01	; 1
    171c:	50 e0       	ldi	r21, 0x00	; 0
    171e:	e7 c1       	rjmp	.+974    	; 0x1aee <check_rotate_collision+0x622>
				case 1:
				return (board[i+1][j] || board[i-1][j] || board[i-1][j+1]);
    1720:	c9 01       	movw	r24, r18
    1722:	01 96       	adiw	r24, 0x01	; 1
    1724:	fc 01       	movw	r30, r24
    1726:	ee 0f       	add	r30, r30
    1728:	ff 1f       	adc	r31, r31
    172a:	ee 0f       	add	r30, r30
    172c:	ff 1f       	adc	r31, r31
    172e:	ee 0f       	add	r30, r30
    1730:	ff 1f       	adc	r31, r31
    1732:	e8 0f       	add	r30, r24
    1734:	f9 1f       	adc	r31, r25
    1736:	e6 0f       	add	r30, r22
    1738:	f7 1f       	adc	r31, r23
    173a:	ee 0f       	add	r30, r30
    173c:	ff 1f       	adc	r31, r31
    173e:	ec 5a       	subi	r30, 0xAC	; 172
    1740:	fe 4f       	sbci	r31, 0xFE	; 254
    1742:	80 81       	ld	r24, Z
    1744:	91 81       	ldd	r25, Z+1	; 0x01
    1746:	89 2b       	or	r24, r25
    1748:	09 f0       	breq	.+2      	; 0x174c <check_rotate_collision+0x280>
    174a:	d1 c1       	rjmp	.+930    	; 0x1aee <check_rotate_collision+0x622>
    174c:	21 50       	subi	r18, 0x01	; 1
    174e:	31 09       	sbc	r19, r1
    1750:	f9 01       	movw	r30, r18
    1752:	ee 0f       	add	r30, r30
    1754:	ff 1f       	adc	r31, r31
    1756:	ee 0f       	add	r30, r30
    1758:	ff 1f       	adc	r31, r31
    175a:	ee 0f       	add	r30, r30
    175c:	ff 1f       	adc	r31, r31
    175e:	e2 0f       	add	r30, r18
    1760:	f3 1f       	adc	r31, r19
    1762:	e6 0f       	add	r30, r22
    1764:	f7 1f       	adc	r31, r23
    1766:	ee 0f       	add	r30, r30
    1768:	ff 1f       	adc	r31, r31
    176a:	ec 5a       	subi	r30, 0xAC	; 172
    176c:	fe 4f       	sbci	r31, 0xFE	; 254
    176e:	80 81       	ld	r24, Z
    1770:	91 81       	ldd	r25, Z+1	; 0x01
    1772:	89 2b       	or	r24, r25
    1774:	09 f0       	breq	.+2      	; 0x1778 <check_rotate_collision+0x2ac>
    1776:	bb c1       	rjmp	.+886    	; 0x1aee <check_rotate_collision+0x622>
    1778:	6f 5f       	subi	r22, 0xFF	; 255
    177a:	7f 4f       	sbci	r23, 0xFF	; 255
    177c:	c9 01       	movw	r24, r18
    177e:	88 0f       	add	r24, r24
    1780:	99 1f       	adc	r25, r25
    1782:	88 0f       	add	r24, r24
    1784:	99 1f       	adc	r25, r25
    1786:	88 0f       	add	r24, r24
    1788:	99 1f       	adc	r25, r25
    178a:	28 0f       	add	r18, r24
    178c:	39 1f       	adc	r19, r25
    178e:	26 0f       	add	r18, r22
    1790:	37 1f       	adc	r19, r23
    1792:	22 0f       	add	r18, r18
    1794:	33 1f       	adc	r19, r19
    1796:	f9 01       	movw	r30, r18
    1798:	ec 5a       	subi	r30, 0xAC	; 172
    179a:	fe 4f       	sbci	r31, 0xFE	; 254
    179c:	80 81       	ld	r24, Z
    179e:	91 81       	ldd	r25, Z+1	; 0x01
    17a0:	00 97       	sbiw	r24, 0x00	; 0
    17a2:	09 f4       	brne	.+2      	; 0x17a6 <check_rotate_collision+0x2da>
    17a4:	82 c1       	rjmp	.+772    	; 0x1aaa <check_rotate_collision+0x5de>
    17a6:	a3 c1       	rjmp	.+838    	; 0x1aee <check_rotate_collision+0x622>
				case 2:
				return (board[i][j+1] || board[i-1][j-1] || board[i][j-1]);
    17a8:	f9 01       	movw	r30, r18
    17aa:	ee 0f       	add	r30, r30
    17ac:	ff 1f       	adc	r31, r31
    17ae:	ee 0f       	add	r30, r30
    17b0:	ff 1f       	adc	r31, r31
    17b2:	ee 0f       	add	r30, r30
    17b4:	ff 1f       	adc	r31, r31
    17b6:	e2 0f       	add	r30, r18
    17b8:	f3 1f       	adc	r31, r19
    17ba:	cb 01       	movw	r24, r22
    17bc:	01 96       	adiw	r24, 0x01	; 1
    17be:	e8 0f       	add	r30, r24
    17c0:	f9 1f       	adc	r31, r25
    17c2:	ee 0f       	add	r30, r30
    17c4:	ff 1f       	adc	r31, r31
    17c6:	ec 5a       	subi	r30, 0xAC	; 172
    17c8:	fe 4f       	sbci	r31, 0xFE	; 254
    17ca:	80 81       	ld	r24, Z
    17cc:	91 81       	ldd	r25, Z+1	; 0x01
    17ce:	89 2b       	or	r24, r25
    17d0:	09 f0       	breq	.+2      	; 0x17d4 <check_rotate_collision+0x308>
    17d2:	6d c1       	rjmp	.+730    	; 0x1aae <check_rotate_collision+0x5e2>
    17d4:	c9 01       	movw	r24, r18
    17d6:	01 97       	sbiw	r24, 0x01	; 1
    17d8:	61 50       	subi	r22, 0x01	; 1
    17da:	71 09       	sbc	r23, r1
    17dc:	fc 01       	movw	r30, r24
    17de:	ee 0f       	add	r30, r30
    17e0:	ff 1f       	adc	r31, r31
    17e2:	ee 0f       	add	r30, r30
    17e4:	ff 1f       	adc	r31, r31
    17e6:	ee 0f       	add	r30, r30
    17e8:	ff 1f       	adc	r31, r31
    17ea:	e8 0f       	add	r30, r24
    17ec:	f9 1f       	adc	r31, r25
    17ee:	e6 0f       	add	r30, r22
    17f0:	f7 1f       	adc	r31, r23
    17f2:	ee 0f       	add	r30, r30
    17f4:	ff 1f       	adc	r31, r31
    17f6:	ec 5a       	subi	r30, 0xAC	; 172
    17f8:	fe 4f       	sbci	r31, 0xFE	; 254
    17fa:	80 81       	ld	r24, Z
    17fc:	91 81       	ldd	r25, Z+1	; 0x01
    17fe:	89 2b       	or	r24, r25
    1800:	09 f0       	breq	.+2      	; 0x1804 <check_rotate_collision+0x338>
    1802:	58 c1       	rjmp	.+688    	; 0x1ab4 <check_rotate_collision+0x5e8>
    1804:	f9 01       	movw	r30, r18
    1806:	ee 0f       	add	r30, r30
    1808:	ff 1f       	adc	r31, r31
    180a:	ee 0f       	add	r30, r30
    180c:	ff 1f       	adc	r31, r31
    180e:	ee 0f       	add	r30, r30
    1810:	ff 1f       	adc	r31, r31
    1812:	e2 0f       	add	r30, r18
    1814:	f3 1f       	adc	r31, r19
    1816:	6e 0f       	add	r22, r30
    1818:	7f 1f       	adc	r23, r31
    181a:	fb 01       	movw	r30, r22
    181c:	ee 0f       	add	r30, r30
    181e:	ff 1f       	adc	r31, r31
    1820:	ec 5a       	subi	r30, 0xAC	; 172
    1822:	fe 4f       	sbci	r31, 0xFE	; 254
    1824:	40 81       	ld	r20, Z
    1826:	51 81       	ldd	r21, Z+1	; 0x01
    1828:	41 15       	cp	r20, r1
    182a:	51 05       	cpc	r21, r1
    182c:	09 f4       	brne	.+2      	; 0x1830 <check_rotate_collision+0x364>
    182e:	5f c1       	rjmp	.+702    	; 0x1aee <check_rotate_collision+0x622>
    1830:	41 e0       	ldi	r20, 0x01	; 1
    1832:	50 e0       	ldi	r21, 0x00	; 0
    1834:	5c c1       	rjmp	.+696    	; 0x1aee <check_rotate_collision+0x622>
				case 3:
				return (i == 17 || board[i+1][j-1] || board[i+1][j] || board[i-1][j]) ;
    1836:	21 31       	cpi	r18, 0x11	; 17
    1838:	31 05       	cpc	r19, r1
    183a:	09 f4       	brne	.+2      	; 0x183e <check_rotate_collision+0x372>
    183c:	3e c1       	rjmp	.+636    	; 0x1aba <check_rotate_collision+0x5ee>
    183e:	a9 01       	movw	r20, r18
    1840:	4f 5f       	subi	r20, 0xFF	; 255
    1842:	5f 4f       	sbci	r21, 0xFF	; 255
    1844:	fa 01       	movw	r30, r20
    1846:	ee 0f       	add	r30, r30
    1848:	ff 1f       	adc	r31, r31
    184a:	ee 0f       	add	r30, r30
    184c:	ff 1f       	adc	r31, r31
    184e:	ee 0f       	add	r30, r30
    1850:	ff 1f       	adc	r31, r31
    1852:	e4 0f       	add	r30, r20
    1854:	f5 1f       	adc	r31, r21
    1856:	cb 01       	movw	r24, r22
    1858:	01 97       	sbiw	r24, 0x01	; 1
    185a:	e8 0f       	add	r30, r24
    185c:	f9 1f       	adc	r31, r25
    185e:	ee 0f       	add	r30, r30
    1860:	ff 1f       	adc	r31, r31
    1862:	ec 5a       	subi	r30, 0xAC	; 172
    1864:	fe 4f       	sbci	r31, 0xFE	; 254
    1866:	80 81       	ld	r24, Z
    1868:	91 81       	ldd	r25, Z+1	; 0x01
    186a:	89 2b       	or	r24, r25
    186c:	09 f0       	breq	.+2      	; 0x1870 <check_rotate_collision+0x3a4>
    186e:	28 c1       	rjmp	.+592    	; 0x1ac0 <check_rotate_collision+0x5f4>
    1870:	fa 01       	movw	r30, r20
    1872:	ee 0f       	add	r30, r30
    1874:	ff 1f       	adc	r31, r31
    1876:	ee 0f       	add	r30, r30
    1878:	ff 1f       	adc	r31, r31
    187a:	ee 0f       	add	r30, r30
    187c:	ff 1f       	adc	r31, r31
    187e:	e4 0f       	add	r30, r20
    1880:	f5 1f       	adc	r31, r21
    1882:	e6 0f       	add	r30, r22
    1884:	f7 1f       	adc	r31, r23
    1886:	ee 0f       	add	r30, r30
    1888:	ff 1f       	adc	r31, r31
    188a:	ec 5a       	subi	r30, 0xAC	; 172
    188c:	fe 4f       	sbci	r31, 0xFE	; 254
    188e:	80 81       	ld	r24, Z
    1890:	91 81       	ldd	r25, Z+1	; 0x01
    1892:	89 2b       	or	r24, r25
    1894:	09 f0       	breq	.+2      	; 0x1898 <check_rotate_collision+0x3cc>
    1896:	17 c1       	rjmp	.+558    	; 0x1ac6 <check_rotate_collision+0x5fa>
    1898:	21 50       	subi	r18, 0x01	; 1
    189a:	31 09       	sbc	r19, r1
    189c:	f9 01       	movw	r30, r18
    189e:	ee 0f       	add	r30, r30
    18a0:	ff 1f       	adc	r31, r31
    18a2:	ee 0f       	add	r30, r30
    18a4:	ff 1f       	adc	r31, r31
    18a6:	ee 0f       	add	r30, r30
    18a8:	ff 1f       	adc	r31, r31
    18aa:	e2 0f       	add	r30, r18
    18ac:	f3 1f       	adc	r31, r19
    18ae:	e6 0f       	add	r30, r22
    18b0:	f7 1f       	adc	r31, r23
    18b2:	ee 0f       	add	r30, r30
    18b4:	ff 1f       	adc	r31, r31
    18b6:	ec 5a       	subi	r30, 0xAC	; 172
    18b8:	fe 4f       	sbci	r31, 0xFE	; 254
    18ba:	40 81       	ld	r20, Z
    18bc:	51 81       	ldd	r21, Z+1	; 0x01
    18be:	41 15       	cp	r20, r1
    18c0:	51 05       	cpc	r21, r1
    18c2:	09 f4       	brne	.+2      	; 0x18c6 <check_rotate_collision+0x3fa>
    18c4:	14 c1       	rjmp	.+552    	; 0x1aee <check_rotate_collision+0x622>
    18c6:	41 e0       	ldi	r20, 0x01	; 1
    18c8:	50 e0       	ldi	r21, 0x00	; 0
    18ca:	11 c1       	rjmp	.+546    	; 0x1aee <check_rotate_collision+0x622>
			}
			break;
		case 6: // makeZ
			if(version == 0)
    18cc:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <version>
    18d0:	90 91 51 01 	lds	r25, 0x0151	; 0x800151 <version+0x1>
    18d4:	89 2b       	or	r24, r25
    18d6:	b1 f5       	brne	.+108    	; 0x1944 <check_rotate_collision+0x478>
			return (i == 16 || board[i+1][j] || board[i-1][j+1]);
    18d8:	20 31       	cpi	r18, 0x10	; 16
    18da:	31 05       	cpc	r19, r1
    18dc:	09 f4       	brne	.+2      	; 0x18e0 <check_rotate_collision+0x414>
    18de:	f6 c0       	rjmp	.+492    	; 0x1acc <check_rotate_collision+0x600>
    18e0:	c9 01       	movw	r24, r18
    18e2:	01 96       	adiw	r24, 0x01	; 1
    18e4:	fc 01       	movw	r30, r24
    18e6:	ee 0f       	add	r30, r30
    18e8:	ff 1f       	adc	r31, r31
    18ea:	ee 0f       	add	r30, r30
    18ec:	ff 1f       	adc	r31, r31
    18ee:	ee 0f       	add	r30, r30
    18f0:	ff 1f       	adc	r31, r31
    18f2:	e8 0f       	add	r30, r24
    18f4:	f9 1f       	adc	r31, r25
    18f6:	e6 0f       	add	r30, r22
    18f8:	f7 1f       	adc	r31, r23
    18fa:	ee 0f       	add	r30, r30
    18fc:	ff 1f       	adc	r31, r31
    18fe:	ec 5a       	subi	r30, 0xAC	; 172
    1900:	fe 4f       	sbci	r31, 0xFE	; 254
    1902:	80 81       	ld	r24, Z
    1904:	91 81       	ldd	r25, Z+1	; 0x01
    1906:	89 2b       	or	r24, r25
    1908:	09 f0       	breq	.+2      	; 0x190c <check_rotate_collision+0x440>
    190a:	e3 c0       	rjmp	.+454    	; 0x1ad2 <check_rotate_collision+0x606>
    190c:	21 50       	subi	r18, 0x01	; 1
    190e:	31 09       	sbc	r19, r1
    1910:	6f 5f       	subi	r22, 0xFF	; 255
    1912:	7f 4f       	sbci	r23, 0xFF	; 255
    1914:	f9 01       	movw	r30, r18
    1916:	ee 0f       	add	r30, r30
    1918:	ff 1f       	adc	r31, r31
    191a:	ee 0f       	add	r30, r30
    191c:	ff 1f       	adc	r31, r31
    191e:	ee 0f       	add	r30, r30
    1920:	ff 1f       	adc	r31, r31
    1922:	e2 0f       	add	r30, r18
    1924:	f3 1f       	adc	r31, r19
    1926:	e6 0f       	add	r30, r22
    1928:	f7 1f       	adc	r31, r23
    192a:	ee 0f       	add	r30, r30
    192c:	ff 1f       	adc	r31, r31
    192e:	ec 5a       	subi	r30, 0xAC	; 172
    1930:	fe 4f       	sbci	r31, 0xFE	; 254
    1932:	40 81       	ld	r20, Z
    1934:	51 81       	ldd	r21, Z+1	; 0x01
    1936:	41 15       	cp	r20, r1
    1938:	51 05       	cpc	r21, r1
    193a:	09 f4       	brne	.+2      	; 0x193e <check_rotate_collision+0x472>
    193c:	d8 c0       	rjmp	.+432    	; 0x1aee <check_rotate_collision+0x622>
    193e:	41 e0       	ldi	r20, 0x01	; 1
    1940:	50 e0       	ldi	r21, 0x00	; 0
    1942:	d5 c0       	rjmp	.+426    	; 0x1aee <check_rotate_collision+0x622>
			else return (board[i-1][j] || board[i-1][j-1]);
    1944:	21 50       	subi	r18, 0x01	; 1
    1946:	31 09       	sbc	r19, r1
    1948:	f9 01       	movw	r30, r18
    194a:	ee 0f       	add	r30, r30
    194c:	ff 1f       	adc	r31, r31
    194e:	ee 0f       	add	r30, r30
    1950:	ff 1f       	adc	r31, r31
    1952:	ee 0f       	add	r30, r30
    1954:	ff 1f       	adc	r31, r31
    1956:	e2 0f       	add	r30, r18
    1958:	f3 1f       	adc	r31, r19
    195a:	e6 0f       	add	r30, r22
    195c:	f7 1f       	adc	r31, r23
    195e:	ee 0f       	add	r30, r30
    1960:	ff 1f       	adc	r31, r31
    1962:	ec 5a       	subi	r30, 0xAC	; 172
    1964:	fe 4f       	sbci	r31, 0xFE	; 254
    1966:	80 81       	ld	r24, Z
    1968:	91 81       	ldd	r25, Z+1	; 0x01
    196a:	89 2b       	or	r24, r25
    196c:	09 f0       	breq	.+2      	; 0x1970 <check_rotate_collision+0x4a4>
    196e:	b4 c0       	rjmp	.+360    	; 0x1ad8 <check_rotate_collision+0x60c>
    1970:	fb 01       	movw	r30, r22
    1972:	31 97       	sbiw	r30, 0x01	; 1
    1974:	b9 01       	movw	r22, r18
    1976:	66 0f       	add	r22, r22
    1978:	77 1f       	adc	r23, r23
    197a:	66 0f       	add	r22, r22
    197c:	77 1f       	adc	r23, r23
    197e:	66 0f       	add	r22, r22
    1980:	77 1f       	adc	r23, r23
    1982:	26 0f       	add	r18, r22
    1984:	37 1f       	adc	r19, r23
    1986:	2e 0f       	add	r18, r30
    1988:	3f 1f       	adc	r19, r31
    198a:	f9 01       	movw	r30, r18
    198c:	ee 0f       	add	r30, r30
    198e:	ff 1f       	adc	r31, r31
    1990:	ec 5a       	subi	r30, 0xAC	; 172
    1992:	fe 4f       	sbci	r31, 0xFE	; 254
    1994:	40 81       	ld	r20, Z
    1996:	51 81       	ldd	r21, Z+1	; 0x01
    1998:	41 15       	cp	r20, r1
    199a:	51 05       	cpc	r21, r1
    199c:	09 f4       	brne	.+2      	; 0x19a0 <check_rotate_collision+0x4d4>
    199e:	a7 c0       	rjmp	.+334    	; 0x1aee <check_rotate_collision+0x622>
    19a0:	41 e0       	ldi	r20, 0x01	; 1
    19a2:	50 e0       	ldi	r21, 0x00	; 0
    19a4:	a4 c0       	rjmp	.+328    	; 0x1aee <check_rotate_collision+0x622>
			break;
		case 5: // makeS
			if(version == 0)
    19a6:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <version>
    19aa:	90 91 51 01 	lds	r25, 0x0151	; 0x800151 <version+0x1>
    19ae:	89 2b       	or	r24, r25
    19b0:	a9 f5       	brne	.+106    	; 0x1a1c <check_rotate_collision+0x550>
			return (i == 16 || board[i][j+1] || board[i+1][j+1]) ;
    19b2:	20 31       	cpi	r18, 0x10	; 16
    19b4:	31 05       	cpc	r19, r1
    19b6:	09 f4       	brne	.+2      	; 0x19ba <check_rotate_collision+0x4ee>
    19b8:	92 c0       	rjmp	.+292    	; 0x1ade <check_rotate_collision+0x612>
    19ba:	6f 5f       	subi	r22, 0xFF	; 255
    19bc:	7f 4f       	sbci	r23, 0xFF	; 255
    19be:	f9 01       	movw	r30, r18
    19c0:	ee 0f       	add	r30, r30
    19c2:	ff 1f       	adc	r31, r31
    19c4:	ee 0f       	add	r30, r30
    19c6:	ff 1f       	adc	r31, r31
    19c8:	ee 0f       	add	r30, r30
    19ca:	ff 1f       	adc	r31, r31
    19cc:	e2 0f       	add	r30, r18
    19ce:	f3 1f       	adc	r31, r19
    19d0:	e6 0f       	add	r30, r22
    19d2:	f7 1f       	adc	r31, r23
    19d4:	ee 0f       	add	r30, r30
    19d6:	ff 1f       	adc	r31, r31
    19d8:	ec 5a       	subi	r30, 0xAC	; 172
    19da:	fe 4f       	sbci	r31, 0xFE	; 254
    19dc:	80 81       	ld	r24, Z
    19de:	91 81       	ldd	r25, Z+1	; 0x01
    19e0:	89 2b       	or	r24, r25
    19e2:	09 f0       	breq	.+2      	; 0x19e6 <check_rotate_collision+0x51a>
    19e4:	7f c0       	rjmp	.+254    	; 0x1ae4 <check_rotate_collision+0x618>
    19e6:	2f 5f       	subi	r18, 0xFF	; 255
    19e8:	3f 4f       	sbci	r19, 0xFF	; 255
    19ea:	f9 01       	movw	r30, r18
    19ec:	ee 0f       	add	r30, r30
    19ee:	ff 1f       	adc	r31, r31
    19f0:	ee 0f       	add	r30, r30
    19f2:	ff 1f       	adc	r31, r31
    19f4:	ee 0f       	add	r30, r30
    19f6:	ff 1f       	adc	r31, r31
    19f8:	2e 0f       	add	r18, r30
    19fa:	3f 1f       	adc	r19, r31
    19fc:	62 0f       	add	r22, r18
    19fe:	73 1f       	adc	r23, r19
    1a00:	fb 01       	movw	r30, r22
    1a02:	ee 0f       	add	r30, r30
    1a04:	ff 1f       	adc	r31, r31
    1a06:	ec 5a       	subi	r30, 0xAC	; 172
    1a08:	fe 4f       	sbci	r31, 0xFE	; 254
    1a0a:	40 81       	ld	r20, Z
    1a0c:	51 81       	ldd	r21, Z+1	; 0x01
    1a0e:	41 15       	cp	r20, r1
    1a10:	51 05       	cpc	r21, r1
    1a12:	09 f4       	brne	.+2      	; 0x1a16 <check_rotate_collision+0x54a>
    1a14:	6c c0       	rjmp	.+216    	; 0x1aee <check_rotate_collision+0x622>
    1a16:	41 e0       	ldi	r20, 0x01	; 1
    1a18:	50 e0       	ldi	r21, 0x00	; 0
    1a1a:	69 c0       	rjmp	.+210    	; 0x1aee <check_rotate_collision+0x622>
			else return (board[i][j-1] || board[i-1][j+1]) ;
    1a1c:	f9 01       	movw	r30, r18
    1a1e:	ee 0f       	add	r30, r30
    1a20:	ff 1f       	adc	r31, r31
    1a22:	ee 0f       	add	r30, r30
    1a24:	ff 1f       	adc	r31, r31
    1a26:	ee 0f       	add	r30, r30
    1a28:	ff 1f       	adc	r31, r31
    1a2a:	e2 0f       	add	r30, r18
    1a2c:	f3 1f       	adc	r31, r19
    1a2e:	cb 01       	movw	r24, r22
    1a30:	01 97       	sbiw	r24, 0x01	; 1
    1a32:	e8 0f       	add	r30, r24
    1a34:	f9 1f       	adc	r31, r25
    1a36:	ee 0f       	add	r30, r30
    1a38:	ff 1f       	adc	r31, r31
    1a3a:	ec 5a       	subi	r30, 0xAC	; 172
    1a3c:	fe 4f       	sbci	r31, 0xFE	; 254
    1a3e:	80 81       	ld	r24, Z
    1a40:	91 81       	ldd	r25, Z+1	; 0x01
    1a42:	89 2b       	or	r24, r25
    1a44:	09 f0       	breq	.+2      	; 0x1a48 <check_rotate_collision+0x57c>
    1a46:	51 c0       	rjmp	.+162    	; 0x1aea <check_rotate_collision+0x61e>
    1a48:	21 50       	subi	r18, 0x01	; 1
    1a4a:	31 09       	sbc	r19, r1
    1a4c:	6f 5f       	subi	r22, 0xFF	; 255
    1a4e:	7f 4f       	sbci	r23, 0xFF	; 255
    1a50:	c9 01       	movw	r24, r18
    1a52:	88 0f       	add	r24, r24
    1a54:	99 1f       	adc	r25, r25
    1a56:	88 0f       	add	r24, r24
    1a58:	99 1f       	adc	r25, r25
    1a5a:	88 0f       	add	r24, r24
    1a5c:	99 1f       	adc	r25, r25
    1a5e:	28 0f       	add	r18, r24
    1a60:	39 1f       	adc	r19, r25
    1a62:	26 0f       	add	r18, r22
    1a64:	37 1f       	adc	r19, r23
    1a66:	22 0f       	add	r18, r18
    1a68:	33 1f       	adc	r19, r19
    1a6a:	f9 01       	movw	r30, r18
    1a6c:	ec 5a       	subi	r30, 0xAC	; 172
    1a6e:	fe 4f       	sbci	r31, 0xFE	; 254
    1a70:	40 81       	ld	r20, Z
    1a72:	51 81       	ldd	r21, Z+1	; 0x01
    1a74:	41 15       	cp	r20, r1
    1a76:	51 05       	cpc	r21, r1
    1a78:	d1 f1       	breq	.+116    	; 0x1aee <check_rotate_collision+0x622>
    1a7a:	41 e0       	ldi	r20, 0x01	; 1
    1a7c:	50 e0       	ldi	r21, 0x00	; 0
    1a7e:	37 c0       	rjmp	.+110    	; 0x1aee <check_rotate_collision+0x622>
			break;
	}
}
    1a80:	08 95       	ret
				return (i == 17 || board[i+1][j]) ;
			}
			else return (board[i][j+1] || board[i][j-1]);
			break;
		case 3: // makeSquare
			return 1;
    1a82:	41 e0       	ldi	r20, 0x01	; 1
    1a84:	50 e0       	ldi	r21, 0x00	; 0
    1a86:	33 c0       	rjmp	.+102    	; 0x1aee <check_rotate_collision+0x622>
				case 0:
					return (i == 17 || board[i+1][j]) ;
				case 1:
					return board[i][j+1] ;
				case 2:
					return 0 ;
    1a88:	40 e0       	ldi	r20, 0x00	; 0
    1a8a:	50 e0       	ldi	r21, 0x00	; 0
    1a8c:	30 c0       	rjmp	.+96     	; 0x1aee <check_rotate_collision+0x622>
	int j = curY;
	switch(type){
		case 1: // makeT
			switch(version) {
				case 0:
					return (i == 17 || board[i+1][j]) ;
    1a8e:	ac 01       	movw	r20, r24
    1a90:	2e c0       	rjmp	.+92     	; 0x1aee <check_rotate_collision+0x622>
					return board[i][j-1];
			}
			break;
		case 2: // makeBAR
			if(version == 0){
				return (i == 17 || board[i+1][j]) ;
    1a92:	41 e0       	ldi	r20, 0x01	; 1
    1a94:	50 e0       	ldi	r21, 0x00	; 0
    1a96:	2b c0       	rjmp	.+86     	; 0x1aee <check_rotate_collision+0x622>
			}
			else return (board[i][j+1] || board[i][j-1]);
    1a98:	41 e0       	ldi	r20, 0x01	; 1
    1a9a:	50 e0       	ldi	r21, 0x00	; 0
    1a9c:	28 c0       	rjmp	.+80     	; 0x1aee <check_rotate_collision+0x622>
			return 1;
			break;
		case 4: // makeL
			switch(version) {
				case 0:
				return (board[i][j-1] || board[i][j+1] || board[i+1][j+1]);
    1a9e:	41 e0       	ldi	r20, 0x01	; 1
    1aa0:	50 e0       	ldi	r21, 0x00	; 0
    1aa2:	25 c0       	rjmp	.+74     	; 0x1aee <check_rotate_collision+0x622>
    1aa4:	41 e0       	ldi	r20, 0x01	; 1
    1aa6:	50 e0       	ldi	r21, 0x00	; 0
    1aa8:	22 c0       	rjmp	.+68     	; 0x1aee <check_rotate_collision+0x622>
				case 1:
				return (board[i+1][j] || board[i-1][j] || board[i-1][j+1]);
    1aaa:	ac 01       	movw	r20, r24
    1aac:	20 c0       	rjmp	.+64     	; 0x1aee <check_rotate_collision+0x622>
				case 2:
				return (board[i][j+1] || board[i-1][j-1] || board[i][j-1]);
    1aae:	41 e0       	ldi	r20, 0x01	; 1
    1ab0:	50 e0       	ldi	r21, 0x00	; 0
    1ab2:	1d c0       	rjmp	.+58     	; 0x1aee <check_rotate_collision+0x622>
    1ab4:	41 e0       	ldi	r20, 0x01	; 1
    1ab6:	50 e0       	ldi	r21, 0x00	; 0
    1ab8:	1a c0       	rjmp	.+52     	; 0x1aee <check_rotate_collision+0x622>
				case 3:
				return (i == 17 || board[i+1][j-1] || board[i+1][j] || board[i-1][j]) ;
    1aba:	41 e0       	ldi	r20, 0x01	; 1
    1abc:	50 e0       	ldi	r21, 0x00	; 0
    1abe:	17 c0       	rjmp	.+46     	; 0x1aee <check_rotate_collision+0x622>
    1ac0:	41 e0       	ldi	r20, 0x01	; 1
    1ac2:	50 e0       	ldi	r21, 0x00	; 0
    1ac4:	14 c0       	rjmp	.+40     	; 0x1aee <check_rotate_collision+0x622>
    1ac6:	41 e0       	ldi	r20, 0x01	; 1
    1ac8:	50 e0       	ldi	r21, 0x00	; 0
    1aca:	11 c0       	rjmp	.+34     	; 0x1aee <check_rotate_collision+0x622>
			}
			break;
		case 6: // makeZ
			if(version == 0)
			return (i == 16 || board[i+1][j] || board[i-1][j+1]);
    1acc:	41 e0       	ldi	r20, 0x01	; 1
    1ace:	50 e0       	ldi	r21, 0x00	; 0
    1ad0:	0e c0       	rjmp	.+28     	; 0x1aee <check_rotate_collision+0x622>
    1ad2:	41 e0       	ldi	r20, 0x01	; 1
    1ad4:	50 e0       	ldi	r21, 0x00	; 0
    1ad6:	0b c0       	rjmp	.+22     	; 0x1aee <check_rotate_collision+0x622>
			else return (board[i-1][j] || board[i-1][j-1]);
    1ad8:	41 e0       	ldi	r20, 0x01	; 1
    1ada:	50 e0       	ldi	r21, 0x00	; 0
    1adc:	08 c0       	rjmp	.+16     	; 0x1aee <check_rotate_collision+0x622>
			break;
		case 5: // makeS
			if(version == 0)
			return (i == 16 || board[i][j+1] || board[i+1][j+1]) ;
    1ade:	41 e0       	ldi	r20, 0x01	; 1
    1ae0:	50 e0       	ldi	r21, 0x00	; 0
    1ae2:	05 c0       	rjmp	.+10     	; 0x1aee <check_rotate_collision+0x622>
    1ae4:	41 e0       	ldi	r20, 0x01	; 1
    1ae6:	50 e0       	ldi	r21, 0x00	; 0
    1ae8:	02 c0       	rjmp	.+4      	; 0x1aee <check_rotate_collision+0x622>
			else return (board[i][j-1] || board[i-1][j+1]) ;
    1aea:	41 e0       	ldi	r20, 0x01	; 1
    1aec:	50 e0       	ldi	r21, 0x00	; 0
    1aee:	84 2f       	mov	r24, r20
    1af0:	95 2f       	mov	r25, r21
			break;
	}
}
    1af2:	08 95       	ret

00001af4 <checkbottom_collision>:
int checkbottom_collision(){
	int i = curX;
    1af4:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <curX>
    1af8:	90 91 14 01 	lds	r25, 0x0114	; 0x800114 <curX+0x1>
	int j = curY;
    1afc:	40 91 11 01 	lds	r20, 0x0111	; 0x800111 <curY>
    1b00:	50 91 12 01 	lds	r21, 0x0112	; 0x800112 <curY+0x1>
	switch(type){
    1b04:	20 91 52 01 	lds	r18, 0x0152	; 0x800152 <type>
    1b08:	30 91 53 01 	lds	r19, 0x0153	; 0x800153 <type+0x1>
    1b0c:	23 30       	cpi	r18, 0x03	; 3
    1b0e:	31 05       	cpc	r19, r1
    1b10:	09 f4       	brne	.+2      	; 0x1b14 <checkbottom_collision+0x20>
    1b12:	93 c1       	rjmp	.+806    	; 0x1e3a <checkbottom_collision+0x346>
    1b14:	44 f4       	brge	.+16     	; 0x1b26 <checkbottom_collision+0x32>
    1b16:	21 30       	cpi	r18, 0x01	; 1
    1b18:	31 05       	cpc	r19, r1
    1b1a:	81 f0       	breq	.+32     	; 0x1b3c <checkbottom_collision+0x48>
    1b1c:	22 30       	cpi	r18, 0x02	; 2
    1b1e:	31 05       	cpc	r19, r1
    1b20:	09 f4       	brne	.+2      	; 0x1b24 <checkbottom_collision+0x30>
    1b22:	1c c1       	rjmp	.+568    	; 0x1d5c <checkbottom_collision+0x268>
    1b24:	e5 c3       	rjmp	.+1994   	; 0x22f0 <checkbottom_collision+0x7fc>
    1b26:	25 30       	cpi	r18, 0x05	; 5
    1b28:	31 05       	cpc	r19, r1
    1b2a:	09 f4       	brne	.+2      	; 0x1b2e <checkbottom_collision+0x3a>
    1b2c:	ce c2       	rjmp	.+1436   	; 0x20ca <checkbottom_collision+0x5d6>
    1b2e:	0c f4       	brge	.+2      	; 0x1b32 <checkbottom_collision+0x3e>
    1b30:	b8 c1       	rjmp	.+880    	; 0x1ea2 <checkbottom_collision+0x3ae>
    1b32:	26 30       	cpi	r18, 0x06	; 6
    1b34:	31 05       	cpc	r19, r1
    1b36:	09 f4       	brne	.+2      	; 0x1b3a <checkbottom_collision+0x46>
    1b38:	50 c3       	rjmp	.+1696   	; 0x21da <checkbottom_collision+0x6e6>
    1b3a:	da c3       	rjmp	.+1972   	; 0x22f0 <checkbottom_collision+0x7fc>
		case 1: // makeT
			switch(version) {
    1b3c:	60 91 50 01 	lds	r22, 0x0150	; 0x800150 <version>
    1b40:	70 91 51 01 	lds	r23, 0x0151	; 0x800151 <version+0x1>
    1b44:	61 30       	cpi	r22, 0x01	; 1
    1b46:	71 05       	cpc	r23, r1
    1b48:	09 f4       	brne	.+2      	; 0x1b4c <checkbottom_collision+0x58>
    1b4a:	55 c0       	rjmp	.+170    	; 0x1bf6 <checkbottom_collision+0x102>
    1b4c:	1c f4       	brge	.+6      	; 0x1b54 <checkbottom_collision+0x60>
    1b4e:	67 2b       	or	r22, r23
    1b50:	51 f0       	breq	.+20     	; 0x1b66 <checkbottom_collision+0x72>
    1b52:	ce c3       	rjmp	.+1948   	; 0x22f0 <checkbottom_collision+0x7fc>
    1b54:	62 30       	cpi	r22, 0x02	; 2
    1b56:	71 05       	cpc	r23, r1
    1b58:	09 f4       	brne	.+2      	; 0x1b5c <checkbottom_collision+0x68>
    1b5a:	83 c0       	rjmp	.+262    	; 0x1c62 <checkbottom_collision+0x16e>
    1b5c:	63 30       	cpi	r22, 0x03	; 3
    1b5e:	71 05       	cpc	r23, r1
    1b60:	09 f4       	brne	.+2      	; 0x1b64 <checkbottom_collision+0x70>
    1b62:	c9 c0       	rjmp	.+402    	; 0x1cf6 <checkbottom_collision+0x202>
    1b64:	c5 c3       	rjmp	.+1930   	; 0x22f0 <checkbottom_collision+0x7fc>
				case 0:
				return (i == 17 || board[i+1][j+1] || board[i+1][j-1] || board[i+1][j]) ;
    1b66:	81 31       	cpi	r24, 0x11	; 17
    1b68:	91 05       	cpc	r25, r1
    1b6a:	09 f4       	brne	.+2      	; 0x1b6e <checkbottom_collision+0x7a>
    1b6c:	12 c4       	rjmp	.+2084   	; 0x2392 <checkbottom_collision+0x89e>
    1b6e:	01 96       	adiw	r24, 0x01	; 1
    1b70:	fc 01       	movw	r30, r24
    1b72:	ee 0f       	add	r30, r30
    1b74:	ff 1f       	adc	r31, r31
    1b76:	ee 0f       	add	r30, r30
    1b78:	ff 1f       	adc	r31, r31
    1b7a:	ee 0f       	add	r30, r30
    1b7c:	ff 1f       	adc	r31, r31
    1b7e:	e8 0f       	add	r30, r24
    1b80:	f9 1f       	adc	r31, r25
    1b82:	ba 01       	movw	r22, r20
    1b84:	6f 5f       	subi	r22, 0xFF	; 255
    1b86:	7f 4f       	sbci	r23, 0xFF	; 255
    1b88:	e6 0f       	add	r30, r22
    1b8a:	f7 1f       	adc	r31, r23
    1b8c:	ee 0f       	add	r30, r30
    1b8e:	ff 1f       	adc	r31, r31
    1b90:	ec 5a       	subi	r30, 0xAC	; 172
    1b92:	fe 4f       	sbci	r31, 0xFE	; 254
    1b94:	60 81       	ld	r22, Z
    1b96:	71 81       	ldd	r23, Z+1	; 0x01
    1b98:	67 2b       	or	r22, r23
    1b9a:	09 f0       	breq	.+2      	; 0x1b9e <checkbottom_collision+0xaa>
    1b9c:	fa c3       	rjmp	.+2036   	; 0x2392 <checkbottom_collision+0x89e>
    1b9e:	fc 01       	movw	r30, r24
    1ba0:	ee 0f       	add	r30, r30
    1ba2:	ff 1f       	adc	r31, r31
    1ba4:	ee 0f       	add	r30, r30
    1ba6:	ff 1f       	adc	r31, r31
    1ba8:	ee 0f       	add	r30, r30
    1baa:	ff 1f       	adc	r31, r31
    1bac:	e8 0f       	add	r30, r24
    1bae:	f9 1f       	adc	r31, r25
    1bb0:	ba 01       	movw	r22, r20
    1bb2:	61 50       	subi	r22, 0x01	; 1
    1bb4:	71 09       	sbc	r23, r1
    1bb6:	e6 0f       	add	r30, r22
    1bb8:	f7 1f       	adc	r31, r23
    1bba:	ee 0f       	add	r30, r30
    1bbc:	ff 1f       	adc	r31, r31
    1bbe:	ec 5a       	subi	r30, 0xAC	; 172
    1bc0:	fe 4f       	sbci	r31, 0xFE	; 254
    1bc2:	60 81       	ld	r22, Z
    1bc4:	71 81       	ldd	r23, Z+1	; 0x01
    1bc6:	67 2b       	or	r22, r23
    1bc8:	09 f0       	breq	.+2      	; 0x1bcc <checkbottom_collision+0xd8>
    1bca:	e3 c3       	rjmp	.+1990   	; 0x2392 <checkbottom_collision+0x89e>
    1bcc:	fc 01       	movw	r30, r24
    1bce:	ee 0f       	add	r30, r30
    1bd0:	ff 1f       	adc	r31, r31
    1bd2:	ee 0f       	add	r30, r30
    1bd4:	ff 1f       	adc	r31, r31
    1bd6:	ee 0f       	add	r30, r30
    1bd8:	ff 1f       	adc	r31, r31
    1bda:	e8 0f       	add	r30, r24
    1bdc:	f9 1f       	adc	r31, r25
    1bde:	e4 0f       	add	r30, r20
    1be0:	f5 1f       	adc	r31, r21
    1be2:	ee 0f       	add	r30, r30
    1be4:	ff 1f       	adc	r31, r31
    1be6:	ec 5a       	subi	r30, 0xAC	; 172
    1be8:	fe 4f       	sbci	r31, 0xFE	; 254
    1bea:	80 81       	ld	r24, Z
    1bec:	91 81       	ldd	r25, Z+1	; 0x01
    1bee:	00 97       	sbiw	r24, 0x00	; 0
    1bf0:	09 f4       	brne	.+2      	; 0x1bf4 <checkbottom_collision+0x100>
    1bf2:	7f c3       	rjmp	.+1790   	; 0x22f2 <checkbottom_collision+0x7fe>
    1bf4:	ce c3       	rjmp	.+1948   	; 0x2392 <checkbottom_collision+0x89e>
				case 1:
				return (i == 16 || board[i+1][j-1] || board[i+2][j]) ;
    1bf6:	80 31       	cpi	r24, 0x10	; 16
    1bf8:	91 05       	cpc	r25, r1
    1bfa:	09 f4       	brne	.+2      	; 0x1bfe <checkbottom_collision+0x10a>
    1bfc:	7c c3       	rjmp	.+1784   	; 0x22f6 <checkbottom_collision+0x802>
    1bfe:	9c 01       	movw	r18, r24
    1c00:	2f 5f       	subi	r18, 0xFF	; 255
    1c02:	3f 4f       	sbci	r19, 0xFF	; 255
    1c04:	f9 01       	movw	r30, r18
    1c06:	ee 0f       	add	r30, r30
    1c08:	ff 1f       	adc	r31, r31
    1c0a:	ee 0f       	add	r30, r30
    1c0c:	ff 1f       	adc	r31, r31
    1c0e:	ee 0f       	add	r30, r30
    1c10:	ff 1f       	adc	r31, r31
    1c12:	e2 0f       	add	r30, r18
    1c14:	f3 1f       	adc	r31, r19
    1c16:	9a 01       	movw	r18, r20
    1c18:	21 50       	subi	r18, 0x01	; 1
    1c1a:	31 09       	sbc	r19, r1
    1c1c:	e2 0f       	add	r30, r18
    1c1e:	f3 1f       	adc	r31, r19
    1c20:	ee 0f       	add	r30, r30
    1c22:	ff 1f       	adc	r31, r31
    1c24:	ec 5a       	subi	r30, 0xAC	; 172
    1c26:	fe 4f       	sbci	r31, 0xFE	; 254
    1c28:	20 81       	ld	r18, Z
    1c2a:	31 81       	ldd	r19, Z+1	; 0x01
    1c2c:	23 2b       	or	r18, r19
    1c2e:	09 f0       	breq	.+2      	; 0x1c32 <checkbottom_collision+0x13e>
    1c30:	64 c3       	rjmp	.+1736   	; 0x22fa <checkbottom_collision+0x806>
    1c32:	02 96       	adiw	r24, 0x02	; 2
    1c34:	fc 01       	movw	r30, r24
    1c36:	ee 0f       	add	r30, r30
    1c38:	ff 1f       	adc	r31, r31
    1c3a:	ee 0f       	add	r30, r30
    1c3c:	ff 1f       	adc	r31, r31
    1c3e:	ee 0f       	add	r30, r30
    1c40:	ff 1f       	adc	r31, r31
    1c42:	e8 0f       	add	r30, r24
    1c44:	f9 1f       	adc	r31, r25
    1c46:	e4 0f       	add	r30, r20
    1c48:	f5 1f       	adc	r31, r21
    1c4a:	ee 0f       	add	r30, r30
    1c4c:	ff 1f       	adc	r31, r31
    1c4e:	ec 5a       	subi	r30, 0xAC	; 172
    1c50:	fe 4f       	sbci	r31, 0xFE	; 254
    1c52:	20 81       	ld	r18, Z
    1c54:	31 81       	ldd	r19, Z+1	; 0x01
    1c56:	21 15       	cp	r18, r1
    1c58:	31 05       	cpc	r19, r1
    1c5a:	09 f4       	brne	.+2      	; 0x1c5e <checkbottom_collision+0x16a>
    1c5c:	9a c3       	rjmp	.+1844   	; 0x2392 <checkbottom_collision+0x89e>
    1c5e:	9b 01       	movw	r18, r22
    1c60:	98 c3       	rjmp	.+1840   	; 0x2392 <checkbottom_collision+0x89e>
				case 2:
				return(i == 16 || board[i+1][j+1] || board[i+1][j-1] || board[i+2][j]) ;
    1c62:	80 31       	cpi	r24, 0x10	; 16
    1c64:	91 05       	cpc	r25, r1
    1c66:	09 f4       	brne	.+2      	; 0x1c6a <checkbottom_collision+0x176>
    1c68:	94 c3       	rjmp	.+1832   	; 0x2392 <checkbottom_collision+0x89e>
    1c6a:	dc 01       	movw	r26, r24
    1c6c:	11 96       	adiw	r26, 0x01	; 1
    1c6e:	fd 01       	movw	r30, r26
    1c70:	ee 0f       	add	r30, r30
    1c72:	ff 1f       	adc	r31, r31
    1c74:	ee 0f       	add	r30, r30
    1c76:	ff 1f       	adc	r31, r31
    1c78:	ee 0f       	add	r30, r30
    1c7a:	ff 1f       	adc	r31, r31
    1c7c:	ea 0f       	add	r30, r26
    1c7e:	fb 1f       	adc	r31, r27
    1c80:	ba 01       	movw	r22, r20
    1c82:	6f 5f       	subi	r22, 0xFF	; 255
    1c84:	7f 4f       	sbci	r23, 0xFF	; 255
    1c86:	e6 0f       	add	r30, r22
    1c88:	f7 1f       	adc	r31, r23
    1c8a:	ee 0f       	add	r30, r30
    1c8c:	ff 1f       	adc	r31, r31
    1c8e:	ec 5a       	subi	r30, 0xAC	; 172
    1c90:	fe 4f       	sbci	r31, 0xFE	; 254
    1c92:	60 81       	ld	r22, Z
    1c94:	71 81       	ldd	r23, Z+1	; 0x01
    1c96:	67 2b       	or	r22, r23
    1c98:	09 f0       	breq	.+2      	; 0x1c9c <checkbottom_collision+0x1a8>
    1c9a:	7b c3       	rjmp	.+1782   	; 0x2392 <checkbottom_collision+0x89e>
    1c9c:	fd 01       	movw	r30, r26
    1c9e:	ee 0f       	add	r30, r30
    1ca0:	ff 1f       	adc	r31, r31
    1ca2:	ee 0f       	add	r30, r30
    1ca4:	ff 1f       	adc	r31, r31
    1ca6:	ee 0f       	add	r30, r30
    1ca8:	ff 1f       	adc	r31, r31
    1caa:	ea 0f       	add	r30, r26
    1cac:	fb 1f       	adc	r31, r27
    1cae:	ba 01       	movw	r22, r20
    1cb0:	61 50       	subi	r22, 0x01	; 1
    1cb2:	71 09       	sbc	r23, r1
    1cb4:	e6 0f       	add	r30, r22
    1cb6:	f7 1f       	adc	r31, r23
    1cb8:	ee 0f       	add	r30, r30
    1cba:	ff 1f       	adc	r31, r31
    1cbc:	ec 5a       	subi	r30, 0xAC	; 172
    1cbe:	fe 4f       	sbci	r31, 0xFE	; 254
    1cc0:	60 81       	ld	r22, Z
    1cc2:	71 81       	ldd	r23, Z+1	; 0x01
    1cc4:	67 2b       	or	r22, r23
    1cc6:	09 f0       	breq	.+2      	; 0x1cca <checkbottom_collision+0x1d6>
    1cc8:	64 c3       	rjmp	.+1736   	; 0x2392 <checkbottom_collision+0x89e>
    1cca:	02 96       	adiw	r24, 0x02	; 2
    1ccc:	fc 01       	movw	r30, r24
    1cce:	ee 0f       	add	r30, r30
    1cd0:	ff 1f       	adc	r31, r31
    1cd2:	ee 0f       	add	r30, r30
    1cd4:	ff 1f       	adc	r31, r31
    1cd6:	ee 0f       	add	r30, r30
    1cd8:	ff 1f       	adc	r31, r31
    1cda:	e8 0f       	add	r30, r24
    1cdc:	f9 1f       	adc	r31, r25
    1cde:	e4 0f       	add	r30, r20
    1ce0:	f5 1f       	adc	r31, r21
    1ce2:	ee 0f       	add	r30, r30
    1ce4:	ff 1f       	adc	r31, r31
    1ce6:	ec 5a       	subi	r30, 0xAC	; 172
    1ce8:	fe 4f       	sbci	r31, 0xFE	; 254
    1cea:	80 81       	ld	r24, Z
    1cec:	91 81       	ldd	r25, Z+1	; 0x01
    1cee:	00 97       	sbiw	r24, 0x00	; 0
    1cf0:	09 f4       	brne	.+2      	; 0x1cf4 <checkbottom_collision+0x200>
    1cf2:	05 c3       	rjmp	.+1546   	; 0x22fe <checkbottom_collision+0x80a>
    1cf4:	4e c3       	rjmp	.+1692   	; 0x2392 <checkbottom_collision+0x89e>
				case 3:
				return (i == 16|| board[i+2][j] ||board[i+1][j+1]) ;
    1cf6:	80 31       	cpi	r24, 0x10	; 16
    1cf8:	91 05       	cpc	r25, r1
    1cfa:	09 f4       	brne	.+2      	; 0x1cfe <checkbottom_collision+0x20a>
    1cfc:	4a c3       	rjmp	.+1684   	; 0x2392 <checkbottom_collision+0x89e>
    1cfe:	bc 01       	movw	r22, r24
    1d00:	6e 5f       	subi	r22, 0xFE	; 254
    1d02:	7f 4f       	sbci	r23, 0xFF	; 255
    1d04:	fb 01       	movw	r30, r22
    1d06:	ee 0f       	add	r30, r30
    1d08:	ff 1f       	adc	r31, r31
    1d0a:	ee 0f       	add	r30, r30
    1d0c:	ff 1f       	adc	r31, r31
    1d0e:	ee 0f       	add	r30, r30
    1d10:	ff 1f       	adc	r31, r31
    1d12:	e6 0f       	add	r30, r22
    1d14:	f7 1f       	adc	r31, r23
    1d16:	e4 0f       	add	r30, r20
    1d18:	f5 1f       	adc	r31, r21
    1d1a:	ee 0f       	add	r30, r30
    1d1c:	ff 1f       	adc	r31, r31
    1d1e:	ec 5a       	subi	r30, 0xAC	; 172
    1d20:	fe 4f       	sbci	r31, 0xFE	; 254
    1d22:	60 81       	ld	r22, Z
    1d24:	71 81       	ldd	r23, Z+1	; 0x01
    1d26:	67 2b       	or	r22, r23
    1d28:	09 f0       	breq	.+2      	; 0x1d2c <checkbottom_collision+0x238>
    1d2a:	33 c3       	rjmp	.+1638   	; 0x2392 <checkbottom_collision+0x89e>
    1d2c:	01 96       	adiw	r24, 0x01	; 1
    1d2e:	4f 5f       	subi	r20, 0xFF	; 255
    1d30:	5f 4f       	sbci	r21, 0xFF	; 255
    1d32:	fc 01       	movw	r30, r24
    1d34:	ee 0f       	add	r30, r30
    1d36:	ff 1f       	adc	r31, r31
    1d38:	ee 0f       	add	r30, r30
    1d3a:	ff 1f       	adc	r31, r31
    1d3c:	ee 0f       	add	r30, r30
    1d3e:	ff 1f       	adc	r31, r31
    1d40:	e8 0f       	add	r30, r24
    1d42:	f9 1f       	adc	r31, r25
    1d44:	e4 0f       	add	r30, r20
    1d46:	f5 1f       	adc	r31, r21
    1d48:	ee 0f       	add	r30, r30
    1d4a:	ff 1f       	adc	r31, r31
    1d4c:	ec 5a       	subi	r30, 0xAC	; 172
    1d4e:	fe 4f       	sbci	r31, 0xFE	; 254
    1d50:	80 81       	ld	r24, Z
    1d52:	91 81       	ldd	r25, Z+1	; 0x01
    1d54:	00 97       	sbiw	r24, 0x00	; 0
    1d56:	09 f4       	brne	.+2      	; 0x1d5a <checkbottom_collision+0x266>
    1d58:	d4 c2       	rjmp	.+1448   	; 0x2302 <checkbottom_collision+0x80e>
    1d5a:	1b c3       	rjmp	.+1590   	; 0x2392 <checkbottom_collision+0x89e>
			}
			break;
		case 2: // makeBAR
			if(version == 0){
    1d5c:	20 91 50 01 	lds	r18, 0x0150	; 0x800150 <version>
    1d60:	30 91 51 01 	lds	r19, 0x0151	; 0x800151 <version+0x1>
    1d64:	23 2b       	or	r18, r19
    1d66:	09 f0       	breq	.+2      	; 0x1d6a <checkbottom_collision+0x276>
    1d68:	4b c0       	rjmp	.+150    	; 0x1e00 <checkbottom_collision+0x30c>
				return (i == 17 || board[i+1][j+1] || board[i+1][j-1] || board[i+1][j]) ;
    1d6a:	81 31       	cpi	r24, 0x11	; 17
    1d6c:	91 05       	cpc	r25, r1
    1d6e:	09 f4       	brne	.+2      	; 0x1d72 <checkbottom_collision+0x27e>
    1d70:	ca c2       	rjmp	.+1428   	; 0x2306 <checkbottom_collision+0x812>
    1d72:	01 96       	adiw	r24, 0x01	; 1
    1d74:	fc 01       	movw	r30, r24
    1d76:	ee 0f       	add	r30, r30
    1d78:	ff 1f       	adc	r31, r31
    1d7a:	ee 0f       	add	r30, r30
    1d7c:	ff 1f       	adc	r31, r31
    1d7e:	ee 0f       	add	r30, r30
    1d80:	ff 1f       	adc	r31, r31
    1d82:	e8 0f       	add	r30, r24
    1d84:	f9 1f       	adc	r31, r25
    1d86:	9a 01       	movw	r18, r20
    1d88:	2f 5f       	subi	r18, 0xFF	; 255
    1d8a:	3f 4f       	sbci	r19, 0xFF	; 255
    1d8c:	e2 0f       	add	r30, r18
    1d8e:	f3 1f       	adc	r31, r19
    1d90:	ee 0f       	add	r30, r30
    1d92:	ff 1f       	adc	r31, r31
    1d94:	ec 5a       	subi	r30, 0xAC	; 172
    1d96:	fe 4f       	sbci	r31, 0xFE	; 254
    1d98:	20 81       	ld	r18, Z
    1d9a:	31 81       	ldd	r19, Z+1	; 0x01
    1d9c:	23 2b       	or	r18, r19
    1d9e:	09 f0       	breq	.+2      	; 0x1da2 <checkbottom_collision+0x2ae>
    1da0:	b5 c2       	rjmp	.+1386   	; 0x230c <checkbottom_collision+0x818>
    1da2:	fc 01       	movw	r30, r24
    1da4:	ee 0f       	add	r30, r30
    1da6:	ff 1f       	adc	r31, r31
    1da8:	ee 0f       	add	r30, r30
    1daa:	ff 1f       	adc	r31, r31
    1dac:	ee 0f       	add	r30, r30
    1dae:	ff 1f       	adc	r31, r31
    1db0:	e8 0f       	add	r30, r24
    1db2:	f9 1f       	adc	r31, r25
    1db4:	9a 01       	movw	r18, r20
    1db6:	21 50       	subi	r18, 0x01	; 1
    1db8:	31 09       	sbc	r19, r1
    1dba:	e2 0f       	add	r30, r18
    1dbc:	f3 1f       	adc	r31, r19
    1dbe:	ee 0f       	add	r30, r30
    1dc0:	ff 1f       	adc	r31, r31
    1dc2:	ec 5a       	subi	r30, 0xAC	; 172
    1dc4:	fe 4f       	sbci	r31, 0xFE	; 254
    1dc6:	20 81       	ld	r18, Z
    1dc8:	31 81       	ldd	r19, Z+1	; 0x01
    1dca:	23 2b       	or	r18, r19
    1dcc:	09 f0       	breq	.+2      	; 0x1dd0 <checkbottom_collision+0x2dc>
    1dce:	a1 c2       	rjmp	.+1346   	; 0x2312 <checkbottom_collision+0x81e>
    1dd0:	fc 01       	movw	r30, r24
    1dd2:	ee 0f       	add	r30, r30
    1dd4:	ff 1f       	adc	r31, r31
    1dd6:	ee 0f       	add	r30, r30
    1dd8:	ff 1f       	adc	r31, r31
    1dda:	ee 0f       	add	r30, r30
    1ddc:	ff 1f       	adc	r31, r31
    1dde:	e8 0f       	add	r30, r24
    1de0:	f9 1f       	adc	r31, r25
    1de2:	e4 0f       	add	r30, r20
    1de4:	f5 1f       	adc	r31, r21
    1de6:	ee 0f       	add	r30, r30
    1de8:	ff 1f       	adc	r31, r31
    1dea:	ec 5a       	subi	r30, 0xAC	; 172
    1dec:	fe 4f       	sbci	r31, 0xFE	; 254
    1dee:	20 81       	ld	r18, Z
    1df0:	31 81       	ldd	r19, Z+1	; 0x01
    1df2:	21 15       	cp	r18, r1
    1df4:	31 05       	cpc	r19, r1
    1df6:	09 f4       	brne	.+2      	; 0x1dfa <checkbottom_collision+0x306>
    1df8:	cc c2       	rjmp	.+1432   	; 0x2392 <checkbottom_collision+0x89e>
    1dfa:	21 e0       	ldi	r18, 0x01	; 1
    1dfc:	30 e0       	ldi	r19, 0x00	; 0
    1dfe:	c9 c2       	rjmp	.+1426   	; 0x2392 <checkbottom_collision+0x89e>
			}
			else return (i == 16 || board[i+2][j]) ;
    1e00:	80 31       	cpi	r24, 0x10	; 16
    1e02:	91 05       	cpc	r25, r1
    1e04:	09 f4       	brne	.+2      	; 0x1e08 <checkbottom_collision+0x314>
    1e06:	88 c2       	rjmp	.+1296   	; 0x2318 <checkbottom_collision+0x824>
    1e08:	02 96       	adiw	r24, 0x02	; 2
    1e0a:	fc 01       	movw	r30, r24
    1e0c:	ee 0f       	add	r30, r30
    1e0e:	ff 1f       	adc	r31, r31
    1e10:	ee 0f       	add	r30, r30
    1e12:	ff 1f       	adc	r31, r31
    1e14:	ee 0f       	add	r30, r30
    1e16:	ff 1f       	adc	r31, r31
    1e18:	e8 0f       	add	r30, r24
    1e1a:	f9 1f       	adc	r31, r25
    1e1c:	e4 0f       	add	r30, r20
    1e1e:	f5 1f       	adc	r31, r21
    1e20:	ee 0f       	add	r30, r30
    1e22:	ff 1f       	adc	r31, r31
    1e24:	ec 5a       	subi	r30, 0xAC	; 172
    1e26:	fe 4f       	sbci	r31, 0xFE	; 254
    1e28:	20 81       	ld	r18, Z
    1e2a:	31 81       	ldd	r19, Z+1	; 0x01
    1e2c:	21 15       	cp	r18, r1
    1e2e:	31 05       	cpc	r19, r1
    1e30:	09 f4       	brne	.+2      	; 0x1e34 <checkbottom_collision+0x340>
    1e32:	af c2       	rjmp	.+1374   	; 0x2392 <checkbottom_collision+0x89e>
    1e34:	21 e0       	ldi	r18, 0x01	; 1
    1e36:	30 e0       	ldi	r19, 0x00	; 0
    1e38:	ac c2       	rjmp	.+1368   	; 0x2392 <checkbottom_collision+0x89e>
			break;
		case 3: // makeSquare
			return (i == 17 || board[i+1][j] || board[i+1][j+1]) ;
    1e3a:	81 31       	cpi	r24, 0x11	; 17
    1e3c:	91 05       	cpc	r25, r1
    1e3e:	09 f4       	brne	.+2      	; 0x1e42 <checkbottom_collision+0x34e>
    1e40:	6e c2       	rjmp	.+1244   	; 0x231e <checkbottom_collision+0x82a>
    1e42:	01 96       	adiw	r24, 0x01	; 1
    1e44:	fc 01       	movw	r30, r24
    1e46:	ee 0f       	add	r30, r30
    1e48:	ff 1f       	adc	r31, r31
    1e4a:	ee 0f       	add	r30, r30
    1e4c:	ff 1f       	adc	r31, r31
    1e4e:	ee 0f       	add	r30, r30
    1e50:	ff 1f       	adc	r31, r31
    1e52:	e8 0f       	add	r30, r24
    1e54:	f9 1f       	adc	r31, r25
    1e56:	e4 0f       	add	r30, r20
    1e58:	f5 1f       	adc	r31, r21
    1e5a:	ee 0f       	add	r30, r30
    1e5c:	ff 1f       	adc	r31, r31
    1e5e:	ec 5a       	subi	r30, 0xAC	; 172
    1e60:	fe 4f       	sbci	r31, 0xFE	; 254
    1e62:	20 81       	ld	r18, Z
    1e64:	31 81       	ldd	r19, Z+1	; 0x01
    1e66:	23 2b       	or	r18, r19
    1e68:	09 f0       	breq	.+2      	; 0x1e6c <checkbottom_collision+0x378>
    1e6a:	5c c2       	rjmp	.+1208   	; 0x2324 <checkbottom_collision+0x830>
    1e6c:	fa 01       	movw	r30, r20
    1e6e:	31 96       	adiw	r30, 0x01	; 1
    1e70:	ac 01       	movw	r20, r24
    1e72:	44 0f       	add	r20, r20
    1e74:	55 1f       	adc	r21, r21
    1e76:	44 0f       	add	r20, r20
    1e78:	55 1f       	adc	r21, r21
    1e7a:	44 0f       	add	r20, r20
    1e7c:	55 1f       	adc	r21, r21
    1e7e:	84 0f       	add	r24, r20
    1e80:	95 1f       	adc	r25, r21
    1e82:	8e 0f       	add	r24, r30
    1e84:	9f 1f       	adc	r25, r31
    1e86:	fc 01       	movw	r30, r24
    1e88:	ee 0f       	add	r30, r30
    1e8a:	ff 1f       	adc	r31, r31
    1e8c:	ec 5a       	subi	r30, 0xAC	; 172
    1e8e:	fe 4f       	sbci	r31, 0xFE	; 254
    1e90:	20 81       	ld	r18, Z
    1e92:	31 81       	ldd	r19, Z+1	; 0x01
    1e94:	21 15       	cp	r18, r1
    1e96:	31 05       	cpc	r19, r1
    1e98:	09 f4       	brne	.+2      	; 0x1e9c <checkbottom_collision+0x3a8>
    1e9a:	7b c2       	rjmp	.+1270   	; 0x2392 <checkbottom_collision+0x89e>
    1e9c:	21 e0       	ldi	r18, 0x01	; 1
    1e9e:	30 e0       	ldi	r19, 0x00	; 0
    1ea0:	78 c2       	rjmp	.+1264   	; 0x2392 <checkbottom_collision+0x89e>
			break;
		case 4: // makeL
			switch(version) {
    1ea2:	20 91 50 01 	lds	r18, 0x0150	; 0x800150 <version>
    1ea6:	30 91 51 01 	lds	r19, 0x0151	; 0x800151 <version+0x1>
    1eaa:	21 30       	cpi	r18, 0x01	; 1
    1eac:	31 05       	cpc	r19, r1
    1eae:	09 f4       	brne	.+2      	; 0x1eb2 <checkbottom_collision+0x3be>
    1eb0:	41 c0       	rjmp	.+130    	; 0x1f34 <checkbottom_collision+0x440>
    1eb2:	1c f4       	brge	.+6      	; 0x1eba <checkbottom_collision+0x3c6>
    1eb4:	23 2b       	or	r18, r19
    1eb6:	51 f0       	breq	.+20     	; 0x1ecc <checkbottom_collision+0x3d8>
    1eb8:	1b c2       	rjmp	.+1078   	; 0x22f0 <checkbottom_collision+0x7fc>
    1eba:	22 30       	cpi	r18, 0x02	; 2
    1ebc:	31 05       	cpc	r19, r1
    1ebe:	09 f4       	brne	.+2      	; 0x1ec2 <checkbottom_collision+0x3ce>
    1ec0:	84 c0       	rjmp	.+264    	; 0x1fca <checkbottom_collision+0x4d6>
    1ec2:	23 30       	cpi	r18, 0x03	; 3
    1ec4:	31 05       	cpc	r19, r1
    1ec6:	09 f4       	brne	.+2      	; 0x1eca <checkbottom_collision+0x3d6>
    1ec8:	b5 c0       	rjmp	.+362    	; 0x2034 <checkbottom_collision+0x540>
    1eca:	12 c2       	rjmp	.+1060   	; 0x22f0 <checkbottom_collision+0x7fc>
				case 0:
				return (i == 16 || board[i+2][j-1] || board[i+2][j]) ;
    1ecc:	80 31       	cpi	r24, 0x10	; 16
    1ece:	91 05       	cpc	r25, r1
    1ed0:	09 f4       	brne	.+2      	; 0x1ed4 <checkbottom_collision+0x3e0>
    1ed2:	2b c2       	rjmp	.+1110   	; 0x232a <checkbottom_collision+0x836>
    1ed4:	02 96       	adiw	r24, 0x02	; 2
    1ed6:	fc 01       	movw	r30, r24
    1ed8:	ee 0f       	add	r30, r30
    1eda:	ff 1f       	adc	r31, r31
    1edc:	ee 0f       	add	r30, r30
    1ede:	ff 1f       	adc	r31, r31
    1ee0:	ee 0f       	add	r30, r30
    1ee2:	ff 1f       	adc	r31, r31
    1ee4:	e8 0f       	add	r30, r24
    1ee6:	f9 1f       	adc	r31, r25
    1ee8:	9a 01       	movw	r18, r20
    1eea:	21 50       	subi	r18, 0x01	; 1
    1eec:	31 09       	sbc	r19, r1
    1eee:	e2 0f       	add	r30, r18
    1ef0:	f3 1f       	adc	r31, r19
    1ef2:	ee 0f       	add	r30, r30
    1ef4:	ff 1f       	adc	r31, r31
    1ef6:	ec 5a       	subi	r30, 0xAC	; 172
    1ef8:	fe 4f       	sbci	r31, 0xFE	; 254
    1efa:	20 81       	ld	r18, Z
    1efc:	31 81       	ldd	r19, Z+1	; 0x01
    1efe:	23 2b       	or	r18, r19
    1f00:	09 f0       	breq	.+2      	; 0x1f04 <checkbottom_collision+0x410>
    1f02:	16 c2       	rjmp	.+1068   	; 0x2330 <checkbottom_collision+0x83c>
    1f04:	fc 01       	movw	r30, r24
    1f06:	ee 0f       	add	r30, r30
    1f08:	ff 1f       	adc	r31, r31
    1f0a:	ee 0f       	add	r30, r30
    1f0c:	ff 1f       	adc	r31, r31
    1f0e:	ee 0f       	add	r30, r30
    1f10:	ff 1f       	adc	r31, r31
    1f12:	e8 0f       	add	r30, r24
    1f14:	f9 1f       	adc	r31, r25
    1f16:	e4 0f       	add	r30, r20
    1f18:	f5 1f       	adc	r31, r21
    1f1a:	ee 0f       	add	r30, r30
    1f1c:	ff 1f       	adc	r31, r31
    1f1e:	ec 5a       	subi	r30, 0xAC	; 172
    1f20:	fe 4f       	sbci	r31, 0xFE	; 254
    1f22:	20 81       	ld	r18, Z
    1f24:	31 81       	ldd	r19, Z+1	; 0x01
    1f26:	21 15       	cp	r18, r1
    1f28:	31 05       	cpc	r19, r1
    1f2a:	09 f4       	brne	.+2      	; 0x1f2e <checkbottom_collision+0x43a>
    1f2c:	32 c2       	rjmp	.+1124   	; 0x2392 <checkbottom_collision+0x89e>
    1f2e:	21 e0       	ldi	r18, 0x01	; 1
    1f30:	30 e0       	ldi	r19, 0x00	; 0
    1f32:	2f c2       	rjmp	.+1118   	; 0x2392 <checkbottom_collision+0x89e>
				case 1:
				return (i == 16 || board[i+2][j+1] || board[i+1][j-1] || board[i+1][j]) ;
    1f34:	80 31       	cpi	r24, 0x10	; 16
    1f36:	91 05       	cpc	r25, r1
    1f38:	09 f4       	brne	.+2      	; 0x1f3c <checkbottom_collision+0x448>
    1f3a:	2b c2       	rjmp	.+1110   	; 0x2392 <checkbottom_collision+0x89e>
    1f3c:	bc 01       	movw	r22, r24
    1f3e:	6e 5f       	subi	r22, 0xFE	; 254
    1f40:	7f 4f       	sbci	r23, 0xFF	; 255
    1f42:	fb 01       	movw	r30, r22
    1f44:	ee 0f       	add	r30, r30
    1f46:	ff 1f       	adc	r31, r31
    1f48:	ee 0f       	add	r30, r30
    1f4a:	ff 1f       	adc	r31, r31
    1f4c:	ee 0f       	add	r30, r30
    1f4e:	ff 1f       	adc	r31, r31
    1f50:	e6 0f       	add	r30, r22
    1f52:	f7 1f       	adc	r31, r23
    1f54:	ba 01       	movw	r22, r20
    1f56:	6f 5f       	subi	r22, 0xFF	; 255
    1f58:	7f 4f       	sbci	r23, 0xFF	; 255
    1f5a:	e6 0f       	add	r30, r22
    1f5c:	f7 1f       	adc	r31, r23
    1f5e:	ee 0f       	add	r30, r30
    1f60:	ff 1f       	adc	r31, r31
    1f62:	ec 5a       	subi	r30, 0xAC	; 172
    1f64:	fe 4f       	sbci	r31, 0xFE	; 254
    1f66:	60 81       	ld	r22, Z
    1f68:	71 81       	ldd	r23, Z+1	; 0x01
    1f6a:	67 2b       	or	r22, r23
    1f6c:	09 f0       	breq	.+2      	; 0x1f70 <checkbottom_collision+0x47c>
    1f6e:	11 c2       	rjmp	.+1058   	; 0x2392 <checkbottom_collision+0x89e>
    1f70:	01 96       	adiw	r24, 0x01	; 1
    1f72:	fc 01       	movw	r30, r24
    1f74:	ee 0f       	add	r30, r30
    1f76:	ff 1f       	adc	r31, r31
    1f78:	ee 0f       	add	r30, r30
    1f7a:	ff 1f       	adc	r31, r31
    1f7c:	ee 0f       	add	r30, r30
    1f7e:	ff 1f       	adc	r31, r31
    1f80:	e8 0f       	add	r30, r24
    1f82:	f9 1f       	adc	r31, r25
    1f84:	ba 01       	movw	r22, r20
    1f86:	61 50       	subi	r22, 0x01	; 1
    1f88:	71 09       	sbc	r23, r1
    1f8a:	e6 0f       	add	r30, r22
    1f8c:	f7 1f       	adc	r31, r23
    1f8e:	ee 0f       	add	r30, r30
    1f90:	ff 1f       	adc	r31, r31
    1f92:	ec 5a       	subi	r30, 0xAC	; 172
    1f94:	fe 4f       	sbci	r31, 0xFE	; 254
    1f96:	60 81       	ld	r22, Z
    1f98:	71 81       	ldd	r23, Z+1	; 0x01
    1f9a:	67 2b       	or	r22, r23
    1f9c:	09 f0       	breq	.+2      	; 0x1fa0 <checkbottom_collision+0x4ac>
    1f9e:	f9 c1       	rjmp	.+1010   	; 0x2392 <checkbottom_collision+0x89e>
    1fa0:	fc 01       	movw	r30, r24
    1fa2:	ee 0f       	add	r30, r30
    1fa4:	ff 1f       	adc	r31, r31
    1fa6:	ee 0f       	add	r30, r30
    1fa8:	ff 1f       	adc	r31, r31
    1faa:	ee 0f       	add	r30, r30
    1fac:	ff 1f       	adc	r31, r31
    1fae:	e8 0f       	add	r30, r24
    1fb0:	f9 1f       	adc	r31, r25
    1fb2:	e4 0f       	add	r30, r20
    1fb4:	f5 1f       	adc	r31, r21
    1fb6:	ee 0f       	add	r30, r30
    1fb8:	ff 1f       	adc	r31, r31
    1fba:	ec 5a       	subi	r30, 0xAC	; 172
    1fbc:	fe 4f       	sbci	r31, 0xFE	; 254
    1fbe:	80 81       	ld	r24, Z
    1fc0:	91 81       	ldd	r25, Z+1	; 0x01
    1fc2:	00 97       	sbiw	r24, 0x00	; 0
    1fc4:	09 f4       	brne	.+2      	; 0x1fc8 <checkbottom_collision+0x4d4>
    1fc6:	b7 c1       	rjmp	.+878    	; 0x2336 <checkbottom_collision+0x842>
    1fc8:	e4 c1       	rjmp	.+968    	; 0x2392 <checkbottom_collision+0x89e>
				case 2:
				return (i == 16 || board[i+2][j] || board[i][j+1]) ;
    1fca:	80 31       	cpi	r24, 0x10	; 16
    1fcc:	91 05       	cpc	r25, r1
    1fce:	09 f4       	brne	.+2      	; 0x1fd2 <checkbottom_collision+0x4de>
    1fd0:	b4 c1       	rjmp	.+872    	; 0x233a <checkbottom_collision+0x846>
    1fd2:	9c 01       	movw	r18, r24
    1fd4:	2e 5f       	subi	r18, 0xFE	; 254
    1fd6:	3f 4f       	sbci	r19, 0xFF	; 255
    1fd8:	f9 01       	movw	r30, r18
    1fda:	ee 0f       	add	r30, r30
    1fdc:	ff 1f       	adc	r31, r31
    1fde:	ee 0f       	add	r30, r30
    1fe0:	ff 1f       	adc	r31, r31
    1fe2:	ee 0f       	add	r30, r30
    1fe4:	ff 1f       	adc	r31, r31
    1fe6:	e2 0f       	add	r30, r18
    1fe8:	f3 1f       	adc	r31, r19
    1fea:	e4 0f       	add	r30, r20
    1fec:	f5 1f       	adc	r31, r21
    1fee:	ee 0f       	add	r30, r30
    1ff0:	ff 1f       	adc	r31, r31
    1ff2:	ec 5a       	subi	r30, 0xAC	; 172
    1ff4:	fe 4f       	sbci	r31, 0xFE	; 254
    1ff6:	20 81       	ld	r18, Z
    1ff8:	31 81       	ldd	r19, Z+1	; 0x01
    1ffa:	23 2b       	or	r18, r19
    1ffc:	09 f0       	breq	.+2      	; 0x2000 <checkbottom_collision+0x50c>
    1ffe:	a0 c1       	rjmp	.+832    	; 0x2340 <checkbottom_collision+0x84c>
    2000:	4f 5f       	subi	r20, 0xFF	; 255
    2002:	5f 4f       	sbci	r21, 0xFF	; 255
    2004:	fc 01       	movw	r30, r24
    2006:	ee 0f       	add	r30, r30
    2008:	ff 1f       	adc	r31, r31
    200a:	ee 0f       	add	r30, r30
    200c:	ff 1f       	adc	r31, r31
    200e:	ee 0f       	add	r30, r30
    2010:	ff 1f       	adc	r31, r31
    2012:	e8 0f       	add	r30, r24
    2014:	f9 1f       	adc	r31, r25
    2016:	e4 0f       	add	r30, r20
    2018:	f5 1f       	adc	r31, r21
    201a:	ee 0f       	add	r30, r30
    201c:	ff 1f       	adc	r31, r31
    201e:	ec 5a       	subi	r30, 0xAC	; 172
    2020:	fe 4f       	sbci	r31, 0xFE	; 254
    2022:	20 81       	ld	r18, Z
    2024:	31 81       	ldd	r19, Z+1	; 0x01
    2026:	21 15       	cp	r18, r1
    2028:	31 05       	cpc	r19, r1
    202a:	09 f4       	brne	.+2      	; 0x202e <checkbottom_collision+0x53a>
    202c:	b2 c1       	rjmp	.+868    	; 0x2392 <checkbottom_collision+0x89e>
    202e:	21 e0       	ldi	r18, 0x01	; 1
    2030:	30 e0       	ldi	r19, 0x00	; 0
    2032:	af c1       	rjmp	.+862    	; 0x2392 <checkbottom_collision+0x89e>
				case 3:
				return (i == 17 || board[i+1][j+1] || board[i+1][j-1] || board[i+1][j]) ;
    2034:	81 31       	cpi	r24, 0x11	; 17
    2036:	91 05       	cpc	r25, r1
    2038:	09 f4       	brne	.+2      	; 0x203c <checkbottom_collision+0x548>
    203a:	85 c1       	rjmp	.+778    	; 0x2346 <checkbottom_collision+0x852>
    203c:	01 96       	adiw	r24, 0x01	; 1
    203e:	fc 01       	movw	r30, r24
    2040:	ee 0f       	add	r30, r30
    2042:	ff 1f       	adc	r31, r31
    2044:	ee 0f       	add	r30, r30
    2046:	ff 1f       	adc	r31, r31
    2048:	ee 0f       	add	r30, r30
    204a:	ff 1f       	adc	r31, r31
    204c:	e8 0f       	add	r30, r24
    204e:	f9 1f       	adc	r31, r25
    2050:	9a 01       	movw	r18, r20
    2052:	2f 5f       	subi	r18, 0xFF	; 255
    2054:	3f 4f       	sbci	r19, 0xFF	; 255
    2056:	e2 0f       	add	r30, r18
    2058:	f3 1f       	adc	r31, r19
    205a:	ee 0f       	add	r30, r30
    205c:	ff 1f       	adc	r31, r31
    205e:	ec 5a       	subi	r30, 0xAC	; 172
    2060:	fe 4f       	sbci	r31, 0xFE	; 254
    2062:	20 81       	ld	r18, Z
    2064:	31 81       	ldd	r19, Z+1	; 0x01
    2066:	23 2b       	or	r18, r19
    2068:	09 f0       	breq	.+2      	; 0x206c <checkbottom_collision+0x578>
    206a:	70 c1       	rjmp	.+736    	; 0x234c <checkbottom_collision+0x858>
    206c:	fc 01       	movw	r30, r24
    206e:	ee 0f       	add	r30, r30
    2070:	ff 1f       	adc	r31, r31
    2072:	ee 0f       	add	r30, r30
    2074:	ff 1f       	adc	r31, r31
    2076:	ee 0f       	add	r30, r30
    2078:	ff 1f       	adc	r31, r31
    207a:	e8 0f       	add	r30, r24
    207c:	f9 1f       	adc	r31, r25
    207e:	9a 01       	movw	r18, r20
    2080:	21 50       	subi	r18, 0x01	; 1
    2082:	31 09       	sbc	r19, r1
    2084:	e2 0f       	add	r30, r18
    2086:	f3 1f       	adc	r31, r19
    2088:	ee 0f       	add	r30, r30
    208a:	ff 1f       	adc	r31, r31
    208c:	ec 5a       	subi	r30, 0xAC	; 172
    208e:	fe 4f       	sbci	r31, 0xFE	; 254
    2090:	20 81       	ld	r18, Z
    2092:	31 81       	ldd	r19, Z+1	; 0x01
    2094:	23 2b       	or	r18, r19
    2096:	09 f0       	breq	.+2      	; 0x209a <checkbottom_collision+0x5a6>
    2098:	5c c1       	rjmp	.+696    	; 0x2352 <checkbottom_collision+0x85e>
    209a:	fc 01       	movw	r30, r24
    209c:	ee 0f       	add	r30, r30
    209e:	ff 1f       	adc	r31, r31
    20a0:	ee 0f       	add	r30, r30
    20a2:	ff 1f       	adc	r31, r31
    20a4:	ee 0f       	add	r30, r30
    20a6:	ff 1f       	adc	r31, r31
    20a8:	e8 0f       	add	r30, r24
    20aa:	f9 1f       	adc	r31, r25
    20ac:	e4 0f       	add	r30, r20
    20ae:	f5 1f       	adc	r31, r21
    20b0:	ee 0f       	add	r30, r30
    20b2:	ff 1f       	adc	r31, r31
    20b4:	ec 5a       	subi	r30, 0xAC	; 172
    20b6:	fe 4f       	sbci	r31, 0xFE	; 254
    20b8:	20 81       	ld	r18, Z
    20ba:	31 81       	ldd	r19, Z+1	; 0x01
    20bc:	21 15       	cp	r18, r1
    20be:	31 05       	cpc	r19, r1
    20c0:	09 f4       	brne	.+2      	; 0x20c4 <checkbottom_collision+0x5d0>
    20c2:	67 c1       	rjmp	.+718    	; 0x2392 <checkbottom_collision+0x89e>
    20c4:	21 e0       	ldi	r18, 0x01	; 1
    20c6:	30 e0       	ldi	r19, 0x00	; 0
    20c8:	64 c1       	rjmp	.+712    	; 0x2392 <checkbottom_collision+0x89e>
			}
			break;
		case 5: // makeS
			if(version == 0)
    20ca:	20 91 50 01 	lds	r18, 0x0150	; 0x800150 <version>
    20ce:	30 91 51 01 	lds	r19, 0x0151	; 0x800151 <version+0x1>
    20d2:	23 2b       	or	r18, r19
    20d4:	09 f0       	breq	.+2      	; 0x20d8 <checkbottom_collision+0x5e4>
    20d6:	4b c0       	rjmp	.+150    	; 0x216e <checkbottom_collision+0x67a>
			return (i == 17 || board[i][j+1] || board[i+1][j-1] || board[i+1][j]) ;
    20d8:	81 31       	cpi	r24, 0x11	; 17
    20da:	91 05       	cpc	r25, r1
    20dc:	09 f4       	brne	.+2      	; 0x20e0 <checkbottom_collision+0x5ec>
    20de:	3c c1       	rjmp	.+632    	; 0x2358 <checkbottom_collision+0x864>
    20e0:	fc 01       	movw	r30, r24
    20e2:	ee 0f       	add	r30, r30
    20e4:	ff 1f       	adc	r31, r31
    20e6:	ee 0f       	add	r30, r30
    20e8:	ff 1f       	adc	r31, r31
    20ea:	ee 0f       	add	r30, r30
    20ec:	ff 1f       	adc	r31, r31
    20ee:	e8 0f       	add	r30, r24
    20f0:	f9 1f       	adc	r31, r25
    20f2:	9a 01       	movw	r18, r20
    20f4:	2f 5f       	subi	r18, 0xFF	; 255
    20f6:	3f 4f       	sbci	r19, 0xFF	; 255
    20f8:	e2 0f       	add	r30, r18
    20fa:	f3 1f       	adc	r31, r19
    20fc:	ee 0f       	add	r30, r30
    20fe:	ff 1f       	adc	r31, r31
    2100:	ec 5a       	subi	r30, 0xAC	; 172
    2102:	fe 4f       	sbci	r31, 0xFE	; 254
    2104:	20 81       	ld	r18, Z
    2106:	31 81       	ldd	r19, Z+1	; 0x01
    2108:	23 2b       	or	r18, r19
    210a:	09 f0       	breq	.+2      	; 0x210e <checkbottom_collision+0x61a>
    210c:	28 c1       	rjmp	.+592    	; 0x235e <checkbottom_collision+0x86a>
    210e:	01 96       	adiw	r24, 0x01	; 1
    2110:	fc 01       	movw	r30, r24
    2112:	ee 0f       	add	r30, r30
    2114:	ff 1f       	adc	r31, r31
    2116:	ee 0f       	add	r30, r30
    2118:	ff 1f       	adc	r31, r31
    211a:	ee 0f       	add	r30, r30
    211c:	ff 1f       	adc	r31, r31
    211e:	e8 0f       	add	r30, r24
    2120:	f9 1f       	adc	r31, r25
    2122:	9a 01       	movw	r18, r20
    2124:	21 50       	subi	r18, 0x01	; 1
    2126:	31 09       	sbc	r19, r1
    2128:	e2 0f       	add	r30, r18
    212a:	f3 1f       	adc	r31, r19
    212c:	ee 0f       	add	r30, r30
    212e:	ff 1f       	adc	r31, r31
    2130:	ec 5a       	subi	r30, 0xAC	; 172
    2132:	fe 4f       	sbci	r31, 0xFE	; 254
    2134:	20 81       	ld	r18, Z
    2136:	31 81       	ldd	r19, Z+1	; 0x01
    2138:	23 2b       	or	r18, r19
    213a:	09 f0       	breq	.+2      	; 0x213e <checkbottom_collision+0x64a>
    213c:	13 c1       	rjmp	.+550    	; 0x2364 <checkbottom_collision+0x870>
    213e:	fc 01       	movw	r30, r24
    2140:	ee 0f       	add	r30, r30
    2142:	ff 1f       	adc	r31, r31
    2144:	ee 0f       	add	r30, r30
    2146:	ff 1f       	adc	r31, r31
    2148:	ee 0f       	add	r30, r30
    214a:	ff 1f       	adc	r31, r31
    214c:	e8 0f       	add	r30, r24
    214e:	f9 1f       	adc	r31, r25
    2150:	e4 0f       	add	r30, r20
    2152:	f5 1f       	adc	r31, r21
    2154:	ee 0f       	add	r30, r30
    2156:	ff 1f       	adc	r31, r31
    2158:	ec 5a       	subi	r30, 0xAC	; 172
    215a:	fe 4f       	sbci	r31, 0xFE	; 254
    215c:	20 81       	ld	r18, Z
    215e:	31 81       	ldd	r19, Z+1	; 0x01
    2160:	21 15       	cp	r18, r1
    2162:	31 05       	cpc	r19, r1
    2164:	09 f4       	brne	.+2      	; 0x2168 <checkbottom_collision+0x674>
    2166:	15 c1       	rjmp	.+554    	; 0x2392 <checkbottom_collision+0x89e>
    2168:	21 e0       	ldi	r18, 0x01	; 1
    216a:	30 e0       	ldi	r19, 0x00	; 0
    216c:	12 c1       	rjmp	.+548    	; 0x2392 <checkbottom_collision+0x89e>
			else return (i == 16 || board[i+1][j] || board[i+2][j+1]) ;
    216e:	80 31       	cpi	r24, 0x10	; 16
    2170:	91 05       	cpc	r25, r1
    2172:	09 f4       	brne	.+2      	; 0x2176 <checkbottom_collision+0x682>
    2174:	fa c0       	rjmp	.+500    	; 0x236a <checkbottom_collision+0x876>
    2176:	9c 01       	movw	r18, r24
    2178:	2f 5f       	subi	r18, 0xFF	; 255
    217a:	3f 4f       	sbci	r19, 0xFF	; 255
    217c:	f9 01       	movw	r30, r18
    217e:	ee 0f       	add	r30, r30
    2180:	ff 1f       	adc	r31, r31
    2182:	ee 0f       	add	r30, r30
    2184:	ff 1f       	adc	r31, r31
    2186:	ee 0f       	add	r30, r30
    2188:	ff 1f       	adc	r31, r31
    218a:	e2 0f       	add	r30, r18
    218c:	f3 1f       	adc	r31, r19
    218e:	e4 0f       	add	r30, r20
    2190:	f5 1f       	adc	r31, r21
    2192:	ee 0f       	add	r30, r30
    2194:	ff 1f       	adc	r31, r31
    2196:	ec 5a       	subi	r30, 0xAC	; 172
    2198:	fe 4f       	sbci	r31, 0xFE	; 254
    219a:	20 81       	ld	r18, Z
    219c:	31 81       	ldd	r19, Z+1	; 0x01
    219e:	23 2b       	or	r18, r19
    21a0:	09 f0       	breq	.+2      	; 0x21a4 <checkbottom_collision+0x6b0>
    21a2:	e6 c0       	rjmp	.+460    	; 0x2370 <checkbottom_collision+0x87c>
    21a4:	02 96       	adiw	r24, 0x02	; 2
    21a6:	4f 5f       	subi	r20, 0xFF	; 255
    21a8:	5f 4f       	sbci	r21, 0xFF	; 255
    21aa:	fc 01       	movw	r30, r24
    21ac:	ee 0f       	add	r30, r30
    21ae:	ff 1f       	adc	r31, r31
    21b0:	ee 0f       	add	r30, r30
    21b2:	ff 1f       	adc	r31, r31
    21b4:	ee 0f       	add	r30, r30
    21b6:	ff 1f       	adc	r31, r31
    21b8:	e8 0f       	add	r30, r24
    21ba:	f9 1f       	adc	r31, r25
    21bc:	e4 0f       	add	r30, r20
    21be:	f5 1f       	adc	r31, r21
    21c0:	ee 0f       	add	r30, r30
    21c2:	ff 1f       	adc	r31, r31
    21c4:	ec 5a       	subi	r30, 0xAC	; 172
    21c6:	fe 4f       	sbci	r31, 0xFE	; 254
    21c8:	20 81       	ld	r18, Z
    21ca:	31 81       	ldd	r19, Z+1	; 0x01
    21cc:	21 15       	cp	r18, r1
    21ce:	31 05       	cpc	r19, r1
    21d0:	09 f4       	brne	.+2      	; 0x21d4 <checkbottom_collision+0x6e0>
    21d2:	df c0       	rjmp	.+446    	; 0x2392 <checkbottom_collision+0x89e>
    21d4:	21 e0       	ldi	r18, 0x01	; 1
    21d6:	30 e0       	ldi	r19, 0x00	; 0
    21d8:	dc c0       	rjmp	.+440    	; 0x2392 <checkbottom_collision+0x89e>
			break;

		case 6: // makeZ
			if(version == 0)
    21da:	20 91 50 01 	lds	r18, 0x0150	; 0x800150 <version>
    21de:	30 91 51 01 	lds	r19, 0x0151	; 0x800151 <version+0x1>
    21e2:	23 2b       	or	r18, r19
    21e4:	09 f0       	breq	.+2      	; 0x21e8 <checkbottom_collision+0x6f4>
    21e6:	4d c0       	rjmp	.+154    	; 0x2282 <checkbottom_collision+0x78e>
			return (i == 17 || board[i+1][j+1] || board[i][j-1] || board[i+1][j]) ;
    21e8:	81 31       	cpi	r24, 0x11	; 17
    21ea:	91 05       	cpc	r25, r1
    21ec:	09 f4       	brne	.+2      	; 0x21f0 <checkbottom_collision+0x6fc>
    21ee:	c3 c0       	rjmp	.+390    	; 0x2376 <checkbottom_collision+0x882>
    21f0:	bc 01       	movw	r22, r24
    21f2:	6f 5f       	subi	r22, 0xFF	; 255
    21f4:	7f 4f       	sbci	r23, 0xFF	; 255
    21f6:	fb 01       	movw	r30, r22
    21f8:	ee 0f       	add	r30, r30
    21fa:	ff 1f       	adc	r31, r31
    21fc:	ee 0f       	add	r30, r30
    21fe:	ff 1f       	adc	r31, r31
    2200:	ee 0f       	add	r30, r30
    2202:	ff 1f       	adc	r31, r31
    2204:	e6 0f       	add	r30, r22
    2206:	f7 1f       	adc	r31, r23
    2208:	9a 01       	movw	r18, r20
    220a:	2f 5f       	subi	r18, 0xFF	; 255
    220c:	3f 4f       	sbci	r19, 0xFF	; 255
    220e:	e2 0f       	add	r30, r18
    2210:	f3 1f       	adc	r31, r19
    2212:	ee 0f       	add	r30, r30
    2214:	ff 1f       	adc	r31, r31
    2216:	ec 5a       	subi	r30, 0xAC	; 172
    2218:	fe 4f       	sbci	r31, 0xFE	; 254
    221a:	20 81       	ld	r18, Z
    221c:	31 81       	ldd	r19, Z+1	; 0x01
    221e:	23 2b       	or	r18, r19
    2220:	09 f0       	breq	.+2      	; 0x2224 <checkbottom_collision+0x730>
    2222:	ac c0       	rjmp	.+344    	; 0x237c <checkbottom_collision+0x888>
    2224:	fc 01       	movw	r30, r24
    2226:	ee 0f       	add	r30, r30
    2228:	ff 1f       	adc	r31, r31
    222a:	ee 0f       	add	r30, r30
    222c:	ff 1f       	adc	r31, r31
    222e:	ee 0f       	add	r30, r30
    2230:	ff 1f       	adc	r31, r31
    2232:	e8 0f       	add	r30, r24
    2234:	f9 1f       	adc	r31, r25
    2236:	9a 01       	movw	r18, r20
    2238:	21 50       	subi	r18, 0x01	; 1
    223a:	31 09       	sbc	r19, r1
    223c:	e2 0f       	add	r30, r18
    223e:	f3 1f       	adc	r31, r19
    2240:	ee 0f       	add	r30, r30
    2242:	ff 1f       	adc	r31, r31
    2244:	ec 5a       	subi	r30, 0xAC	; 172
    2246:	fe 4f       	sbci	r31, 0xFE	; 254
    2248:	80 81       	ld	r24, Z
    224a:	91 81       	ldd	r25, Z+1	; 0x01
    224c:	89 2b       	or	r24, r25
    224e:	09 f0       	breq	.+2      	; 0x2252 <checkbottom_collision+0x75e>
    2250:	98 c0       	rjmp	.+304    	; 0x2382 <checkbottom_collision+0x88e>
    2252:	fb 01       	movw	r30, r22
    2254:	ee 0f       	add	r30, r30
    2256:	ff 1f       	adc	r31, r31
    2258:	ee 0f       	add	r30, r30
    225a:	ff 1f       	adc	r31, r31
    225c:	ee 0f       	add	r30, r30
    225e:	ff 1f       	adc	r31, r31
    2260:	e6 0f       	add	r30, r22
    2262:	f7 1f       	adc	r31, r23
    2264:	e4 0f       	add	r30, r20
    2266:	f5 1f       	adc	r31, r21
    2268:	ee 0f       	add	r30, r30
    226a:	ff 1f       	adc	r31, r31
    226c:	ec 5a       	subi	r30, 0xAC	; 172
    226e:	fe 4f       	sbci	r31, 0xFE	; 254
    2270:	20 81       	ld	r18, Z
    2272:	31 81       	ldd	r19, Z+1	; 0x01
    2274:	21 15       	cp	r18, r1
    2276:	31 05       	cpc	r19, r1
    2278:	09 f4       	brne	.+2      	; 0x227c <checkbottom_collision+0x788>
    227a:	8b c0       	rjmp	.+278    	; 0x2392 <checkbottom_collision+0x89e>
    227c:	21 e0       	ldi	r18, 0x01	; 1
    227e:	30 e0       	ldi	r19, 0x00	; 0
    2280:	88 c0       	rjmp	.+272    	; 0x2392 <checkbottom_collision+0x89e>
			else return (i == 16 || board[i+1][j+1] || board[i+2][j]) ;
    2282:	80 31       	cpi	r24, 0x10	; 16
    2284:	91 05       	cpc	r25, r1
    2286:	09 f4       	brne	.+2      	; 0x228a <checkbottom_collision+0x796>
    2288:	7f c0       	rjmp	.+254    	; 0x2388 <checkbottom_collision+0x894>
    228a:	fc 01       	movw	r30, r24
    228c:	31 96       	adiw	r30, 0x01	; 1
    228e:	9f 01       	movw	r18, r30
    2290:	22 0f       	add	r18, r18
    2292:	33 1f       	adc	r19, r19
    2294:	22 0f       	add	r18, r18
    2296:	33 1f       	adc	r19, r19
    2298:	22 0f       	add	r18, r18
    229a:	33 1f       	adc	r19, r19
    229c:	e2 0f       	add	r30, r18
    229e:	f3 1f       	adc	r31, r19
    22a0:	9a 01       	movw	r18, r20
    22a2:	2f 5f       	subi	r18, 0xFF	; 255
    22a4:	3f 4f       	sbci	r19, 0xFF	; 255
    22a6:	e2 0f       	add	r30, r18
    22a8:	f3 1f       	adc	r31, r19
    22aa:	ee 0f       	add	r30, r30
    22ac:	ff 1f       	adc	r31, r31
    22ae:	ec 5a       	subi	r30, 0xAC	; 172
    22b0:	fe 4f       	sbci	r31, 0xFE	; 254
    22b2:	20 81       	ld	r18, Z
    22b4:	31 81       	ldd	r19, Z+1	; 0x01
    22b6:	23 2b       	or	r18, r19
    22b8:	09 f0       	breq	.+2      	; 0x22bc <checkbottom_collision+0x7c8>
    22ba:	69 c0       	rjmp	.+210    	; 0x238e <checkbottom_collision+0x89a>
    22bc:	02 96       	adiw	r24, 0x02	; 2
    22be:	9c 01       	movw	r18, r24
    22c0:	22 0f       	add	r18, r18
    22c2:	33 1f       	adc	r19, r19
    22c4:	22 0f       	add	r18, r18
    22c6:	33 1f       	adc	r19, r19
    22c8:	22 0f       	add	r18, r18
    22ca:	33 1f       	adc	r19, r19
    22cc:	82 0f       	add	r24, r18
    22ce:	93 1f       	adc	r25, r19
    22d0:	84 0f       	add	r24, r20
    22d2:	95 1f       	adc	r25, r21
    22d4:	88 0f       	add	r24, r24
    22d6:	99 1f       	adc	r25, r25
    22d8:	fc 01       	movw	r30, r24
    22da:	ec 5a       	subi	r30, 0xAC	; 172
    22dc:	fe 4f       	sbci	r31, 0xFE	; 254
    22de:	20 81       	ld	r18, Z
    22e0:	31 81       	ldd	r19, Z+1	; 0x01
    22e2:	21 15       	cp	r18, r1
    22e4:	31 05       	cpc	r19, r1
    22e6:	09 f4       	brne	.+2      	; 0x22ea <checkbottom_collision+0x7f6>
    22e8:	54 c0       	rjmp	.+168    	; 0x2392 <checkbottom_collision+0x89e>
    22ea:	21 e0       	ldi	r18, 0x01	; 1
    22ec:	30 e0       	ldi	r19, 0x00	; 0
    22ee:	51 c0       	rjmp	.+162    	; 0x2392 <checkbottom_collision+0x89e>
			break;
	return 0;
	}
}
    22f0:	08 95       	ret
	int j = curY;
	switch(type){
		case 1: // makeT
			switch(version) {
				case 0:
				return (i == 17 || board[i+1][j+1] || board[i+1][j-1] || board[i+1][j]) ;
    22f2:	9c 01       	movw	r18, r24
    22f4:	4e c0       	rjmp	.+156    	; 0x2392 <checkbottom_collision+0x89e>
				case 1:
				return (i == 16 || board[i+1][j-1] || board[i+2][j]) ;
    22f6:	9b 01       	movw	r18, r22
    22f8:	4c c0       	rjmp	.+152    	; 0x2392 <checkbottom_collision+0x89e>
    22fa:	9b 01       	movw	r18, r22
    22fc:	4a c0       	rjmp	.+148    	; 0x2392 <checkbottom_collision+0x89e>
				case 2:
				return(i == 16 || board[i+1][j+1] || board[i+1][j-1] || board[i+2][j]) ;
    22fe:	9c 01       	movw	r18, r24
    2300:	48 c0       	rjmp	.+144    	; 0x2392 <checkbottom_collision+0x89e>
				case 3:
				return (i == 16|| board[i+2][j] ||board[i+1][j+1]) ;
    2302:	9c 01       	movw	r18, r24
    2304:	46 c0       	rjmp	.+140    	; 0x2392 <checkbottom_collision+0x89e>
			}
			break;
		case 2: // makeBAR
			if(version == 0){
				return (i == 17 || board[i+1][j+1] || board[i+1][j-1] || board[i+1][j]) ;
    2306:	21 e0       	ldi	r18, 0x01	; 1
    2308:	30 e0       	ldi	r19, 0x00	; 0
    230a:	43 c0       	rjmp	.+134    	; 0x2392 <checkbottom_collision+0x89e>
    230c:	21 e0       	ldi	r18, 0x01	; 1
    230e:	30 e0       	ldi	r19, 0x00	; 0
    2310:	40 c0       	rjmp	.+128    	; 0x2392 <checkbottom_collision+0x89e>
    2312:	21 e0       	ldi	r18, 0x01	; 1
    2314:	30 e0       	ldi	r19, 0x00	; 0
    2316:	3d c0       	rjmp	.+122    	; 0x2392 <checkbottom_collision+0x89e>
			}
			else return (i == 16 || board[i+2][j]) ;
    2318:	21 e0       	ldi	r18, 0x01	; 1
    231a:	30 e0       	ldi	r19, 0x00	; 0
    231c:	3a c0       	rjmp	.+116    	; 0x2392 <checkbottom_collision+0x89e>
			break;
		case 3: // makeSquare
			return (i == 17 || board[i+1][j] || board[i+1][j+1]) ;
    231e:	21 e0       	ldi	r18, 0x01	; 1
    2320:	30 e0       	ldi	r19, 0x00	; 0
    2322:	37 c0       	rjmp	.+110    	; 0x2392 <checkbottom_collision+0x89e>
    2324:	21 e0       	ldi	r18, 0x01	; 1
    2326:	30 e0       	ldi	r19, 0x00	; 0
    2328:	34 c0       	rjmp	.+104    	; 0x2392 <checkbottom_collision+0x89e>
			break;
		case 4: // makeL
			switch(version) {
				case 0:
				return (i == 16 || board[i+2][j-1] || board[i+2][j]) ;
    232a:	21 e0       	ldi	r18, 0x01	; 1
    232c:	30 e0       	ldi	r19, 0x00	; 0
    232e:	31 c0       	rjmp	.+98     	; 0x2392 <checkbottom_collision+0x89e>
    2330:	21 e0       	ldi	r18, 0x01	; 1
    2332:	30 e0       	ldi	r19, 0x00	; 0
    2334:	2e c0       	rjmp	.+92     	; 0x2392 <checkbottom_collision+0x89e>
				case 1:
				return (i == 16 || board[i+2][j+1] || board[i+1][j-1] || board[i+1][j]) ;
    2336:	9c 01       	movw	r18, r24
    2338:	2c c0       	rjmp	.+88     	; 0x2392 <checkbottom_collision+0x89e>
				case 2:
				return (i == 16 || board[i+2][j] || board[i][j+1]) ;
    233a:	21 e0       	ldi	r18, 0x01	; 1
    233c:	30 e0       	ldi	r19, 0x00	; 0
    233e:	29 c0       	rjmp	.+82     	; 0x2392 <checkbottom_collision+0x89e>
    2340:	21 e0       	ldi	r18, 0x01	; 1
    2342:	30 e0       	ldi	r19, 0x00	; 0
    2344:	26 c0       	rjmp	.+76     	; 0x2392 <checkbottom_collision+0x89e>
				case 3:
				return (i == 17 || board[i+1][j+1] || board[i+1][j-1] || board[i+1][j]) ;
    2346:	21 e0       	ldi	r18, 0x01	; 1
    2348:	30 e0       	ldi	r19, 0x00	; 0
    234a:	23 c0       	rjmp	.+70     	; 0x2392 <checkbottom_collision+0x89e>
    234c:	21 e0       	ldi	r18, 0x01	; 1
    234e:	30 e0       	ldi	r19, 0x00	; 0
    2350:	20 c0       	rjmp	.+64     	; 0x2392 <checkbottom_collision+0x89e>
    2352:	21 e0       	ldi	r18, 0x01	; 1
    2354:	30 e0       	ldi	r19, 0x00	; 0
    2356:	1d c0       	rjmp	.+58     	; 0x2392 <checkbottom_collision+0x89e>
			}
			break;
		case 5: // makeS
			if(version == 0)
			return (i == 17 || board[i][j+1] || board[i+1][j-1] || board[i+1][j]) ;
    2358:	21 e0       	ldi	r18, 0x01	; 1
    235a:	30 e0       	ldi	r19, 0x00	; 0
    235c:	1a c0       	rjmp	.+52     	; 0x2392 <checkbottom_collision+0x89e>
    235e:	21 e0       	ldi	r18, 0x01	; 1
    2360:	30 e0       	ldi	r19, 0x00	; 0
    2362:	17 c0       	rjmp	.+46     	; 0x2392 <checkbottom_collision+0x89e>
    2364:	21 e0       	ldi	r18, 0x01	; 1
    2366:	30 e0       	ldi	r19, 0x00	; 0
    2368:	14 c0       	rjmp	.+40     	; 0x2392 <checkbottom_collision+0x89e>
			else return (i == 16 || board[i+1][j] || board[i+2][j+1]) ;
    236a:	21 e0       	ldi	r18, 0x01	; 1
    236c:	30 e0       	ldi	r19, 0x00	; 0
    236e:	11 c0       	rjmp	.+34     	; 0x2392 <checkbottom_collision+0x89e>
    2370:	21 e0       	ldi	r18, 0x01	; 1
    2372:	30 e0       	ldi	r19, 0x00	; 0
    2374:	0e c0       	rjmp	.+28     	; 0x2392 <checkbottom_collision+0x89e>
			break;

		case 6: // makeZ
			if(version == 0)
			return (i == 17 || board[i+1][j+1] || board[i][j-1] || board[i+1][j]) ;
    2376:	21 e0       	ldi	r18, 0x01	; 1
    2378:	30 e0       	ldi	r19, 0x00	; 0
    237a:	0b c0       	rjmp	.+22     	; 0x2392 <checkbottom_collision+0x89e>
    237c:	21 e0       	ldi	r18, 0x01	; 1
    237e:	30 e0       	ldi	r19, 0x00	; 0
    2380:	08 c0       	rjmp	.+16     	; 0x2392 <checkbottom_collision+0x89e>
    2382:	21 e0       	ldi	r18, 0x01	; 1
    2384:	30 e0       	ldi	r19, 0x00	; 0
    2386:	05 c0       	rjmp	.+10     	; 0x2392 <checkbottom_collision+0x89e>
			else return (i == 16 || board[i+1][j+1] || board[i+2][j]) ;
    2388:	21 e0       	ldi	r18, 0x01	; 1
    238a:	30 e0       	ldi	r19, 0x00	; 0
    238c:	02 c0       	rjmp	.+4      	; 0x2392 <checkbottom_collision+0x89e>
    238e:	21 e0       	ldi	r18, 0x01	; 1
    2390:	30 e0       	ldi	r19, 0x00	; 0
    2392:	82 2f       	mov	r24, r18
    2394:	93 2f       	mov	r25, r19
			break;
	return 0;
	}
}
    2396:	08 95       	ret

00002398 <makeBLOCK>:
int makeBLOCK(int r, int c, int type){
	if (type == 1) return makeT(r,c);
    2398:	41 30       	cpi	r20, 0x01	; 1
    239a:	51 05       	cpc	r21, r1
    239c:	19 f4       	brne	.+6      	; 0x23a4 <makeBLOCK+0xc>
    239e:	0e 94 50 01 	call	0x2a0	; 0x2a0 <makeT>
    23a2:	08 95       	ret
	else if (type == 2) return makeBAR(r,c);
    23a4:	42 30       	cpi	r20, 0x02	; 2
    23a6:	51 05       	cpc	r21, r1
    23a8:	19 f4       	brne	.+6      	; 0x23b0 <makeBLOCK+0x18>
    23aa:	0e 94 c9 03 	call	0x792	; 0x792 <makeBAR>
    23ae:	08 95       	ret
	else if (type == 3) return makeSQUARE(r,c);
    23b0:	43 30       	cpi	r20, 0x03	; 3
    23b2:	51 05       	cpc	r21, r1
    23b4:	19 f4       	brne	.+6      	; 0x23bc <makeBLOCK+0x24>
    23b6:	0e 94 d0 04 	call	0x9a0	; 0x9a0 <makeSQUARE>
    23ba:	08 95       	ret
	else if (type == 4) return makeL(r,c);
    23bc:	44 30       	cpi	r20, 0x04	; 4
    23be:	51 05       	cpc	r21, r1
    23c0:	19 f4       	brne	.+6      	; 0x23c8 <makeBLOCK+0x30>
    23c2:	0e 94 67 05 	call	0xace	; 0xace <makeL>
    23c6:	08 95       	ret
	else if (type == 5) return makeS(r,c);
    23c8:	45 30       	cpi	r20, 0x05	; 5
    23ca:	51 05       	cpc	r21, r1
    23cc:	19 f4       	brne	.+6      	; 0x23d4 <makeBLOCK+0x3c>
    23ce:	0e 94 e0 07 	call	0xfc0	; 0xfc0 <makeS>
    23d2:	08 95       	ret
	else if (type == 6) return makeZ(r,c);
    23d4:	46 30       	cpi	r20, 0x06	; 6
    23d6:	51 05       	cpc	r21, r1
    23d8:	19 f4       	brne	.+6      	; 0x23e0 <makeBLOCK+0x48>
    23da:	0e 94 23 09 	call	0x1246	; 0x1246 <makeZ>
    23de:	08 95       	ret
	return 0;
    23e0:	80 e0       	ldi	r24, 0x00	; 0
    23e2:	90 e0       	ldi	r25, 0x00	; 0
}
    23e4:	08 95       	ret

000023e6 <removeBLOCKS>:

void removeBLOCKS(int r, int c, int type){
	
	if (type == 1) {
    23e6:	41 30       	cpi	r20, 0x01	; 1
    23e8:	51 05       	cpc	r21, r1
    23ea:	09 f0       	breq	.+2      	; 0x23ee <removeBLOCKS+0x8>
    23ec:	44 c1       	rjmp	.+648    	; 0x2676 <removeBLOCKS+0x290>
		if (version % 4 == 0){
    23ee:	20 91 50 01 	lds	r18, 0x0150	; 0x800150 <version>
    23f2:	30 91 51 01 	lds	r19, 0x0151	; 0x800151 <version+0x1>
    23f6:	23 70       	andi	r18, 0x03	; 3
    23f8:	33 27       	eor	r19, r19
    23fa:	23 2b       	or	r18, r19
    23fc:	e9 f5       	brne	.+122    	; 0x2478 <removeBLOCKS+0x92>
			board[r][c]   = 0;
    23fe:	fc 01       	movw	r30, r24
    2400:	ee 0f       	add	r30, r30
    2402:	ff 1f       	adc	r31, r31
    2404:	ee 0f       	add	r30, r30
    2406:	ff 1f       	adc	r31, r31
    2408:	ee 0f       	add	r30, r30
    240a:	ff 1f       	adc	r31, r31
    240c:	e8 0f       	add	r30, r24
    240e:	f9 1f       	adc	r31, r25
    2410:	df 01       	movw	r26, r30
    2412:	a6 0f       	add	r26, r22
    2414:	b7 1f       	adc	r27, r23
    2416:	aa 0f       	add	r26, r26
    2418:	bb 1f       	adc	r27, r27
    241a:	ac 5a       	subi	r26, 0xAC	; 172
    241c:	be 4f       	sbci	r27, 0xFE	; 254
    241e:	11 96       	adiw	r26, 0x01	; 1
    2420:	1c 92       	st	X, r1
    2422:	1e 92       	st	-X, r1
			board[r][c-1] = 0;
    2424:	db 01       	movw	r26, r22
    2426:	11 97       	sbiw	r26, 0x01	; 1
    2428:	ae 0f       	add	r26, r30
    242a:	bf 1f       	adc	r27, r31
    242c:	aa 0f       	add	r26, r26
    242e:	bb 1f       	adc	r27, r27
    2430:	ac 5a       	subi	r26, 0xAC	; 172
    2432:	be 4f       	sbci	r27, 0xFE	; 254
    2434:	11 96       	adiw	r26, 0x01	; 1
    2436:	1c 92       	st	X, r1
    2438:	1e 92       	st	-X, r1
			board[r][c+1] = 0;
    243a:	9b 01       	movw	r18, r22
    243c:	2f 5f       	subi	r18, 0xFF	; 255
    243e:	3f 4f       	sbci	r19, 0xFF	; 255
    2440:	e2 0f       	add	r30, r18
    2442:	f3 1f       	adc	r31, r19
    2444:	ee 0f       	add	r30, r30
    2446:	ff 1f       	adc	r31, r31
    2448:	ec 5a       	subi	r30, 0xAC	; 172
    244a:	fe 4f       	sbci	r31, 0xFE	; 254
    244c:	11 82       	std	Z+1, r1	; 0x01
    244e:	10 82       	st	Z, r1
			board[r-1][c] = 0;
    2450:	01 97       	sbiw	r24, 0x01	; 1
    2452:	fc 01       	movw	r30, r24
    2454:	ee 0f       	add	r30, r30
    2456:	ff 1f       	adc	r31, r31
    2458:	ee 0f       	add	r30, r30
    245a:	ff 1f       	adc	r31, r31
    245c:	ee 0f       	add	r30, r30
    245e:	ff 1f       	adc	r31, r31
    2460:	8e 0f       	add	r24, r30
    2462:	9f 1f       	adc	r25, r31
    2464:	fc 01       	movw	r30, r24
    2466:	e6 0f       	add	r30, r22
    2468:	f7 1f       	adc	r31, r23
    246a:	ee 0f       	add	r30, r30
    246c:	ff 1f       	adc	r31, r31
    246e:	ec 5a       	subi	r30, 0xAC	; 172
    2470:	fe 4f       	sbci	r31, 0xFE	; 254
    2472:	11 82       	std	Z+1, r1	; 0x01
    2474:	10 82       	st	Z, r1
    2476:	08 95       	ret
		}
		else if (version % 4 == 1){
    2478:	20 91 50 01 	lds	r18, 0x0150	; 0x800150 <version>
    247c:	30 91 51 01 	lds	r19, 0x0151	; 0x800151 <version+0x1>
    2480:	23 70       	andi	r18, 0x03	; 3
    2482:	30 78       	andi	r19, 0x80	; 128
    2484:	33 23       	and	r19, r19
    2486:	34 f4       	brge	.+12     	; 0x2494 <removeBLOCKS+0xae>
    2488:	21 50       	subi	r18, 0x01	; 1
    248a:	31 09       	sbc	r19, r1
    248c:	2c 6f       	ori	r18, 0xFC	; 252
    248e:	3f 6f       	ori	r19, 0xFF	; 255
    2490:	2f 5f       	subi	r18, 0xFF	; 255
    2492:	3f 4f       	sbci	r19, 0xFF	; 255
    2494:	21 30       	cpi	r18, 0x01	; 1
    2496:	31 05       	cpc	r19, r1
    2498:	09 f0       	breq	.+2      	; 0x249c <removeBLOCKS+0xb6>
    249a:	47 c0       	rjmp	.+142    	; 0x252a <removeBLOCKS+0x144>
			board[r][c]   = 0;
    249c:	fc 01       	movw	r30, r24
    249e:	ee 0f       	add	r30, r30
    24a0:	ff 1f       	adc	r31, r31
    24a2:	ee 0f       	add	r30, r30
    24a4:	ff 1f       	adc	r31, r31
    24a6:	ee 0f       	add	r30, r30
    24a8:	ff 1f       	adc	r31, r31
    24aa:	af 01       	movw	r20, r30
    24ac:	48 0f       	add	r20, r24
    24ae:	59 1f       	adc	r21, r25
    24b0:	da 01       	movw	r26, r20
    24b2:	a6 0f       	add	r26, r22
    24b4:	b7 1f       	adc	r27, r23
    24b6:	aa 0f       	add	r26, r26
    24b8:	bb 1f       	adc	r27, r27
    24ba:	ac 5a       	subi	r26, 0xAC	; 172
    24bc:	be 4f       	sbci	r27, 0xFE	; 254
    24be:	11 96       	adiw	r26, 0x01	; 1
    24c0:	1c 92       	st	X, r1
    24c2:	1e 92       	st	-X, r1
			board[r-1][c] = 0;
    24c4:	9c 01       	movw	r18, r24
    24c6:	21 50       	subi	r18, 0x01	; 1
    24c8:	31 09       	sbc	r19, r1
    24ca:	f9 01       	movw	r30, r18
    24cc:	ee 0f       	add	r30, r30
    24ce:	ff 1f       	adc	r31, r31
    24d0:	ee 0f       	add	r30, r30
    24d2:	ff 1f       	adc	r31, r31
    24d4:	ee 0f       	add	r30, r30
    24d6:	ff 1f       	adc	r31, r31
    24d8:	e2 0f       	add	r30, r18
    24da:	f3 1f       	adc	r31, r19
    24dc:	e6 0f       	add	r30, r22
    24de:	f7 1f       	adc	r31, r23
    24e0:	ee 0f       	add	r30, r30
    24e2:	ff 1f       	adc	r31, r31
    24e4:	ec 5a       	subi	r30, 0xAC	; 172
    24e6:	fe 4f       	sbci	r31, 0xFE	; 254
    24e8:	11 82       	std	Z+1, r1	; 0x01
    24ea:	10 82       	st	Z, r1
			board[r][c-1] = 0;
    24ec:	9b 01       	movw	r18, r22
    24ee:	21 50       	subi	r18, 0x01	; 1
    24f0:	31 09       	sbc	r19, r1
    24f2:	fa 01       	movw	r30, r20
    24f4:	e2 0f       	add	r30, r18
    24f6:	f3 1f       	adc	r31, r19
    24f8:	ee 0f       	add	r30, r30
    24fa:	ff 1f       	adc	r31, r31
    24fc:	ec 5a       	subi	r30, 0xAC	; 172
    24fe:	fe 4f       	sbci	r31, 0xFE	; 254
    2500:	11 82       	std	Z+1, r1	; 0x01
    2502:	10 82       	st	Z, r1
			board[r+1][c] = 0;
    2504:	01 96       	adiw	r24, 0x01	; 1
    2506:	fc 01       	movw	r30, r24
    2508:	ee 0f       	add	r30, r30
    250a:	ff 1f       	adc	r31, r31
    250c:	ee 0f       	add	r30, r30
    250e:	ff 1f       	adc	r31, r31
    2510:	ee 0f       	add	r30, r30
    2512:	ff 1f       	adc	r31, r31
    2514:	e8 0f       	add	r30, r24
    2516:	f9 1f       	adc	r31, r25
    2518:	e6 0f       	add	r30, r22
    251a:	f7 1f       	adc	r31, r23
    251c:	ee 0f       	add	r30, r30
    251e:	ff 1f       	adc	r31, r31
    2520:	ec 5a       	subi	r30, 0xAC	; 172
    2522:	fe 4f       	sbci	r31, 0xFE	; 254
    2524:	11 82       	std	Z+1, r1	; 0x01
    2526:	10 82       	st	Z, r1
    2528:	08 95       	ret
		}
		else if (version % 4 == 2){
    252a:	20 91 50 01 	lds	r18, 0x0150	; 0x800150 <version>
    252e:	30 91 51 01 	lds	r19, 0x0151	; 0x800151 <version+0x1>
    2532:	23 70       	andi	r18, 0x03	; 3
    2534:	30 78       	andi	r19, 0x80	; 128
    2536:	33 23       	and	r19, r19
    2538:	34 f4       	brge	.+12     	; 0x2546 <removeBLOCKS+0x160>
    253a:	21 50       	subi	r18, 0x01	; 1
    253c:	31 09       	sbc	r19, r1
    253e:	2c 6f       	ori	r18, 0xFC	; 252
    2540:	3f 6f       	ori	r19, 0xFF	; 255
    2542:	2f 5f       	subi	r18, 0xFF	; 255
    2544:	3f 4f       	sbci	r19, 0xFF	; 255
    2546:	22 30       	cpi	r18, 0x02	; 2
    2548:	31 05       	cpc	r19, r1
    254a:	e1 f5       	brne	.+120    	; 0x25c4 <removeBLOCKS+0x1de>
			board[r][c]   = 0;
    254c:	fc 01       	movw	r30, r24
    254e:	ee 0f       	add	r30, r30
    2550:	ff 1f       	adc	r31, r31
    2552:	ee 0f       	add	r30, r30
    2554:	ff 1f       	adc	r31, r31
    2556:	ee 0f       	add	r30, r30
    2558:	ff 1f       	adc	r31, r31
    255a:	e8 0f       	add	r30, r24
    255c:	f9 1f       	adc	r31, r25
    255e:	df 01       	movw	r26, r30
    2560:	a6 0f       	add	r26, r22
    2562:	b7 1f       	adc	r27, r23
    2564:	aa 0f       	add	r26, r26
    2566:	bb 1f       	adc	r27, r27
    2568:	ac 5a       	subi	r26, 0xAC	; 172
    256a:	be 4f       	sbci	r27, 0xFE	; 254
    256c:	11 96       	adiw	r26, 0x01	; 1
    256e:	1c 92       	st	X, r1
    2570:	1e 92       	st	-X, r1
			board[r][c-1] = 0;
    2572:	db 01       	movw	r26, r22
    2574:	11 97       	sbiw	r26, 0x01	; 1
    2576:	ae 0f       	add	r26, r30
    2578:	bf 1f       	adc	r27, r31
    257a:	aa 0f       	add	r26, r26
    257c:	bb 1f       	adc	r27, r27
    257e:	ac 5a       	subi	r26, 0xAC	; 172
    2580:	be 4f       	sbci	r27, 0xFE	; 254
    2582:	11 96       	adiw	r26, 0x01	; 1
    2584:	1c 92       	st	X, r1
    2586:	1e 92       	st	-X, r1
			board[r][c+1] = 0;
    2588:	9b 01       	movw	r18, r22
    258a:	2f 5f       	subi	r18, 0xFF	; 255
    258c:	3f 4f       	sbci	r19, 0xFF	; 255
    258e:	e2 0f       	add	r30, r18
    2590:	f3 1f       	adc	r31, r19
    2592:	ee 0f       	add	r30, r30
    2594:	ff 1f       	adc	r31, r31
    2596:	ec 5a       	subi	r30, 0xAC	; 172
    2598:	fe 4f       	sbci	r31, 0xFE	; 254
    259a:	11 82       	std	Z+1, r1	; 0x01
    259c:	10 82       	st	Z, r1
			board[r+1][c] = 0;
    259e:	01 96       	adiw	r24, 0x01	; 1
    25a0:	fc 01       	movw	r30, r24
    25a2:	ee 0f       	add	r30, r30
    25a4:	ff 1f       	adc	r31, r31
    25a6:	ee 0f       	add	r30, r30
    25a8:	ff 1f       	adc	r31, r31
    25aa:	ee 0f       	add	r30, r30
    25ac:	ff 1f       	adc	r31, r31
    25ae:	e8 0f       	add	r30, r24
    25b0:	f9 1f       	adc	r31, r25
    25b2:	e6 0f       	add	r30, r22
    25b4:	f7 1f       	adc	r31, r23
    25b6:	ee 0f       	add	r30, r30
    25b8:	ff 1f       	adc	r31, r31
    25ba:	ec 5a       	subi	r30, 0xAC	; 172
    25bc:	fe 4f       	sbci	r31, 0xFE	; 254
    25be:	11 82       	std	Z+1, r1	; 0x01
    25c0:	10 82       	st	Z, r1
    25c2:	08 95       	ret
		}
		else if (version % 4 == 3){
    25c4:	20 91 50 01 	lds	r18, 0x0150	; 0x800150 <version>
    25c8:	30 91 51 01 	lds	r19, 0x0151	; 0x800151 <version+0x1>
    25cc:	23 70       	andi	r18, 0x03	; 3
    25ce:	30 78       	andi	r19, 0x80	; 128
    25d0:	33 23       	and	r19, r19
    25d2:	34 f4       	brge	.+12     	; 0x25e0 <removeBLOCKS+0x1fa>
    25d4:	21 50       	subi	r18, 0x01	; 1
    25d6:	31 09       	sbc	r19, r1
    25d8:	2c 6f       	ori	r18, 0xFC	; 252
    25da:	3f 6f       	ori	r19, 0xFF	; 255
    25dc:	2f 5f       	subi	r18, 0xFF	; 255
    25de:	3f 4f       	sbci	r19, 0xFF	; 255
    25e0:	23 30       	cpi	r18, 0x03	; 3
    25e2:	31 05       	cpc	r19, r1
    25e4:	09 f0       	breq	.+2      	; 0x25e8 <removeBLOCKS+0x202>
    25e6:	83 c3       	rjmp	.+1798   	; 0x2cee <removeBLOCKS+0x908>
			board[r][c]   = 0;
    25e8:	fc 01       	movw	r30, r24
    25ea:	ee 0f       	add	r30, r30
    25ec:	ff 1f       	adc	r31, r31
    25ee:	ee 0f       	add	r30, r30
    25f0:	ff 1f       	adc	r31, r31
    25f2:	ee 0f       	add	r30, r30
    25f4:	ff 1f       	adc	r31, r31
    25f6:	af 01       	movw	r20, r30
    25f8:	48 0f       	add	r20, r24
    25fa:	59 1f       	adc	r21, r25
    25fc:	da 01       	movw	r26, r20
    25fe:	a6 0f       	add	r26, r22
    2600:	b7 1f       	adc	r27, r23
    2602:	aa 0f       	add	r26, r26
    2604:	bb 1f       	adc	r27, r27
    2606:	ac 5a       	subi	r26, 0xAC	; 172
    2608:	be 4f       	sbci	r27, 0xFE	; 254
    260a:	11 96       	adiw	r26, 0x01	; 1
    260c:	1c 92       	st	X, r1
    260e:	1e 92       	st	-X, r1
			board[r-1][c] = 0;
    2610:	9c 01       	movw	r18, r24
    2612:	21 50       	subi	r18, 0x01	; 1
    2614:	31 09       	sbc	r19, r1
    2616:	f9 01       	movw	r30, r18
    2618:	ee 0f       	add	r30, r30
    261a:	ff 1f       	adc	r31, r31
    261c:	ee 0f       	add	r30, r30
    261e:	ff 1f       	adc	r31, r31
    2620:	ee 0f       	add	r30, r30
    2622:	ff 1f       	adc	r31, r31
    2624:	e2 0f       	add	r30, r18
    2626:	f3 1f       	adc	r31, r19
    2628:	e6 0f       	add	r30, r22
    262a:	f7 1f       	adc	r31, r23
    262c:	ee 0f       	add	r30, r30
    262e:	ff 1f       	adc	r31, r31
    2630:	ec 5a       	subi	r30, 0xAC	; 172
    2632:	fe 4f       	sbci	r31, 0xFE	; 254
    2634:	11 82       	std	Z+1, r1	; 0x01
    2636:	10 82       	st	Z, r1
			board[r][c+1] = 0;
    2638:	9b 01       	movw	r18, r22
    263a:	2f 5f       	subi	r18, 0xFF	; 255
    263c:	3f 4f       	sbci	r19, 0xFF	; 255
    263e:	fa 01       	movw	r30, r20
    2640:	e2 0f       	add	r30, r18
    2642:	f3 1f       	adc	r31, r19
    2644:	ee 0f       	add	r30, r30
    2646:	ff 1f       	adc	r31, r31
    2648:	ec 5a       	subi	r30, 0xAC	; 172
    264a:	fe 4f       	sbci	r31, 0xFE	; 254
    264c:	11 82       	std	Z+1, r1	; 0x01
    264e:	10 82       	st	Z, r1
			board[r+1][c] = 0;
    2650:	01 96       	adiw	r24, 0x01	; 1
    2652:	fc 01       	movw	r30, r24
    2654:	ee 0f       	add	r30, r30
    2656:	ff 1f       	adc	r31, r31
    2658:	ee 0f       	add	r30, r30
    265a:	ff 1f       	adc	r31, r31
    265c:	ee 0f       	add	r30, r30
    265e:	ff 1f       	adc	r31, r31
    2660:	e8 0f       	add	r30, r24
    2662:	f9 1f       	adc	r31, r25
    2664:	e6 0f       	add	r30, r22
    2666:	f7 1f       	adc	r31, r23
    2668:	ee 0f       	add	r30, r30
    266a:	ff 1f       	adc	r31, r31
    266c:	ec 5a       	subi	r30, 0xAC	; 172
    266e:	fe 4f       	sbci	r31, 0xFE	; 254
    2670:	11 82       	std	Z+1, r1	; 0x01
    2672:	10 82       	st	Z, r1
    2674:	08 95       	ret
		}
	}
	else if (type == 2) {
    2676:	42 30       	cpi	r20, 0x02	; 2
    2678:	51 05       	cpc	r21, r1
    267a:	09 f0       	breq	.+2      	; 0x267e <removeBLOCKS+0x298>
    267c:	78 c0       	rjmp	.+240    	; 0x276e <removeBLOCKS+0x388>
		if (version % 2 == 0){
    267e:	20 91 50 01 	lds	r18, 0x0150	; 0x800150 <version>
    2682:	30 91 51 01 	lds	r19, 0x0151	; 0x800151 <version+0x1>
    2686:	20 fd       	sbrc	r18, 0
    2688:	28 c0       	rjmp	.+80     	; 0x26da <removeBLOCKS+0x2f4>
			board[r][c]   = 0;
    268a:	fc 01       	movw	r30, r24
    268c:	ee 0f       	add	r30, r30
    268e:	ff 1f       	adc	r31, r31
    2690:	ee 0f       	add	r30, r30
    2692:	ff 1f       	adc	r31, r31
    2694:	ee 0f       	add	r30, r30
    2696:	ff 1f       	adc	r31, r31
    2698:	8e 0f       	add	r24, r30
    269a:	9f 1f       	adc	r25, r31
    269c:	fc 01       	movw	r30, r24
    269e:	e6 0f       	add	r30, r22
    26a0:	f7 1f       	adc	r31, r23
    26a2:	ee 0f       	add	r30, r30
    26a4:	ff 1f       	adc	r31, r31
    26a6:	ec 5a       	subi	r30, 0xAC	; 172
    26a8:	fe 4f       	sbci	r31, 0xFE	; 254
    26aa:	11 82       	std	Z+1, r1	; 0x01
    26ac:	10 82       	st	Z, r1
			board[r][c-1] = 0;
    26ae:	db 01       	movw	r26, r22
    26b0:	11 97       	sbiw	r26, 0x01	; 1
    26b2:	a8 0f       	add	r26, r24
    26b4:	b9 1f       	adc	r27, r25
    26b6:	aa 0f       	add	r26, r26
    26b8:	bb 1f       	adc	r27, r27
    26ba:	ac 5a       	subi	r26, 0xAC	; 172
    26bc:	be 4f       	sbci	r27, 0xFE	; 254
    26be:	11 96       	adiw	r26, 0x01	; 1
    26c0:	1c 92       	st	X, r1
    26c2:	1e 92       	st	-X, r1
			board[r][c+1] = 0;
    26c4:	fb 01       	movw	r30, r22
    26c6:	31 96       	adiw	r30, 0x01	; 1
    26c8:	e8 0f       	add	r30, r24
    26ca:	f9 1f       	adc	r31, r25
    26cc:	ee 0f       	add	r30, r30
    26ce:	ff 1f       	adc	r31, r31
    26d0:	ec 5a       	subi	r30, 0xAC	; 172
    26d2:	fe 4f       	sbci	r31, 0xFE	; 254
    26d4:	11 82       	std	Z+1, r1	; 0x01
    26d6:	10 82       	st	Z, r1
    26d8:	08 95       	ret
		}
		else if (version % 2 == 1){
    26da:	20 91 50 01 	lds	r18, 0x0150	; 0x800150 <version>
    26de:	30 91 51 01 	lds	r19, 0x0151	; 0x800151 <version+0x1>
    26e2:	21 70       	andi	r18, 0x01	; 1
    26e4:	30 78       	andi	r19, 0x80	; 128
    26e6:	33 23       	and	r19, r19
    26e8:	34 f4       	brge	.+12     	; 0x26f6 <removeBLOCKS+0x310>
    26ea:	21 50       	subi	r18, 0x01	; 1
    26ec:	31 09       	sbc	r19, r1
    26ee:	2e 6f       	ori	r18, 0xFE	; 254
    26f0:	3f 6f       	ori	r19, 0xFF	; 255
    26f2:	2f 5f       	subi	r18, 0xFF	; 255
    26f4:	3f 4f       	sbci	r19, 0xFF	; 255
    26f6:	21 30       	cpi	r18, 0x01	; 1
    26f8:	31 05       	cpc	r19, r1
    26fa:	09 f0       	breq	.+2      	; 0x26fe <removeBLOCKS+0x318>
    26fc:	f8 c2       	rjmp	.+1520   	; 0x2cee <removeBLOCKS+0x908>
			board[r][c]   = 0;
    26fe:	fc 01       	movw	r30, r24
    2700:	ee 0f       	add	r30, r30
    2702:	ff 1f       	adc	r31, r31
    2704:	ee 0f       	add	r30, r30
    2706:	ff 1f       	adc	r31, r31
    2708:	ee 0f       	add	r30, r30
    270a:	ff 1f       	adc	r31, r31
    270c:	e8 0f       	add	r30, r24
    270e:	f9 1f       	adc	r31, r25
    2710:	e6 0f       	add	r30, r22
    2712:	f7 1f       	adc	r31, r23
    2714:	ee 0f       	add	r30, r30
    2716:	ff 1f       	adc	r31, r31
    2718:	ec 5a       	subi	r30, 0xAC	; 172
    271a:	fe 4f       	sbci	r31, 0xFE	; 254
    271c:	11 82       	std	Z+1, r1	; 0x01
    271e:	10 82       	st	Z, r1
			board[r-1][c] = 0;
    2720:	9c 01       	movw	r18, r24
    2722:	21 50       	subi	r18, 0x01	; 1
    2724:	31 09       	sbc	r19, r1
    2726:	f9 01       	movw	r30, r18
    2728:	ee 0f       	add	r30, r30
    272a:	ff 1f       	adc	r31, r31
    272c:	ee 0f       	add	r30, r30
    272e:	ff 1f       	adc	r31, r31
    2730:	ee 0f       	add	r30, r30
    2732:	ff 1f       	adc	r31, r31
    2734:	e2 0f       	add	r30, r18
    2736:	f3 1f       	adc	r31, r19
    2738:	e6 0f       	add	r30, r22
    273a:	f7 1f       	adc	r31, r23
    273c:	ee 0f       	add	r30, r30
    273e:	ff 1f       	adc	r31, r31
    2740:	ec 5a       	subi	r30, 0xAC	; 172
    2742:	fe 4f       	sbci	r31, 0xFE	; 254
    2744:	11 82       	std	Z+1, r1	; 0x01
    2746:	10 82       	st	Z, r1
			board[r+1][c] = 0;
    2748:	01 96       	adiw	r24, 0x01	; 1
    274a:	fc 01       	movw	r30, r24
    274c:	ee 0f       	add	r30, r30
    274e:	ff 1f       	adc	r31, r31
    2750:	ee 0f       	add	r30, r30
    2752:	ff 1f       	adc	r31, r31
    2754:	ee 0f       	add	r30, r30
    2756:	ff 1f       	adc	r31, r31
    2758:	e8 0f       	add	r30, r24
    275a:	f9 1f       	adc	r31, r25
    275c:	e6 0f       	add	r30, r22
    275e:	f7 1f       	adc	r31, r23
    2760:	ee 0f       	add	r30, r30
    2762:	ff 1f       	adc	r31, r31
    2764:	ec 5a       	subi	r30, 0xAC	; 172
    2766:	fe 4f       	sbci	r31, 0xFE	; 254
    2768:	11 82       	std	Z+1, r1	; 0x01
    276a:	10 82       	st	Z, r1
    276c:	08 95       	ret
		}
	}
	else if (type == 3) {
    276e:	43 30       	cpi	r20, 0x03	; 3
    2770:	51 05       	cpc	r21, r1
    2772:	d9 f5       	brne	.+118    	; 0x27ea <removeBLOCKS+0x404>
		board[r][c]     = 0;
    2774:	9c 01       	movw	r18, r24
    2776:	22 0f       	add	r18, r18
    2778:	33 1f       	adc	r19, r19
    277a:	22 0f       	add	r18, r18
    277c:	33 1f       	adc	r19, r19
    277e:	22 0f       	add	r18, r18
    2780:	33 1f       	adc	r19, r19
    2782:	28 0f       	add	r18, r24
    2784:	39 1f       	adc	r19, r25
    2786:	f9 01       	movw	r30, r18
    2788:	e6 0f       	add	r30, r22
    278a:	f7 1f       	adc	r31, r23
    278c:	ee 0f       	add	r30, r30
    278e:	ff 1f       	adc	r31, r31
    2790:	ec 5a       	subi	r30, 0xAC	; 172
    2792:	fe 4f       	sbci	r31, 0xFE	; 254
    2794:	11 82       	std	Z+1, r1	; 0x01
    2796:	10 82       	st	Z, r1
		board[r][c+1]   = 0;
    2798:	ab 01       	movw	r20, r22
    279a:	4f 5f       	subi	r20, 0xFF	; 255
    279c:	5f 4f       	sbci	r21, 0xFF	; 255
    279e:	f9 01       	movw	r30, r18
    27a0:	e4 0f       	add	r30, r20
    27a2:	f5 1f       	adc	r31, r21
    27a4:	ee 0f       	add	r30, r30
    27a6:	ff 1f       	adc	r31, r31
    27a8:	ec 5a       	subi	r30, 0xAC	; 172
    27aa:	fe 4f       	sbci	r31, 0xFE	; 254
    27ac:	11 82       	std	Z+1, r1	; 0x01
    27ae:	10 82       	st	Z, r1
		board[r-1][c]   = 0;
    27b0:	01 97       	sbiw	r24, 0x01	; 1
    27b2:	fc 01       	movw	r30, r24
    27b4:	ee 0f       	add	r30, r30
    27b6:	ff 1f       	adc	r31, r31
    27b8:	ee 0f       	add	r30, r30
    27ba:	ff 1f       	adc	r31, r31
    27bc:	ee 0f       	add	r30, r30
    27be:	ff 1f       	adc	r31, r31
    27c0:	8e 0f       	add	r24, r30
    27c2:	9f 1f       	adc	r25, r31
    27c4:	fc 01       	movw	r30, r24
    27c6:	e6 0f       	add	r30, r22
    27c8:	f7 1f       	adc	r31, r23
    27ca:	ee 0f       	add	r30, r30
    27cc:	ff 1f       	adc	r31, r31
    27ce:	ec 5a       	subi	r30, 0xAC	; 172
    27d0:	fe 4f       	sbci	r31, 0xFE	; 254
    27d2:	11 82       	std	Z+1, r1	; 0x01
    27d4:	10 82       	st	Z, r1
		board[r-1][c+1] = 0;
    27d6:	fc 01       	movw	r30, r24
    27d8:	e4 0f       	add	r30, r20
    27da:	f5 1f       	adc	r31, r21
    27dc:	ee 0f       	add	r30, r30
    27de:	ff 1f       	adc	r31, r31
    27e0:	ec 5a       	subi	r30, 0xAC	; 172
    27e2:	fe 4f       	sbci	r31, 0xFE	; 254
    27e4:	11 82       	std	Z+1, r1	; 0x01
    27e6:	10 82       	st	Z, r1
    27e8:	08 95       	ret
	}
	else if (type == 4) {
    27ea:	44 30       	cpi	r20, 0x04	; 4
    27ec:	51 05       	cpc	r21, r1
    27ee:	09 f0       	breq	.+2      	; 0x27f2 <removeBLOCKS+0x40c>
    27f0:	40 c1       	rjmp	.+640    	; 0x2a72 <removeBLOCKS+0x68c>
		if (version % 4 == 0){
    27f2:	20 91 50 01 	lds	r18, 0x0150	; 0x800150 <version>
    27f6:	30 91 51 01 	lds	r19, 0x0151	; 0x800151 <version+0x1>
    27fa:	23 70       	andi	r18, 0x03	; 3
    27fc:	33 27       	eor	r19, r19
    27fe:	23 2b       	or	r18, r19
    2800:	09 f0       	breq	.+2      	; 0x2804 <removeBLOCKS+0x41e>
    2802:	45 c0       	rjmp	.+138    	; 0x288e <removeBLOCKS+0x4a8>
			board[r][c]     = 0;
    2804:	fc 01       	movw	r30, r24
    2806:	ee 0f       	add	r30, r30
    2808:	ff 1f       	adc	r31, r31
    280a:	ee 0f       	add	r30, r30
    280c:	ff 1f       	adc	r31, r31
    280e:	ee 0f       	add	r30, r30
    2810:	ff 1f       	adc	r31, r31
    2812:	e8 0f       	add	r30, r24
    2814:	f9 1f       	adc	r31, r25
    2816:	e6 0f       	add	r30, r22
    2818:	f7 1f       	adc	r31, r23
    281a:	ee 0f       	add	r30, r30
    281c:	ff 1f       	adc	r31, r31
    281e:	ec 5a       	subi	r30, 0xAC	; 172
    2820:	fe 4f       	sbci	r31, 0xFE	; 254
    2822:	11 82       	std	Z+1, r1	; 0x01
    2824:	10 82       	st	Z, r1
			board[r+1][c-1] = 0;
    2826:	9c 01       	movw	r18, r24
    2828:	2f 5f       	subi	r18, 0xFF	; 255
    282a:	3f 4f       	sbci	r19, 0xFF	; 255
    282c:	db 01       	movw	r26, r22
    282e:	11 97       	sbiw	r26, 0x01	; 1
    2830:	f9 01       	movw	r30, r18
    2832:	ee 0f       	add	r30, r30
    2834:	ff 1f       	adc	r31, r31
    2836:	ee 0f       	add	r30, r30
    2838:	ff 1f       	adc	r31, r31
    283a:	ee 0f       	add	r30, r30
    283c:	ff 1f       	adc	r31, r31
    283e:	e2 0f       	add	r30, r18
    2840:	f3 1f       	adc	r31, r19
    2842:	ae 0f       	add	r26, r30
    2844:	bf 1f       	adc	r27, r31
    2846:	aa 0f       	add	r26, r26
    2848:	bb 1f       	adc	r27, r27
    284a:	ac 5a       	subi	r26, 0xAC	; 172
    284c:	be 4f       	sbci	r27, 0xFE	; 254
    284e:	11 96       	adiw	r26, 0x01	; 1
    2850:	1c 92       	st	X, r1
    2852:	1e 92       	st	-X, r1
			board[r-1][c]   = 0;
    2854:	01 97       	sbiw	r24, 0x01	; 1
    2856:	dc 01       	movw	r26, r24
    2858:	aa 0f       	add	r26, r26
    285a:	bb 1f       	adc	r27, r27
    285c:	aa 0f       	add	r26, r26
    285e:	bb 1f       	adc	r27, r27
    2860:	aa 0f       	add	r26, r26
    2862:	bb 1f       	adc	r27, r27
    2864:	8a 0f       	add	r24, r26
    2866:	9b 1f       	adc	r25, r27
    2868:	dc 01       	movw	r26, r24
    286a:	a6 0f       	add	r26, r22
    286c:	b7 1f       	adc	r27, r23
    286e:	aa 0f       	add	r26, r26
    2870:	bb 1f       	adc	r27, r27
    2872:	ac 5a       	subi	r26, 0xAC	; 172
    2874:	be 4f       	sbci	r27, 0xFE	; 254
    2876:	11 96       	adiw	r26, 0x01	; 1
    2878:	1c 92       	st	X, r1
    287a:	1e 92       	st	-X, r1
			board[r+1][c]   = 0;
    287c:	e6 0f       	add	r30, r22
    287e:	f7 1f       	adc	r31, r23
    2880:	ee 0f       	add	r30, r30
    2882:	ff 1f       	adc	r31, r31
    2884:	ec 5a       	subi	r30, 0xAC	; 172
    2886:	fe 4f       	sbci	r31, 0xFE	; 254
    2888:	11 82       	std	Z+1, r1	; 0x01
    288a:	10 82       	st	Z, r1
    288c:	08 95       	ret
		}
		else if (version % 4 == 1){
    288e:	20 91 50 01 	lds	r18, 0x0150	; 0x800150 <version>
    2892:	30 91 51 01 	lds	r19, 0x0151	; 0x800151 <version+0x1>
    2896:	23 70       	andi	r18, 0x03	; 3
    2898:	30 78       	andi	r19, 0x80	; 128
    289a:	33 23       	and	r19, r19
    289c:	34 f4       	brge	.+12     	; 0x28aa <removeBLOCKS+0x4c4>
    289e:	21 50       	subi	r18, 0x01	; 1
    28a0:	31 09       	sbc	r19, r1
    28a2:	2c 6f       	ori	r18, 0xFC	; 252
    28a4:	3f 6f       	ori	r19, 0xFF	; 255
    28a6:	2f 5f       	subi	r18, 0xFF	; 255
    28a8:	3f 4f       	sbci	r19, 0xFF	; 255
    28aa:	21 30       	cpi	r18, 0x01	; 1
    28ac:	31 05       	cpc	r19, r1
    28ae:	e1 f5       	brne	.+120    	; 0x2928 <removeBLOCKS+0x542>
			board[r][c]   = 0;
    28b0:	fc 01       	movw	r30, r24
    28b2:	ee 0f       	add	r30, r30
    28b4:	ff 1f       	adc	r31, r31
    28b6:	ee 0f       	add	r30, r30
    28b8:	ff 1f       	adc	r31, r31
    28ba:	ee 0f       	add	r30, r30
    28bc:	ff 1f       	adc	r31, r31
    28be:	af 01       	movw	r20, r30
    28c0:	48 0f       	add	r20, r24
    28c2:	59 1f       	adc	r21, r25
    28c4:	fa 01       	movw	r30, r20
    28c6:	e6 0f       	add	r30, r22
    28c8:	f7 1f       	adc	r31, r23
    28ca:	ee 0f       	add	r30, r30
    28cc:	ff 1f       	adc	r31, r31
    28ce:	ec 5a       	subi	r30, 0xAC	; 172
    28d0:	fe 4f       	sbci	r31, 0xFE	; 254
    28d2:	11 82       	std	Z+1, r1	; 0x01
    28d4:	10 82       	st	Z, r1
			board[r][c+1] = 0;
    28d6:	9b 01       	movw	r18, r22
    28d8:	2f 5f       	subi	r18, 0xFF	; 255
    28da:	3f 4f       	sbci	r19, 0xFF	; 255
    28dc:	fa 01       	movw	r30, r20
    28de:	e2 0f       	add	r30, r18
    28e0:	f3 1f       	adc	r31, r19
    28e2:	ee 0f       	add	r30, r30
    28e4:	ff 1f       	adc	r31, r31
    28e6:	ec 5a       	subi	r30, 0xAC	; 172
    28e8:	fe 4f       	sbci	r31, 0xFE	; 254
    28ea:	11 82       	std	Z+1, r1	; 0x01
    28ec:	10 82       	st	Z, r1
			board[r][c-1] = 0;
    28ee:	fb 01       	movw	r30, r22
    28f0:	31 97       	sbiw	r30, 0x01	; 1
    28f2:	e4 0f       	add	r30, r20
    28f4:	f5 1f       	adc	r31, r21
    28f6:	ee 0f       	add	r30, r30
    28f8:	ff 1f       	adc	r31, r31
    28fa:	ec 5a       	subi	r30, 0xAC	; 172
    28fc:	fe 4f       	sbci	r31, 0xFE	; 254
    28fe:	11 82       	std	Z+1, r1	; 0x01
    2900:	10 82       	st	Z, r1
			board[r+1][c+1] = 0;
    2902:	01 96       	adiw	r24, 0x01	; 1
    2904:	fc 01       	movw	r30, r24
    2906:	ee 0f       	add	r30, r30
    2908:	ff 1f       	adc	r31, r31
    290a:	ee 0f       	add	r30, r30
    290c:	ff 1f       	adc	r31, r31
    290e:	ee 0f       	add	r30, r30
    2910:	ff 1f       	adc	r31, r31
    2912:	e8 0f       	add	r30, r24
    2914:	f9 1f       	adc	r31, r25
    2916:	e2 0f       	add	r30, r18
    2918:	f3 1f       	adc	r31, r19
    291a:	ee 0f       	add	r30, r30
    291c:	ff 1f       	adc	r31, r31
    291e:	ec 5a       	subi	r30, 0xAC	; 172
    2920:	fe 4f       	sbci	r31, 0xFE	; 254
    2922:	11 82       	std	Z+1, r1	; 0x01
    2924:	10 82       	st	Z, r1
    2926:	08 95       	ret
		}
		else if (version % 4 == 2){
    2928:	20 91 50 01 	lds	r18, 0x0150	; 0x800150 <version>
    292c:	30 91 51 01 	lds	r19, 0x0151	; 0x800151 <version+0x1>
    2930:	23 70       	andi	r18, 0x03	; 3
    2932:	30 78       	andi	r19, 0x80	; 128
    2934:	33 23       	and	r19, r19
    2936:	34 f4       	brge	.+12     	; 0x2944 <removeBLOCKS+0x55e>
    2938:	21 50       	subi	r18, 0x01	; 1
    293a:	31 09       	sbc	r19, r1
    293c:	2c 6f       	ori	r18, 0xFC	; 252
    293e:	3f 6f       	ori	r19, 0xFF	; 255
    2940:	2f 5f       	subi	r18, 0xFF	; 255
    2942:	3f 4f       	sbci	r19, 0xFF	; 255
    2944:	22 30       	cpi	r18, 0x02	; 2
    2946:	31 05       	cpc	r19, r1
    2948:	09 f0       	breq	.+2      	; 0x294c <removeBLOCKS+0x566>
    294a:	45 c0       	rjmp	.+138    	; 0x29d6 <removeBLOCKS+0x5f0>
			board[r][c]   = 0;
    294c:	fc 01       	movw	r30, r24
    294e:	ee 0f       	add	r30, r30
    2950:	ff 1f       	adc	r31, r31
    2952:	ee 0f       	add	r30, r30
    2954:	ff 1f       	adc	r31, r31
    2956:	ee 0f       	add	r30, r30
    2958:	ff 1f       	adc	r31, r31
    295a:	e8 0f       	add	r30, r24
    295c:	f9 1f       	adc	r31, r25
    295e:	e6 0f       	add	r30, r22
    2960:	f7 1f       	adc	r31, r23
    2962:	ee 0f       	add	r30, r30
    2964:	ff 1f       	adc	r31, r31
    2966:	ec 5a       	subi	r30, 0xAC	; 172
    2968:	fe 4f       	sbci	r31, 0xFE	; 254
    296a:	11 82       	std	Z+1, r1	; 0x01
    296c:	10 82       	st	Z, r1
			board[r-1][c+1] = 0;
    296e:	9c 01       	movw	r18, r24
    2970:	21 50       	subi	r18, 0x01	; 1
    2972:	31 09       	sbc	r19, r1
    2974:	db 01       	movw	r26, r22
    2976:	11 96       	adiw	r26, 0x01	; 1
    2978:	f9 01       	movw	r30, r18
    297a:	ee 0f       	add	r30, r30
    297c:	ff 1f       	adc	r31, r31
    297e:	ee 0f       	add	r30, r30
    2980:	ff 1f       	adc	r31, r31
    2982:	ee 0f       	add	r30, r30
    2984:	ff 1f       	adc	r31, r31
    2986:	e2 0f       	add	r30, r18
    2988:	f3 1f       	adc	r31, r19
    298a:	ae 0f       	add	r26, r30
    298c:	bf 1f       	adc	r27, r31
    298e:	aa 0f       	add	r26, r26
    2990:	bb 1f       	adc	r27, r27
    2992:	ac 5a       	subi	r26, 0xAC	; 172
    2994:	be 4f       	sbci	r27, 0xFE	; 254
    2996:	11 96       	adiw	r26, 0x01	; 1
    2998:	1c 92       	st	X, r1
    299a:	1e 92       	st	-X, r1
			board[r+1][c] = 0;
    299c:	01 96       	adiw	r24, 0x01	; 1
    299e:	dc 01       	movw	r26, r24
    29a0:	aa 0f       	add	r26, r26
    29a2:	bb 1f       	adc	r27, r27
    29a4:	aa 0f       	add	r26, r26
    29a6:	bb 1f       	adc	r27, r27
    29a8:	aa 0f       	add	r26, r26
    29aa:	bb 1f       	adc	r27, r27
    29ac:	8a 0f       	add	r24, r26
    29ae:	9b 1f       	adc	r25, r27
    29b0:	dc 01       	movw	r26, r24
    29b2:	a6 0f       	add	r26, r22
    29b4:	b7 1f       	adc	r27, r23
    29b6:	aa 0f       	add	r26, r26
    29b8:	bb 1f       	adc	r27, r27
    29ba:	ac 5a       	subi	r26, 0xAC	; 172
    29bc:	be 4f       	sbci	r27, 0xFE	; 254
    29be:	11 96       	adiw	r26, 0x01	; 1
    29c0:	1c 92       	st	X, r1
    29c2:	1e 92       	st	-X, r1
			board[r-1][c] = 0;
    29c4:	e6 0f       	add	r30, r22
    29c6:	f7 1f       	adc	r31, r23
    29c8:	ee 0f       	add	r30, r30
    29ca:	ff 1f       	adc	r31, r31
    29cc:	ec 5a       	subi	r30, 0xAC	; 172
    29ce:	fe 4f       	sbci	r31, 0xFE	; 254
    29d0:	11 82       	std	Z+1, r1	; 0x01
    29d2:	10 82       	st	Z, r1
    29d4:	08 95       	ret
		}
		else if (version % 4 == 3){
    29d6:	20 91 50 01 	lds	r18, 0x0150	; 0x800150 <version>
    29da:	30 91 51 01 	lds	r19, 0x0151	; 0x800151 <version+0x1>
    29de:	23 70       	andi	r18, 0x03	; 3
    29e0:	30 78       	andi	r19, 0x80	; 128
    29e2:	33 23       	and	r19, r19
    29e4:	34 f4       	brge	.+12     	; 0x29f2 <removeBLOCKS+0x60c>
    29e6:	21 50       	subi	r18, 0x01	; 1
    29e8:	31 09       	sbc	r19, r1
    29ea:	2c 6f       	ori	r18, 0xFC	; 252
    29ec:	3f 6f       	ori	r19, 0xFF	; 255
    29ee:	2f 5f       	subi	r18, 0xFF	; 255
    29f0:	3f 4f       	sbci	r19, 0xFF	; 255
    29f2:	23 30       	cpi	r18, 0x03	; 3
    29f4:	31 05       	cpc	r19, r1
    29f6:	09 f0       	breq	.+2      	; 0x29fa <removeBLOCKS+0x614>
    29f8:	7a c1       	rjmp	.+756    	; 0x2cee <removeBLOCKS+0x908>
			board[r][c]   = 0;
    29fa:	fc 01       	movw	r30, r24
    29fc:	ee 0f       	add	r30, r30
    29fe:	ff 1f       	adc	r31, r31
    2a00:	ee 0f       	add	r30, r30
    2a02:	ff 1f       	adc	r31, r31
    2a04:	ee 0f       	add	r30, r30
    2a06:	ff 1f       	adc	r31, r31
    2a08:	af 01       	movw	r20, r30
    2a0a:	48 0f       	add	r20, r24
    2a0c:	59 1f       	adc	r21, r25
    2a0e:	fa 01       	movw	r30, r20
    2a10:	e6 0f       	add	r30, r22
    2a12:	f7 1f       	adc	r31, r23
    2a14:	ee 0f       	add	r30, r30
    2a16:	ff 1f       	adc	r31, r31
    2a18:	ec 5a       	subi	r30, 0xAC	; 172
    2a1a:	fe 4f       	sbci	r31, 0xFE	; 254
    2a1c:	11 82       	std	Z+1, r1	; 0x01
    2a1e:	10 82       	st	Z, r1
			board[r][c-1] = 0;
    2a20:	9b 01       	movw	r18, r22
    2a22:	21 50       	subi	r18, 0x01	; 1
    2a24:	31 09       	sbc	r19, r1
    2a26:	fa 01       	movw	r30, r20
    2a28:	e2 0f       	add	r30, r18
    2a2a:	f3 1f       	adc	r31, r19
    2a2c:	ee 0f       	add	r30, r30
    2a2e:	ff 1f       	adc	r31, r31
    2a30:	ec 5a       	subi	r30, 0xAC	; 172
    2a32:	fe 4f       	sbci	r31, 0xFE	; 254
    2a34:	11 82       	std	Z+1, r1	; 0x01
    2a36:	10 82       	st	Z, r1
			board[r][c+1] = 0;
    2a38:	fb 01       	movw	r30, r22
    2a3a:	31 96       	adiw	r30, 0x01	; 1
    2a3c:	e4 0f       	add	r30, r20
    2a3e:	f5 1f       	adc	r31, r21
    2a40:	ee 0f       	add	r30, r30
    2a42:	ff 1f       	adc	r31, r31
    2a44:	ec 5a       	subi	r30, 0xAC	; 172
    2a46:	fe 4f       	sbci	r31, 0xFE	; 254
    2a48:	11 82       	std	Z+1, r1	; 0x01
    2a4a:	10 82       	st	Z, r1
			board[r-1][c-1] = 0;
    2a4c:	01 97       	sbiw	r24, 0x01	; 1
    2a4e:	fc 01       	movw	r30, r24
    2a50:	ee 0f       	add	r30, r30
    2a52:	ff 1f       	adc	r31, r31
    2a54:	ee 0f       	add	r30, r30
    2a56:	ff 1f       	adc	r31, r31
    2a58:	ee 0f       	add	r30, r30
    2a5a:	ff 1f       	adc	r31, r31
    2a5c:	e8 0f       	add	r30, r24
    2a5e:	f9 1f       	adc	r31, r25
    2a60:	e2 0f       	add	r30, r18
    2a62:	f3 1f       	adc	r31, r19
    2a64:	ee 0f       	add	r30, r30
    2a66:	ff 1f       	adc	r31, r31
    2a68:	ec 5a       	subi	r30, 0xAC	; 172
    2a6a:	fe 4f       	sbci	r31, 0xFE	; 254
    2a6c:	11 82       	std	Z+1, r1	; 0x01
    2a6e:	10 82       	st	Z, r1
    2a70:	08 95       	ret
		}
	}
	else if (type ==5){
    2a72:	45 30       	cpi	r20, 0x05	; 5
    2a74:	51 05       	cpc	r21, r1
    2a76:	09 f0       	breq	.+2      	; 0x2a7a <removeBLOCKS+0x694>
    2a78:	9b c0       	rjmp	.+310    	; 0x2bb0 <removeBLOCKS+0x7ca>
		if (version % 4 == 0){
    2a7a:	20 91 50 01 	lds	r18, 0x0150	; 0x800150 <version>
    2a7e:	30 91 51 01 	lds	r19, 0x0151	; 0x800151 <version+0x1>
    2a82:	23 70       	andi	r18, 0x03	; 3
    2a84:	33 27       	eor	r19, r19
    2a86:	23 2b       	or	r18, r19
    2a88:	e1 f5       	brne	.+120    	; 0x2b02 <removeBLOCKS+0x71c>
			board[r][c]= 0;
    2a8a:	fc 01       	movw	r30, r24
    2a8c:	ee 0f       	add	r30, r30
    2a8e:	ff 1f       	adc	r31, r31
    2a90:	ee 0f       	add	r30, r30
    2a92:	ff 1f       	adc	r31, r31
    2a94:	ee 0f       	add	r30, r30
    2a96:	ff 1f       	adc	r31, r31
    2a98:	e8 0f       	add	r30, r24
    2a9a:	f9 1f       	adc	r31, r25
    2a9c:	df 01       	movw	r26, r30
    2a9e:	a6 0f       	add	r26, r22
    2aa0:	b7 1f       	adc	r27, r23
    2aa2:	aa 0f       	add	r26, r26
    2aa4:	bb 1f       	adc	r27, r27
    2aa6:	ac 5a       	subi	r26, 0xAC	; 172
    2aa8:	be 4f       	sbci	r27, 0xFE	; 254
    2aaa:	11 96       	adiw	r26, 0x01	; 1
    2aac:	1c 92       	st	X, r1
    2aae:	1e 92       	st	-X, r1
			board[r][c-1] = 0;
    2ab0:	9b 01       	movw	r18, r22
    2ab2:	21 50       	subi	r18, 0x01	; 1
    2ab4:	31 09       	sbc	r19, r1
    2ab6:	e2 0f       	add	r30, r18
    2ab8:	f3 1f       	adc	r31, r19
    2aba:	ee 0f       	add	r30, r30
    2abc:	ff 1f       	adc	r31, r31
    2abe:	ec 5a       	subi	r30, 0xAC	; 172
    2ac0:	fe 4f       	sbci	r31, 0xFE	; 254
    2ac2:	11 82       	std	Z+1, r1	; 0x01
    2ac4:	10 82       	st	Z, r1
			board[r-1][c+1] =0;
    2ac6:	01 97       	sbiw	r24, 0x01	; 1
    2ac8:	db 01       	movw	r26, r22
    2aca:	11 96       	adiw	r26, 0x01	; 1
    2acc:	fc 01       	movw	r30, r24
    2ace:	ee 0f       	add	r30, r30
    2ad0:	ff 1f       	adc	r31, r31
    2ad2:	ee 0f       	add	r30, r30
    2ad4:	ff 1f       	adc	r31, r31
    2ad6:	ee 0f       	add	r30, r30
    2ad8:	ff 1f       	adc	r31, r31
    2ada:	e8 0f       	add	r30, r24
    2adc:	f9 1f       	adc	r31, r25
    2ade:	ae 0f       	add	r26, r30
    2ae0:	bf 1f       	adc	r27, r31
    2ae2:	aa 0f       	add	r26, r26
    2ae4:	bb 1f       	adc	r27, r27
    2ae6:	ac 5a       	subi	r26, 0xAC	; 172
    2ae8:	be 4f       	sbci	r27, 0xFE	; 254
    2aea:	11 96       	adiw	r26, 0x01	; 1
    2aec:	1c 92       	st	X, r1
    2aee:	1e 92       	st	-X, r1
			board[r-1][c] = 0;
    2af0:	e6 0f       	add	r30, r22
    2af2:	f7 1f       	adc	r31, r23
    2af4:	ee 0f       	add	r30, r30
    2af6:	ff 1f       	adc	r31, r31
    2af8:	ec 5a       	subi	r30, 0xAC	; 172
    2afa:	fe 4f       	sbci	r31, 0xFE	; 254
    2afc:	11 82       	std	Z+1, r1	; 0x01
    2afe:	10 82       	st	Z, r1
    2b00:	08 95       	ret
		}
		else if (version % 4 == 1){
    2b02:	20 91 50 01 	lds	r18, 0x0150	; 0x800150 <version>
    2b06:	30 91 51 01 	lds	r19, 0x0151	; 0x800151 <version+0x1>
    2b0a:	23 70       	andi	r18, 0x03	; 3
    2b0c:	30 78       	andi	r19, 0x80	; 128
    2b0e:	33 23       	and	r19, r19
    2b10:	34 f4       	brge	.+12     	; 0x2b1e <removeBLOCKS+0x738>
    2b12:	21 50       	subi	r18, 0x01	; 1
    2b14:	31 09       	sbc	r19, r1
    2b16:	2c 6f       	ori	r18, 0xFC	; 252
    2b18:	3f 6f       	ori	r19, 0xFF	; 255
    2b1a:	2f 5f       	subi	r18, 0xFF	; 255
    2b1c:	3f 4f       	sbci	r19, 0xFF	; 255
    2b1e:	21 30       	cpi	r18, 0x01	; 1
    2b20:	31 05       	cpc	r19, r1
    2b22:	09 f0       	breq	.+2      	; 0x2b26 <removeBLOCKS+0x740>
    2b24:	e4 c0       	rjmp	.+456    	; 0x2cee <removeBLOCKS+0x908>
			board[r][c] = 0;
    2b26:	9c 01       	movw	r18, r24
    2b28:	22 0f       	add	r18, r18
    2b2a:	33 1f       	adc	r19, r19
    2b2c:	22 0f       	add	r18, r18
    2b2e:	33 1f       	adc	r19, r19
    2b30:	22 0f       	add	r18, r18
    2b32:	33 1f       	adc	r19, r19
    2b34:	28 0f       	add	r18, r24
    2b36:	39 1f       	adc	r19, r25
    2b38:	f9 01       	movw	r30, r18
    2b3a:	e6 0f       	add	r30, r22
    2b3c:	f7 1f       	adc	r31, r23
    2b3e:	ee 0f       	add	r30, r30
    2b40:	ff 1f       	adc	r31, r31
    2b42:	ec 5a       	subi	r30, 0xAC	; 172
    2b44:	fe 4f       	sbci	r31, 0xFE	; 254
    2b46:	11 82       	std	Z+1, r1	; 0x01
    2b48:	10 82       	st	Z, r1
			board[r][c+1] = 0;
    2b4a:	ab 01       	movw	r20, r22
    2b4c:	4f 5f       	subi	r20, 0xFF	; 255
    2b4e:	5f 4f       	sbci	r21, 0xFF	; 255
    2b50:	f9 01       	movw	r30, r18
    2b52:	e4 0f       	add	r30, r20
    2b54:	f5 1f       	adc	r31, r21
    2b56:	ee 0f       	add	r30, r30
    2b58:	ff 1f       	adc	r31, r31
    2b5a:	ec 5a       	subi	r30, 0xAC	; 172
    2b5c:	fe 4f       	sbci	r31, 0xFE	; 254
    2b5e:	11 82       	std	Z+1, r1	; 0x01
    2b60:	10 82       	st	Z, r1
			board[r-1][c] = 0;
    2b62:	9c 01       	movw	r18, r24
    2b64:	21 50       	subi	r18, 0x01	; 1
    2b66:	31 09       	sbc	r19, r1
    2b68:	f9 01       	movw	r30, r18
    2b6a:	ee 0f       	add	r30, r30
    2b6c:	ff 1f       	adc	r31, r31
    2b6e:	ee 0f       	add	r30, r30
    2b70:	ff 1f       	adc	r31, r31
    2b72:	ee 0f       	add	r30, r30
    2b74:	ff 1f       	adc	r31, r31
    2b76:	e2 0f       	add	r30, r18
    2b78:	f3 1f       	adc	r31, r19
    2b7a:	e6 0f       	add	r30, r22
    2b7c:	f7 1f       	adc	r31, r23
    2b7e:	ee 0f       	add	r30, r30
    2b80:	ff 1f       	adc	r31, r31
    2b82:	ec 5a       	subi	r30, 0xAC	; 172
    2b84:	fe 4f       	sbci	r31, 0xFE	; 254
    2b86:	11 82       	std	Z+1, r1	; 0x01
    2b88:	10 82       	st	Z, r1
			board[r+1][c+1] = 0;
    2b8a:	01 96       	adiw	r24, 0x01	; 1
    2b8c:	fc 01       	movw	r30, r24
    2b8e:	ee 0f       	add	r30, r30
    2b90:	ff 1f       	adc	r31, r31
    2b92:	ee 0f       	add	r30, r30
    2b94:	ff 1f       	adc	r31, r31
    2b96:	ee 0f       	add	r30, r30
    2b98:	ff 1f       	adc	r31, r31
    2b9a:	e8 0f       	add	r30, r24
    2b9c:	f9 1f       	adc	r31, r25
    2b9e:	e4 0f       	add	r30, r20
    2ba0:	f5 1f       	adc	r31, r21
    2ba2:	ee 0f       	add	r30, r30
    2ba4:	ff 1f       	adc	r31, r31
    2ba6:	ec 5a       	subi	r30, 0xAC	; 172
    2ba8:	fe 4f       	sbci	r31, 0xFE	; 254
    2baa:	11 82       	std	Z+1, r1	; 0x01
    2bac:	10 82       	st	Z, r1
    2bae:	08 95       	ret
		}
	}
	else if (type ==6){
    2bb0:	46 30       	cpi	r20, 0x06	; 6
    2bb2:	51 05       	cpc	r21, r1
    2bb4:	09 f0       	breq	.+2      	; 0x2bb8 <removeBLOCKS+0x7d2>
    2bb6:	9b c0       	rjmp	.+310    	; 0x2cee <removeBLOCKS+0x908>
		if (version % 4 == 0){
    2bb8:	20 91 50 01 	lds	r18, 0x0150	; 0x800150 <version>
    2bbc:	30 91 51 01 	lds	r19, 0x0151	; 0x800151 <version+0x1>
    2bc0:	23 70       	andi	r18, 0x03	; 3
    2bc2:	33 27       	eor	r19, r19
    2bc4:	23 2b       	or	r18, r19
    2bc6:	e1 f5       	brne	.+120    	; 0x2c40 <removeBLOCKS+0x85a>
			board[r][c]= 0;
    2bc8:	fc 01       	movw	r30, r24
    2bca:	ee 0f       	add	r30, r30
    2bcc:	ff 1f       	adc	r31, r31
    2bce:	ee 0f       	add	r30, r30
    2bd0:	ff 1f       	adc	r31, r31
    2bd2:	ee 0f       	add	r30, r30
    2bd4:	ff 1f       	adc	r31, r31
    2bd6:	e8 0f       	add	r30, r24
    2bd8:	f9 1f       	adc	r31, r25
    2bda:	df 01       	movw	r26, r30
    2bdc:	a6 0f       	add	r26, r22
    2bde:	b7 1f       	adc	r27, r23
    2be0:	aa 0f       	add	r26, r26
    2be2:	bb 1f       	adc	r27, r27
    2be4:	ac 5a       	subi	r26, 0xAC	; 172
    2be6:	be 4f       	sbci	r27, 0xFE	; 254
    2be8:	11 96       	adiw	r26, 0x01	; 1
    2bea:	1c 92       	st	X, r1
    2bec:	1e 92       	st	-X, r1
			board[r][c+1] = 0;
    2bee:	9b 01       	movw	r18, r22
    2bf0:	2f 5f       	subi	r18, 0xFF	; 255
    2bf2:	3f 4f       	sbci	r19, 0xFF	; 255
    2bf4:	e2 0f       	add	r30, r18
    2bf6:	f3 1f       	adc	r31, r19
    2bf8:	ee 0f       	add	r30, r30
    2bfa:	ff 1f       	adc	r31, r31
    2bfc:	ec 5a       	subi	r30, 0xAC	; 172
    2bfe:	fe 4f       	sbci	r31, 0xFE	; 254
    2c00:	11 82       	std	Z+1, r1	; 0x01
    2c02:	10 82       	st	Z, r1
			board[r-1][c-1] =0;
    2c04:	01 97       	sbiw	r24, 0x01	; 1
    2c06:	db 01       	movw	r26, r22
    2c08:	11 97       	sbiw	r26, 0x01	; 1
    2c0a:	fc 01       	movw	r30, r24
    2c0c:	ee 0f       	add	r30, r30
    2c0e:	ff 1f       	adc	r31, r31
    2c10:	ee 0f       	add	r30, r30
    2c12:	ff 1f       	adc	r31, r31
    2c14:	ee 0f       	add	r30, r30
    2c16:	ff 1f       	adc	r31, r31
    2c18:	e8 0f       	add	r30, r24
    2c1a:	f9 1f       	adc	r31, r25
    2c1c:	ae 0f       	add	r26, r30
    2c1e:	bf 1f       	adc	r27, r31
    2c20:	aa 0f       	add	r26, r26
    2c22:	bb 1f       	adc	r27, r27
    2c24:	ac 5a       	subi	r26, 0xAC	; 172
    2c26:	be 4f       	sbci	r27, 0xFE	; 254
    2c28:	11 96       	adiw	r26, 0x01	; 1
    2c2a:	1c 92       	st	X, r1
    2c2c:	1e 92       	st	-X, r1
			board[r-1][c] = 0;
    2c2e:	e6 0f       	add	r30, r22
    2c30:	f7 1f       	adc	r31, r23
    2c32:	ee 0f       	add	r30, r30
    2c34:	ff 1f       	adc	r31, r31
    2c36:	ec 5a       	subi	r30, 0xAC	; 172
    2c38:	fe 4f       	sbci	r31, 0xFE	; 254
    2c3a:	11 82       	std	Z+1, r1	; 0x01
    2c3c:	10 82       	st	Z, r1
    2c3e:	08 95       	ret
		}
		else if (version % 4 == 1){
    2c40:	20 91 50 01 	lds	r18, 0x0150	; 0x800150 <version>
    2c44:	30 91 51 01 	lds	r19, 0x0151	; 0x800151 <version+0x1>
    2c48:	23 70       	andi	r18, 0x03	; 3
    2c4a:	30 78       	andi	r19, 0x80	; 128
    2c4c:	33 23       	and	r19, r19
    2c4e:	34 f4       	brge	.+12     	; 0x2c5c <removeBLOCKS+0x876>
    2c50:	21 50       	subi	r18, 0x01	; 1
    2c52:	31 09       	sbc	r19, r1
    2c54:	2c 6f       	ori	r18, 0xFC	; 252
    2c56:	3f 6f       	ori	r19, 0xFF	; 255
    2c58:	2f 5f       	subi	r18, 0xFF	; 255
    2c5a:	3f 4f       	sbci	r19, 0xFF	; 255
    2c5c:	21 30       	cpi	r18, 0x01	; 1
    2c5e:	31 05       	cpc	r19, r1
    2c60:	09 f0       	breq	.+2      	; 0x2c64 <removeBLOCKS+0x87e>
    2c62:	45 c0       	rjmp	.+138    	; 0x2cee <removeBLOCKS+0x908>
			board[r][c] = 0;
    2c64:	9c 01       	movw	r18, r24
    2c66:	22 0f       	add	r18, r18
    2c68:	33 1f       	adc	r19, r19
    2c6a:	22 0f       	add	r18, r18
    2c6c:	33 1f       	adc	r19, r19
    2c6e:	22 0f       	add	r18, r18
    2c70:	33 1f       	adc	r19, r19
    2c72:	28 0f       	add	r18, r24
    2c74:	39 1f       	adc	r19, r25
    2c76:	f9 01       	movw	r30, r18
    2c78:	e6 0f       	add	r30, r22
    2c7a:	f7 1f       	adc	r31, r23
    2c7c:	ee 0f       	add	r30, r30
    2c7e:	ff 1f       	adc	r31, r31
    2c80:	ec 5a       	subi	r30, 0xAC	; 172
    2c82:	fe 4f       	sbci	r31, 0xFE	; 254
    2c84:	11 82       	std	Z+1, r1	; 0x01
    2c86:	10 82       	st	Z, r1
			board[r][c+1] = 0;
    2c88:	ab 01       	movw	r20, r22
    2c8a:	4f 5f       	subi	r20, 0xFF	; 255
    2c8c:	5f 4f       	sbci	r21, 0xFF	; 255
    2c8e:	f9 01       	movw	r30, r18
    2c90:	e4 0f       	add	r30, r20
    2c92:	f5 1f       	adc	r31, r21
    2c94:	ee 0f       	add	r30, r30
    2c96:	ff 1f       	adc	r31, r31
    2c98:	ec 5a       	subi	r30, 0xAC	; 172
    2c9a:	fe 4f       	sbci	r31, 0xFE	; 254
    2c9c:	11 82       	std	Z+1, r1	; 0x01
    2c9e:	10 82       	st	Z, r1
			board[r-1][c+1] = 0;
    2ca0:	9c 01       	movw	r18, r24
    2ca2:	21 50       	subi	r18, 0x01	; 1
    2ca4:	31 09       	sbc	r19, r1
    2ca6:	f9 01       	movw	r30, r18
    2ca8:	ee 0f       	add	r30, r30
    2caa:	ff 1f       	adc	r31, r31
    2cac:	ee 0f       	add	r30, r30
    2cae:	ff 1f       	adc	r31, r31
    2cb0:	ee 0f       	add	r30, r30
    2cb2:	ff 1f       	adc	r31, r31
    2cb4:	e2 0f       	add	r30, r18
    2cb6:	f3 1f       	adc	r31, r19
    2cb8:	e4 0f       	add	r30, r20
    2cba:	f5 1f       	adc	r31, r21
    2cbc:	ee 0f       	add	r30, r30
    2cbe:	ff 1f       	adc	r31, r31
    2cc0:	ec 5a       	subi	r30, 0xAC	; 172
    2cc2:	fe 4f       	sbci	r31, 0xFE	; 254
    2cc4:	11 82       	std	Z+1, r1	; 0x01
    2cc6:	10 82       	st	Z, r1
			board[r+1][c] = 0;
    2cc8:	01 96       	adiw	r24, 0x01	; 1
    2cca:	fc 01       	movw	r30, r24
    2ccc:	ee 0f       	add	r30, r30
    2cce:	ff 1f       	adc	r31, r31
    2cd0:	ee 0f       	add	r30, r30
    2cd2:	ff 1f       	adc	r31, r31
    2cd4:	ee 0f       	add	r30, r30
    2cd6:	ff 1f       	adc	r31, r31
    2cd8:	8e 0f       	add	r24, r30
    2cda:	9f 1f       	adc	r25, r31
    2cdc:	fc 01       	movw	r30, r24
    2cde:	e6 0f       	add	r30, r22
    2ce0:	f7 1f       	adc	r31, r23
    2ce2:	ee 0f       	add	r30, r30
    2ce4:	ff 1f       	adc	r31, r31
    2ce6:	ec 5a       	subi	r30, 0xAC	; 172
    2ce8:	fe 4f       	sbci	r31, 0xFE	; 254
    2cea:	11 82       	std	Z+1, r1	; 0x01
    2cec:	10 82       	st	Z, r1
    2cee:	08 95       	ret

00002cf0 <makeBOARD>:
		}
	}
	
}

void makeBOARD(int speed){
    2cf0:	ef 92       	push	r14
    2cf2:	ff 92       	push	r15
    2cf4:	0f 93       	push	r16
    2cf6:	1f 93       	push	r17
    2cf8:	cf 93       	push	r28
    2cfa:	df 93       	push	r29
    2cfc:	cd b7       	in	r28, 0x3d	; 61
    2cfe:	de b7       	in	r29, 0x3e	; 62
    2d00:	a0 97       	sbiw	r28, 0x20	; 32
    2d02:	0f b6       	in	r0, 0x3f	; 63
    2d04:	f8 94       	cli
    2d06:	de bf       	out	0x3e, r29	; 62
    2d08:	0f be       	out	0x3f, r0	; 63
    2d0a:	cd bf       	out	0x3d, r28	; 61
    2d0c:	8c 01       	movw	r16, r24
	cli();
    2d0e:	f8 94       	cli
	int i,j,k,p;
	int valArr[16];

	for (p = 0; p < 16; p++)
    2d10:	e1 2c       	mov	r14, r1
    2d12:	f1 2c       	mov	r15, r1
    2d14:	12 c0       	rjmp	.+36     	; 0x2d3a <makeBOARD+0x4a>
	valArr[p] = getRow(p+2);
    2d16:	c7 01       	movw	r24, r14
    2d18:	02 96       	adiw	r24, 0x02	; 2
    2d1a:	0e 94 14 01 	call	0x228	; 0x228 <getRow>
    2d1e:	f7 01       	movw	r30, r14
    2d20:	ee 0f       	add	r30, r30
    2d22:	ff 1f       	adc	r31, r31
    2d24:	21 e0       	ldi	r18, 0x01	; 1
    2d26:	30 e0       	ldi	r19, 0x00	; 0
    2d28:	2c 0f       	add	r18, r28
    2d2a:	3d 1f       	adc	r19, r29
    2d2c:	e2 0f       	add	r30, r18
    2d2e:	f3 1f       	adc	r31, r19
    2d30:	91 83       	std	Z+1, r25	; 0x01
    2d32:	80 83       	st	Z, r24
void makeBOARD(int speed){
	cli();
	int i,j,k,p;
	int valArr[16];

	for (p = 0; p < 16; p++)
    2d34:	3f ef       	ldi	r19, 0xFF	; 255
    2d36:	e3 1a       	sub	r14, r19
    2d38:	f3 0a       	sbc	r15, r19
    2d3a:	80 e1       	ldi	r24, 0x10	; 16
    2d3c:	e8 16       	cp	r14, r24
    2d3e:	f1 04       	cpc	r15, r1
    2d40:	54 f3       	brlt	.-44     	; 0x2d16 <makeBOARD+0x26>
    2d42:	e1 2c       	mov	r14, r1
    2d44:	f1 2c       	mov	r15, r1
    2d46:	27 c0       	rjmp	.+78     	; 0x2d96 <makeBOARD+0xa6>
	valArr[p] = getRow(p+2);
	
	for(k = 0; k < speed; k++){
		for(i = 1; i <= 16; i++){
			int val = valArr[i-1];
    2d48:	ad 01       	movw	r20, r26
    2d4a:	41 50       	subi	r20, 0x01	; 1
    2d4c:	51 09       	sbc	r21, r1
    2d4e:	fa 01       	movw	r30, r20
    2d50:	ee 0f       	add	r30, r30
    2d52:	ff 1f       	adc	r31, r31
    2d54:	21 e0       	ldi	r18, 0x01	; 1
    2d56:	30 e0       	ldi	r19, 0x00	; 0
    2d58:	2c 0f       	add	r18, r28
    2d5a:	3d 1f       	adc	r19, r29
    2d5c:	e2 0f       	add	r30, r18
    2d5e:	f3 1f       	adc	r31, r19
    2d60:	60 81       	ld	r22, Z
			for (j = 1; j <= 10; j++){
    2d62:	81 e0       	ldi	r24, 0x01	; 1
    2d64:	90 e0       	ldi	r25, 0x00	; 0
    2d66:	0a c0       	rjmp	.+20     	; 0x2d7c <makeBOARD+0x8c>
				// change loop count to change speed, lower will be faster
				PORTA = scroll_down[i-1];
    2d68:	fa 01       	movw	r30, r20
    2d6a:	ee 0f       	add	r30, r30
    2d6c:	ff 1f       	adc	r31, r31
    2d6e:	eb 5e       	subi	r30, 0xEB	; 235
    2d70:	fe 4f       	sbci	r31, 0xFE	; 254
    2d72:	20 81       	ld	r18, Z
    2d74:	31 81       	ldd	r19, Z+1	; 0x01
    2d76:	2b bb       	out	0x1b, r18	; 27
				PORTC = val;
    2d78:	65 bb       	out	0x15, r22	; 21
	valArr[p] = getRow(p+2);
	
	for(k = 0; k < speed; k++){
		for(i = 1; i <= 16; i++){
			int val = valArr[i-1];
			for (j = 1; j <= 10; j++){
    2d7a:	01 96       	adiw	r24, 0x01	; 1
    2d7c:	8b 30       	cpi	r24, 0x0B	; 11
    2d7e:	91 05       	cpc	r25, r1
    2d80:	9c f3       	brlt	.-26     	; 0x2d68 <makeBOARD+0x78>

	for (p = 0; p < 16; p++)
	valArr[p] = getRow(p+2);
	
	for(k = 0; k < speed; k++){
		for(i = 1; i <= 16; i++){
    2d82:	11 96       	adiw	r26, 0x01	; 1
    2d84:	02 c0       	rjmp	.+4      	; 0x2d8a <makeBOARD+0x9a>
    2d86:	a1 e0       	ldi	r26, 0x01	; 1
    2d88:	b0 e0       	ldi	r27, 0x00	; 0
    2d8a:	a1 31       	cpi	r26, 0x11	; 17
    2d8c:	b1 05       	cpc	r27, r1
    2d8e:	e4 f2       	brlt	.-72     	; 0x2d48 <makeBOARD+0x58>
	int valArr[16];

	for (p = 0; p < 16; p++)
	valArr[p] = getRow(p+2);
	
	for(k = 0; k < speed; k++){
    2d90:	3f ef       	ldi	r19, 0xFF	; 255
    2d92:	e3 1a       	sub	r14, r19
    2d94:	f3 0a       	sbc	r15, r19
    2d96:	e0 16       	cp	r14, r16
    2d98:	f1 06       	cpc	r15, r17
    2d9a:	ac f3       	brlt	.-22     	; 0x2d86 <makeBOARD+0x96>
				PORTA = scroll_down[i-1];
				PORTC = val;
			}
		}
	}
	sei();
    2d9c:	78 94       	sei
}
    2d9e:	a0 96       	adiw	r28, 0x20	; 32
    2da0:	0f b6       	in	r0, 0x3f	; 63
    2da2:	f8 94       	cli
    2da4:	de bf       	out	0x3e, r29	; 62
    2da6:	0f be       	out	0x3f, r0	; 63
    2da8:	cd bf       	out	0x3d, r28	; 61
    2daa:	df 91       	pop	r29
    2dac:	cf 91       	pop	r28
    2dae:	1f 91       	pop	r17
    2db0:	0f 91       	pop	r16
    2db2:	ff 90       	pop	r15
    2db4:	ef 90       	pop	r14
    2db6:	08 95       	ret

00002db8 <rotate>:
void rotate(){
	switch(type){
    2db8:	80 91 52 01 	lds	r24, 0x0152	; 0x800152 <type>
    2dbc:	90 91 53 01 	lds	r25, 0x0153	; 0x800153 <type+0x1>
    2dc0:	84 30       	cpi	r24, 0x04	; 4
    2dc2:	91 05       	cpc	r25, r1
    2dc4:	91 f1       	breq	.+100    	; 0x2e2a <rotate+0x72>
    2dc6:	34 f4       	brge	.+12     	; 0x2dd4 <rotate+0x1c>
    2dc8:	81 30       	cpi	r24, 0x01	; 1
    2dca:	91 05       	cpc	r25, r1
    2dcc:	51 f0       	breq	.+20     	; 0x2de2 <rotate+0x2a>
    2dce:	02 97       	sbiw	r24, 0x02	; 2
    2dd0:	d1 f0       	breq	.+52     	; 0x2e06 <rotate+0x4e>
    2dd2:	60 c0       	rjmp	.+192    	; 0x2e94 <rotate+0xdc>
    2dd4:	85 30       	cpi	r24, 0x05	; 5
    2dd6:	91 05       	cpc	r25, r1
    2dd8:	d1 f1       	breq	.+116    	; 0x2e4e <rotate+0x96>
    2dda:	06 97       	sbiw	r24, 0x06	; 6
    2ddc:	09 f4       	brne	.+2      	; 0x2de0 <rotate+0x28>
    2dde:	49 c0       	rjmp	.+146    	; 0x2e72 <rotate+0xba>
    2de0:	59 c0       	rjmp	.+178    	; 0x2e94 <rotate+0xdc>
		case 1:
		version = (version + 1)%4;
    2de2:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <version>
    2de6:	90 91 51 01 	lds	r25, 0x0151	; 0x800151 <version+0x1>
    2dea:	01 96       	adiw	r24, 0x01	; 1
    2dec:	83 70       	andi	r24, 0x03	; 3
    2dee:	90 78       	andi	r25, 0x80	; 128
    2df0:	99 23       	and	r25, r25
    2df2:	24 f4       	brge	.+8      	; 0x2dfc <rotate+0x44>
    2df4:	01 97       	sbiw	r24, 0x01	; 1
    2df6:	8c 6f       	ori	r24, 0xFC	; 252
    2df8:	9f 6f       	ori	r25, 0xFF	; 255
    2dfa:	01 96       	adiw	r24, 0x01	; 1
    2dfc:	90 93 51 01 	sts	0x0151, r25	; 0x800151 <version+0x1>
    2e00:	80 93 50 01 	sts	0x0150, r24	; 0x800150 <version>
		break;
    2e04:	47 c0       	rjmp	.+142    	; 0x2e94 <rotate+0xdc>
		case 2:
		version = (version + 1)%2;
    2e06:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <version>
    2e0a:	90 91 51 01 	lds	r25, 0x0151	; 0x800151 <version+0x1>
    2e0e:	01 96       	adiw	r24, 0x01	; 1
    2e10:	81 70       	andi	r24, 0x01	; 1
    2e12:	90 78       	andi	r25, 0x80	; 128
    2e14:	99 23       	and	r25, r25
    2e16:	24 f4       	brge	.+8      	; 0x2e20 <rotate+0x68>
    2e18:	01 97       	sbiw	r24, 0x01	; 1
    2e1a:	8e 6f       	ori	r24, 0xFE	; 254
    2e1c:	9f 6f       	ori	r25, 0xFF	; 255
    2e1e:	01 96       	adiw	r24, 0x01	; 1
    2e20:	90 93 51 01 	sts	0x0151, r25	; 0x800151 <version+0x1>
    2e24:	80 93 50 01 	sts	0x0150, r24	; 0x800150 <version>
		break;
    2e28:	35 c0       	rjmp	.+106    	; 0x2e94 <rotate+0xdc>
		case 3:
		break;
		case 4:
		version = (version + 1)%4;
    2e2a:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <version>
    2e2e:	90 91 51 01 	lds	r25, 0x0151	; 0x800151 <version+0x1>
    2e32:	01 96       	adiw	r24, 0x01	; 1
    2e34:	83 70       	andi	r24, 0x03	; 3
    2e36:	90 78       	andi	r25, 0x80	; 128
    2e38:	99 23       	and	r25, r25
    2e3a:	24 f4       	brge	.+8      	; 0x2e44 <rotate+0x8c>
    2e3c:	01 97       	sbiw	r24, 0x01	; 1
    2e3e:	8c 6f       	ori	r24, 0xFC	; 252
    2e40:	9f 6f       	ori	r25, 0xFF	; 255
    2e42:	01 96       	adiw	r24, 0x01	; 1
    2e44:	90 93 51 01 	sts	0x0151, r25	; 0x800151 <version+0x1>
    2e48:	80 93 50 01 	sts	0x0150, r24	; 0x800150 <version>
		break;
    2e4c:	23 c0       	rjmp	.+70     	; 0x2e94 <rotate+0xdc>
		case 5:
		version = (version + 1)%2;
    2e4e:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <version>
    2e52:	90 91 51 01 	lds	r25, 0x0151	; 0x800151 <version+0x1>
    2e56:	01 96       	adiw	r24, 0x01	; 1
    2e58:	81 70       	andi	r24, 0x01	; 1
    2e5a:	90 78       	andi	r25, 0x80	; 128
    2e5c:	99 23       	and	r25, r25
    2e5e:	24 f4       	brge	.+8      	; 0x2e68 <rotate+0xb0>
    2e60:	01 97       	sbiw	r24, 0x01	; 1
    2e62:	8e 6f       	ori	r24, 0xFE	; 254
    2e64:	9f 6f       	ori	r25, 0xFF	; 255
    2e66:	01 96       	adiw	r24, 0x01	; 1
    2e68:	90 93 51 01 	sts	0x0151, r25	; 0x800151 <version+0x1>
    2e6c:	80 93 50 01 	sts	0x0150, r24	; 0x800150 <version>
		break;
    2e70:	11 c0       	rjmp	.+34     	; 0x2e94 <rotate+0xdc>
		case 6:
		version = (version + 1)%2;
    2e72:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <version>
    2e76:	90 91 51 01 	lds	r25, 0x0151	; 0x800151 <version+0x1>
    2e7a:	01 96       	adiw	r24, 0x01	; 1
    2e7c:	81 70       	andi	r24, 0x01	; 1
    2e7e:	90 78       	andi	r25, 0x80	; 128
    2e80:	99 23       	and	r25, r25
    2e82:	24 f4       	brge	.+8      	; 0x2e8c <rotate+0xd4>
    2e84:	01 97       	sbiw	r24, 0x01	; 1
    2e86:	8e 6f       	ori	r24, 0xFE	; 254
    2e88:	9f 6f       	ori	r25, 0xFF	; 255
    2e8a:	01 96       	adiw	r24, 0x01	; 1
    2e8c:	90 93 51 01 	sts	0x0151, r25	; 0x800151 <version+0x1>
    2e90:	80 93 50 01 	sts	0x0150, r24	; 0x800150 <version>
		break;
	}
	if(curY==8)
    2e94:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <curY>
    2e98:	90 91 12 01 	lds	r25, 0x0112	; 0x800112 <curY+0x1>
    2e9c:	08 97       	sbiw	r24, 0x08	; 8
    2e9e:	49 f4       	brne	.+18     	; 0x2eb2 <rotate+0xfa>
	curY--;
    2ea0:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <curY>
    2ea4:	90 91 12 01 	lds	r25, 0x0112	; 0x800112 <curY+0x1>
    2ea8:	01 97       	sbiw	r24, 0x01	; 1
    2eaa:	90 93 12 01 	sts	0x0112, r25	; 0x800112 <curY+0x1>
    2eae:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <curY>
	if(curY==1)
    2eb2:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <curY>
    2eb6:	90 91 12 01 	lds	r25, 0x0112	; 0x800112 <curY+0x1>
    2eba:	01 97       	sbiw	r24, 0x01	; 1
    2ebc:	49 f4       	brne	.+18     	; 0x2ed0 <rotate+0x118>
	curY++;
    2ebe:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <curY>
    2ec2:	90 91 12 01 	lds	r25, 0x0112	; 0x800112 <curY+0x1>
    2ec6:	01 96       	adiw	r24, 0x01	; 1
    2ec8:	90 93 12 01 	sts	0x0112, r25	; 0x800112 <curY+0x1>
    2ecc:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <curY>
    2ed0:	08 95       	ret

00002ed2 <__vector_3>:
}
ISR(INT2_vect)
{
    2ed2:	1f 92       	push	r1
    2ed4:	0f 92       	push	r0
    2ed6:	0f b6       	in	r0, 0x3f	; 63
    2ed8:	0f 92       	push	r0
    2eda:	11 24       	eor	r1, r1
    2edc:	2f 93       	push	r18
    2ede:	3f 93       	push	r19
    2ee0:	4f 93       	push	r20
    2ee2:	5f 93       	push	r21
    2ee4:	6f 93       	push	r22
    2ee6:	7f 93       	push	r23
    2ee8:	8f 93       	push	r24
    2eea:	9f 93       	push	r25
    2eec:	af 93       	push	r26
    2eee:	bf 93       	push	r27
    2ef0:	ef 93       	push	r30
    2ef2:	ff 93       	push	r31
	//rotate
	if(check_rotate_collision()) return;
    2ef4:	0e 94 66 0a 	call	0x14cc	; 0x14cc <check_rotate_collision>
    2ef8:	89 2b       	or	r24, r25
    2efa:	f1 f4       	brne	.+60     	; 0x2f38 <__vector_3+0x66>
	removeBLOCKS(curX,curY,type);
    2efc:	40 91 52 01 	lds	r20, 0x0152	; 0x800152 <type>
    2f00:	50 91 53 01 	lds	r21, 0x0153	; 0x800153 <type+0x1>
    2f04:	60 91 11 01 	lds	r22, 0x0111	; 0x800111 <curY>
    2f08:	70 91 12 01 	lds	r23, 0x0112	; 0x800112 <curY+0x1>
    2f0c:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <curX>
    2f10:	90 91 14 01 	lds	r25, 0x0114	; 0x800114 <curX+0x1>
    2f14:	0e 94 f3 11 	call	0x23e6	; 0x23e6 <removeBLOCKS>
	rotate();
    2f18:	0e 94 dc 16 	call	0x2db8	; 0x2db8 <rotate>

	makeBLOCK(curX,curY,type);
    2f1c:	40 91 52 01 	lds	r20, 0x0152	; 0x800152 <type>
    2f20:	50 91 53 01 	lds	r21, 0x0153	; 0x800153 <type+0x1>
    2f24:	60 91 11 01 	lds	r22, 0x0111	; 0x800111 <curY>
    2f28:	70 91 12 01 	lds	r23, 0x0112	; 0x800112 <curY+0x1>
    2f2c:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <curX>
    2f30:	90 91 14 01 	lds	r25, 0x0114	; 0x800114 <curX+0x1>
    2f34:	0e 94 cc 11 	call	0x2398	; 0x2398 <makeBLOCK>
}
    2f38:	ff 91       	pop	r31
    2f3a:	ef 91       	pop	r30
    2f3c:	bf 91       	pop	r27
    2f3e:	af 91       	pop	r26
    2f40:	9f 91       	pop	r25
    2f42:	8f 91       	pop	r24
    2f44:	7f 91       	pop	r23
    2f46:	6f 91       	pop	r22
    2f48:	5f 91       	pop	r21
    2f4a:	4f 91       	pop	r20
    2f4c:	3f 91       	pop	r19
    2f4e:	2f 91       	pop	r18
    2f50:	0f 90       	pop	r0
    2f52:	0f be       	out	0x3f, r0	; 63
    2f54:	0f 90       	pop	r0
    2f56:	1f 90       	pop	r1
    2f58:	18 95       	reti

00002f5a <move_player_left>:
void move_player_left(){
	if(curX == 1) return;
    2f5a:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <curX>
    2f5e:	90 91 14 01 	lds	r25, 0x0114	; 0x800114 <curX+0x1>
    2f62:	01 97       	sbiw	r24, 0x01	; 1
    2f64:	09 f4       	brne	.+2      	; 0x2f68 <move_player_left+0xe>
    2f66:	45 c0       	rjmp	.+138    	; 0x2ff2 <move_player_left+0x98>
	removeBLOCKS(curX, curY, type);
    2f68:	40 91 52 01 	lds	r20, 0x0152	; 0x800152 <type>
    2f6c:	50 91 53 01 	lds	r21, 0x0153	; 0x800153 <type+0x1>
    2f70:	60 91 11 01 	lds	r22, 0x0111	; 0x800111 <curY>
    2f74:	70 91 12 01 	lds	r23, 0x0112	; 0x800112 <curY+0x1>
    2f78:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <curX>
    2f7c:	90 91 14 01 	lds	r25, 0x0114	; 0x800114 <curX+0x1>
    2f80:	0e 94 f3 11 	call	0x23e6	; 0x23e6 <removeBLOCKS>
	oldY = curY;
    2f84:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <curY>
    2f88:	90 91 12 01 	lds	r25, 0x0112	; 0x800112 <curY+0x1>
    2f8c:	90 93 10 01 	sts	0x0110, r25	; 0x800110 <oldY+0x1>
    2f90:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <oldY>
	curY++;
    2f94:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <curY>
    2f98:	90 91 12 01 	lds	r25, 0x0112	; 0x800112 <curY+0x1>
    2f9c:	01 96       	adiw	r24, 0x01	; 1
    2f9e:	90 93 12 01 	sts	0x0112, r25	; 0x800112 <curY+0x1>
    2fa2:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <curY>
	if (makeBLOCK(curX,curY,type) == 0)
    2fa6:	40 91 52 01 	lds	r20, 0x0152	; 0x800152 <type>
    2faa:	50 91 53 01 	lds	r21, 0x0153	; 0x800153 <type+0x1>
    2fae:	60 91 11 01 	lds	r22, 0x0111	; 0x800111 <curY>
    2fb2:	70 91 12 01 	lds	r23, 0x0112	; 0x800112 <curY+0x1>
    2fb6:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <curX>
    2fba:	90 91 14 01 	lds	r25, 0x0114	; 0x800114 <curX+0x1>
    2fbe:	0e 94 cc 11 	call	0x2398	; 0x2398 <makeBLOCK>
    2fc2:	89 2b       	or	r24, r25
    2fc4:	b1 f4       	brne	.+44     	; 0x2ff2 <move_player_left+0x98>
	{
		curY = oldY;
    2fc6:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <oldY>
    2fca:	90 91 10 01 	lds	r25, 0x0110	; 0x800110 <oldY+0x1>
    2fce:	90 93 12 01 	sts	0x0112, r25	; 0x800112 <curY+0x1>
    2fd2:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <curY>
		makeBLOCK(curX,curY,type);
    2fd6:	40 91 52 01 	lds	r20, 0x0152	; 0x800152 <type>
    2fda:	50 91 53 01 	lds	r21, 0x0153	; 0x800153 <type+0x1>
    2fde:	60 91 11 01 	lds	r22, 0x0111	; 0x800111 <curY>
    2fe2:	70 91 12 01 	lds	r23, 0x0112	; 0x800112 <curY+0x1>
    2fe6:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <curX>
    2fea:	90 91 14 01 	lds	r25, 0x0114	; 0x800114 <curX+0x1>
    2fee:	0e 94 cc 11 	call	0x2398	; 0x2398 <makeBLOCK>
    2ff2:	08 95       	ret

00002ff4 <move_player_right>:
	}
}
void move_player_right(){
	if(curX == 1) return;
    2ff4:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <curX>
    2ff8:	90 91 14 01 	lds	r25, 0x0114	; 0x800114 <curX+0x1>
    2ffc:	01 97       	sbiw	r24, 0x01	; 1
    2ffe:	09 f4       	brne	.+2      	; 0x3002 <move_player_right+0xe>
    3000:	45 c0       	rjmp	.+138    	; 0x308c <move_player_right+0x98>
	removeBLOCKS(curX, curY, type);
    3002:	40 91 52 01 	lds	r20, 0x0152	; 0x800152 <type>
    3006:	50 91 53 01 	lds	r21, 0x0153	; 0x800153 <type+0x1>
    300a:	60 91 11 01 	lds	r22, 0x0111	; 0x800111 <curY>
    300e:	70 91 12 01 	lds	r23, 0x0112	; 0x800112 <curY+0x1>
    3012:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <curX>
    3016:	90 91 14 01 	lds	r25, 0x0114	; 0x800114 <curX+0x1>
    301a:	0e 94 f3 11 	call	0x23e6	; 0x23e6 <removeBLOCKS>
	oldY = curY;
    301e:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <curY>
    3022:	90 91 12 01 	lds	r25, 0x0112	; 0x800112 <curY+0x1>
    3026:	90 93 10 01 	sts	0x0110, r25	; 0x800110 <oldY+0x1>
    302a:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <oldY>
	curY--;
    302e:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <curY>
    3032:	90 91 12 01 	lds	r25, 0x0112	; 0x800112 <curY+0x1>
    3036:	01 97       	sbiw	r24, 0x01	; 1
    3038:	90 93 12 01 	sts	0x0112, r25	; 0x800112 <curY+0x1>
    303c:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <curY>
	if (makeBLOCK(curX,curY,type) == 0)
    3040:	40 91 52 01 	lds	r20, 0x0152	; 0x800152 <type>
    3044:	50 91 53 01 	lds	r21, 0x0153	; 0x800153 <type+0x1>
    3048:	60 91 11 01 	lds	r22, 0x0111	; 0x800111 <curY>
    304c:	70 91 12 01 	lds	r23, 0x0112	; 0x800112 <curY+0x1>
    3050:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <curX>
    3054:	90 91 14 01 	lds	r25, 0x0114	; 0x800114 <curX+0x1>
    3058:	0e 94 cc 11 	call	0x2398	; 0x2398 <makeBLOCK>
    305c:	89 2b       	or	r24, r25
    305e:	b1 f4       	brne	.+44     	; 0x308c <move_player_right+0x98>
	{
		curY = oldY;
    3060:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <oldY>
    3064:	90 91 10 01 	lds	r25, 0x0110	; 0x800110 <oldY+0x1>
    3068:	90 93 12 01 	sts	0x0112, r25	; 0x800112 <curY+0x1>
    306c:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <curY>
		makeBLOCK(curX,curY,type);
    3070:	40 91 52 01 	lds	r20, 0x0152	; 0x800152 <type>
    3074:	50 91 53 01 	lds	r21, 0x0153	; 0x800153 <type+0x1>
    3078:	60 91 11 01 	lds	r22, 0x0111	; 0x800111 <curY>
    307c:	70 91 12 01 	lds	r23, 0x0112	; 0x800112 <curY+0x1>
    3080:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <curX>
    3084:	90 91 14 01 	lds	r25, 0x0114	; 0x800114 <curX+0x1>
    3088:	0e 94 cc 11 	call	0x2398	; 0x2398 <makeBLOCK>
    308c:	08 95       	ret

0000308e <__vector_2>:
	}
}

ISR(INT1_vect)
{
    308e:	1f 92       	push	r1
    3090:	0f 92       	push	r0
    3092:	0f b6       	in	r0, 0x3f	; 63
    3094:	0f 92       	push	r0
    3096:	11 24       	eor	r1, r1
    3098:	2f 93       	push	r18
    309a:	3f 93       	push	r19
    309c:	4f 93       	push	r20
    309e:	5f 93       	push	r21
    30a0:	6f 93       	push	r22
    30a2:	7f 93       	push	r23
    30a4:	8f 93       	push	r24
    30a6:	9f 93       	push	r25
    30a8:	af 93       	push	r26
    30aa:	bf 93       	push	r27
    30ac:	ef 93       	push	r30
    30ae:	ff 93       	push	r31
	//left shift
	move_player_right();
    30b0:	0e 94 fa 17 	call	0x2ff4	; 0x2ff4 <move_player_right>
}
    30b4:	ff 91       	pop	r31
    30b6:	ef 91       	pop	r30
    30b8:	bf 91       	pop	r27
    30ba:	af 91       	pop	r26
    30bc:	9f 91       	pop	r25
    30be:	8f 91       	pop	r24
    30c0:	7f 91       	pop	r23
    30c2:	6f 91       	pop	r22
    30c4:	5f 91       	pop	r21
    30c6:	4f 91       	pop	r20
    30c8:	3f 91       	pop	r19
    30ca:	2f 91       	pop	r18
    30cc:	0f 90       	pop	r0
    30ce:	0f be       	out	0x3f, r0	; 63
    30d0:	0f 90       	pop	r0
    30d2:	1f 90       	pop	r1
    30d4:	18 95       	reti

000030d6 <__vector_1>:


ISR(INT0_vect)
{
    30d6:	1f 92       	push	r1
    30d8:	0f 92       	push	r0
    30da:	0f b6       	in	r0, 0x3f	; 63
    30dc:	0f 92       	push	r0
    30de:	11 24       	eor	r1, r1
    30e0:	2f 93       	push	r18
    30e2:	3f 93       	push	r19
    30e4:	4f 93       	push	r20
    30e6:	5f 93       	push	r21
    30e8:	6f 93       	push	r22
    30ea:	7f 93       	push	r23
    30ec:	8f 93       	push	r24
    30ee:	9f 93       	push	r25
    30f0:	af 93       	push	r26
    30f2:	bf 93       	push	r27
    30f4:	ef 93       	push	r30
    30f6:	ff 93       	push	r31
	//right shift
	move_player_left();
    30f8:	0e 94 ad 17 	call	0x2f5a	; 0x2f5a <move_player_left>
}
    30fc:	ff 91       	pop	r31
    30fe:	ef 91       	pop	r30
    3100:	bf 91       	pop	r27
    3102:	af 91       	pop	r26
    3104:	9f 91       	pop	r25
    3106:	8f 91       	pop	r24
    3108:	7f 91       	pop	r23
    310a:	6f 91       	pop	r22
    310c:	5f 91       	pop	r21
    310e:	4f 91       	pop	r20
    3110:	3f 91       	pop	r19
    3112:	2f 91       	pop	r18
    3114:	0f 90       	pop	r0
    3116:	0f be       	out	0x3f, r0	; 63
    3118:	0f 90       	pop	r0
    311a:	1f 90       	pop	r1
    311c:	18 95       	reti

0000311e <isPressDown>:

int isPressDown(){
	return PINB == 0x40;
    311e:	96 b3       	in	r25, 0x16	; 22
    3120:	81 e0       	ldi	r24, 0x01	; 1
    3122:	90 34       	cpi	r25, 0x40	; 64
    3124:	09 f0       	breq	.+2      	; 0x3128 <isPressDown+0xa>
    3126:	80 e0       	ldi	r24, 0x00	; 0
}
    3128:	90 e0       	ldi	r25, 0x00	; 0
    312a:	08 95       	ret

0000312c <clearMatchedRow>:
		makeBOARD(15);
	}

}

int clearMatchedRow(){
    312c:	0f 93       	push	r16
    312e:	1f 93       	push	r17
    3130:	cf 93       	push	r28
    3132:	df 93       	push	r29
	int i,j,k,p;
	int matched = 0;
    3134:	00 e0       	ldi	r16, 0x00	; 0
    3136:	10 e0       	ldi	r17, 0x00	; 0

	for (i = 17; i >= 2; i--)
    3138:	c1 e1       	ldi	r28, 0x11	; 17
    313a:	d0 e0       	ldi	r29, 0x00	; 0
    313c:	58 c0       	rjmp	.+176    	; 0x31ee <clearMatchedRow+0xc2>
	{
		if (getRow(i) == 255){
    313e:	ce 01       	movw	r24, r28
    3140:	0e 94 14 01 	call	0x228	; 0x228 <getRow>
    3144:	8f 3f       	cpi	r24, 0xFF	; 255
    3146:	91 05       	cpc	r25, r1
    3148:	09 f0       	breq	.+2      	; 0x314c <clearMatchedRow+0x20>
    314a:	50 c0       	rjmp	.+160    	; 0x31ec <clearMatchedRow+0xc0>
			for (j = i-1; j >= 1; j--)
    314c:	ae 01       	movw	r20, r28
    314e:	41 50       	subi	r20, 0x01	; 1
    3150:	51 09       	sbc	r21, r1
    3152:	2e c0       	rjmp	.+92     	; 0x31b0 <clearMatchedRow+0x84>
				for (k = 1; k <= 8; k++)
					board[j+1][k] = board[j][k];
    3154:	ca 01       	movw	r24, r20
    3156:	01 96       	adiw	r24, 0x01	; 1
    3158:	fa 01       	movw	r30, r20
    315a:	ee 0f       	add	r30, r30
    315c:	ff 1f       	adc	r31, r31
    315e:	ee 0f       	add	r30, r30
    3160:	ff 1f       	adc	r31, r31
    3162:	ee 0f       	add	r30, r30
    3164:	ff 1f       	adc	r31, r31
    3166:	e4 0f       	add	r30, r20
    3168:	f5 1f       	adc	r31, r21
    316a:	e2 0f       	add	r30, r18
    316c:	f3 1f       	adc	r31, r19
    316e:	ee 0f       	add	r30, r30
    3170:	ff 1f       	adc	r31, r31
    3172:	ec 5a       	subi	r30, 0xAC	; 172
    3174:	fe 4f       	sbci	r31, 0xFE	; 254
    3176:	60 81       	ld	r22, Z
    3178:	71 81       	ldd	r23, Z+1	; 0x01
    317a:	fc 01       	movw	r30, r24
    317c:	ee 0f       	add	r30, r30
    317e:	ff 1f       	adc	r31, r31
    3180:	ee 0f       	add	r30, r30
    3182:	ff 1f       	adc	r31, r31
    3184:	ee 0f       	add	r30, r30
    3186:	ff 1f       	adc	r31, r31
    3188:	e8 0f       	add	r30, r24
    318a:	f9 1f       	adc	r31, r25
    318c:	e2 0f       	add	r30, r18
    318e:	f3 1f       	adc	r31, r19
    3190:	ee 0f       	add	r30, r30
    3192:	ff 1f       	adc	r31, r31
    3194:	ec 5a       	subi	r30, 0xAC	; 172
    3196:	fe 4f       	sbci	r31, 0xFE	; 254
    3198:	71 83       	std	Z+1, r23	; 0x01
    319a:	60 83       	st	Z, r22

	for (i = 17; i >= 2; i--)
	{
		if (getRow(i) == 255){
			for (j = i-1; j >= 1; j--)
				for (k = 1; k <= 8; k++)
    319c:	2f 5f       	subi	r18, 0xFF	; 255
    319e:	3f 4f       	sbci	r19, 0xFF	; 255
    31a0:	02 c0       	rjmp	.+4      	; 0x31a6 <clearMatchedRow+0x7a>
    31a2:	21 e0       	ldi	r18, 0x01	; 1
    31a4:	30 e0       	ldi	r19, 0x00	; 0
    31a6:	29 30       	cpi	r18, 0x09	; 9
    31a8:	31 05       	cpc	r19, r1
    31aa:	a4 f2       	brlt	.-88     	; 0x3154 <clearMatchedRow+0x28>
	int matched = 0;

	for (i = 17; i >= 2; i--)
	{
		if (getRow(i) == 255){
			for (j = i-1; j >= 1; j--)
    31ac:	41 50       	subi	r20, 0x01	; 1
    31ae:	51 09       	sbc	r21, r1
    31b0:	14 16       	cp	r1, r20
    31b2:	15 06       	cpc	r1, r21
    31b4:	b4 f3       	brlt	.-20     	; 0x31a2 <clearMatchedRow+0x76>
    31b6:	81 e0       	ldi	r24, 0x01	; 1
    31b8:	90 e0       	ldi	r25, 0x00	; 0
    31ba:	09 c0       	rjmp	.+18     	; 0x31ce <clearMatchedRow+0xa2>
				for (k = 1; k <= 8; k++)
					board[j+1][k] = board[j][k];
			for (p = 1; p <= 8; p++)
				board[2][p] = 0;
    31bc:	fc 01       	movw	r30, r24
    31be:	72 96       	adiw	r30, 0x12	; 18
    31c0:	ee 0f       	add	r30, r30
    31c2:	ff 1f       	adc	r31, r31
    31c4:	ec 5a       	subi	r30, 0xAC	; 172
    31c6:	fe 4f       	sbci	r31, 0xFE	; 254
    31c8:	11 82       	std	Z+1, r1	; 0x01
    31ca:	10 82       	st	Z, r1
	{
		if (getRow(i) == 255){
			for (j = i-1; j >= 1; j--)
				for (k = 1; k <= 8; k++)
					board[j+1][k] = board[j][k];
			for (p = 1; p <= 8; p++)
    31cc:	01 96       	adiw	r24, 0x01	; 1
    31ce:	89 30       	cpi	r24, 0x09	; 9
    31d0:	91 05       	cpc	r25, r1
    31d2:	a4 f3       	brlt	.-24     	; 0x31bc <clearMatchedRow+0x90>
				board[2][p] = 0;
			i++;
    31d4:	21 96       	adiw	r28, 0x01	; 1
			matched=1;
			score++;
    31d6:	80 91 4a 01 	lds	r24, 0x014A	; 0x80014a <__data_end>
    31da:	90 91 4b 01 	lds	r25, 0x014B	; 0x80014b <__data_end+0x1>
    31de:	01 96       	adiw	r24, 0x01	; 1
    31e0:	90 93 4b 01 	sts	0x014B, r25	; 0x80014b <__data_end+0x1>
    31e4:	80 93 4a 01 	sts	0x014A, r24	; 0x80014a <__data_end>
				for (k = 1; k <= 8; k++)
					board[j+1][k] = board[j][k];
			for (p = 1; p <= 8; p++)
				board[2][p] = 0;
			i++;
			matched=1;
    31e8:	01 e0       	ldi	r16, 0x01	; 1
    31ea:	10 e0       	ldi	r17, 0x00	; 0

int clearMatchedRow(){
	int i,j,k,p;
	int matched = 0;

	for (i = 17; i >= 2; i--)
    31ec:	21 97       	sbiw	r28, 0x01	; 1
    31ee:	c2 30       	cpi	r28, 0x02	; 2
    31f0:	d1 05       	cpc	r29, r1
    31f2:	0c f0       	brlt	.+2      	; 0x31f6 <clearMatchedRow+0xca>
    31f4:	a4 cf       	rjmp	.-184    	; 0x313e <clearMatchedRow+0x12>
			matched=1;
			score++;
		}
	}
	return matched;
}
    31f6:	c8 01       	movw	r24, r16
    31f8:	df 91       	pop	r29
    31fa:	cf 91       	pop	r28
    31fc:	1f 91       	pop	r17
    31fe:	0f 91       	pop	r16
    3200:	08 95       	ret

00003202 <move_player_down>:
int isPressDown(){
	return PINB == 0x40;
}

void move_player_down(){
	if(checkbottom_collision()){
    3202:	0e 94 7a 0d 	call	0x1af4	; 0x1af4 <checkbottom_collision>
    3206:	89 2b       	or	r24, r25
    3208:	09 f4       	brne	.+2      	; 0x320c <move_player_down+0xa>
    320a:	4e c0       	rjmp	.+156    	; 0x32a8 <move_player_down+0xa6>
    320c:	08 95       	ret
		return;
	}
	while(isPressDown()){
		if(checkbottom_collision()){
    320e:	0e 94 7a 0d 	call	0x1af4	; 0x1af4 <checkbottom_collision>
    3212:	89 2b       	or	r24, r25
    3214:	01 f1       	breq	.+64     	; 0x3256 <move_player_down+0x54>
			if(clearMatchedRow()){
    3216:	0e 94 96 18 	call	0x312c	; 0x312c <clearMatchedRow>
    321a:	89 2b       	or	r24, r25
    321c:	21 f0       	breq	.+8      	; 0x3226 <move_player_down+0x24>
				makeBOARD(60);
    321e:	8c e3       	ldi	r24, 0x3C	; 60
    3220:	90 e0       	ldi	r25, 0x00	; 0
    3222:	0e 94 78 16 	call	0x2cf0	; 0x2cf0 <makeBOARD>
			}
			curX = 1;
    3226:	81 e0       	ldi	r24, 0x01	; 1
    3228:	90 e0       	ldi	r25, 0x00	; 0
    322a:	90 93 14 01 	sts	0x0114, r25	; 0x800114 <curX+0x1>
    322e:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <curX>
			curY = 4;
    3232:	84 e0       	ldi	r24, 0x04	; 4
    3234:	90 e0       	ldi	r25, 0x00	; 0
    3236:	90 93 12 01 	sts	0x0112, r25	; 0x800112 <curY+0x1>
    323a:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <curY>
			type = rand() % 6 +1;
    323e:	0e 94 80 1b 	call	0x3700	; 0x3700 <rand>
    3242:	66 e0       	ldi	r22, 0x06	; 6
    3244:	70 e0       	ldi	r23, 0x00	; 0
    3246:	0e 94 0c 1b 	call	0x3618	; 0x3618 <__divmodhi4>
    324a:	01 96       	adiw	r24, 0x01	; 1
    324c:	90 93 53 01 	sts	0x0153, r25	; 0x800153 <type+0x1>
    3250:	80 93 52 01 	sts	0x0152, r24	; 0x800152 <type>

			return;
    3254:	08 95       	ret
		} 
		removeBLOCKS(curX, curY, type);
    3256:	40 91 52 01 	lds	r20, 0x0152	; 0x800152 <type>
    325a:	50 91 53 01 	lds	r21, 0x0153	; 0x800153 <type+0x1>
    325e:	60 91 11 01 	lds	r22, 0x0111	; 0x800111 <curY>
    3262:	70 91 12 01 	lds	r23, 0x0112	; 0x800112 <curY+0x1>
    3266:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <curX>
    326a:	90 91 14 01 	lds	r25, 0x0114	; 0x800114 <curX+0x1>
    326e:	0e 94 f3 11 	call	0x23e6	; 0x23e6 <removeBLOCKS>
		curX++;
    3272:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <curX>
    3276:	90 91 14 01 	lds	r25, 0x0114	; 0x800114 <curX+0x1>
    327a:	01 96       	adiw	r24, 0x01	; 1
    327c:	90 93 14 01 	sts	0x0114, r25	; 0x800114 <curX+0x1>
    3280:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <curX>
		makeBLOCK(curX, curY, type);
    3284:	40 91 52 01 	lds	r20, 0x0152	; 0x800152 <type>
    3288:	50 91 53 01 	lds	r21, 0x0153	; 0x800153 <type+0x1>
    328c:	60 91 11 01 	lds	r22, 0x0111	; 0x800111 <curY>
    3290:	70 91 12 01 	lds	r23, 0x0112	; 0x800112 <curY+0x1>
    3294:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <curX>
    3298:	90 91 14 01 	lds	r25, 0x0114	; 0x800114 <curX+0x1>
    329c:	0e 94 cc 11 	call	0x2398	; 0x2398 <makeBLOCK>
		makeBOARD(15);
    32a0:	8f e0       	ldi	r24, 0x0F	; 15
    32a2:	90 e0       	ldi	r25, 0x00	; 0
    32a4:	0e 94 78 16 	call	0x2cf0	; 0x2cf0 <makeBOARD>

void move_player_down(){
	if(checkbottom_collision()){
		return;
	}
	while(isPressDown()){
    32a8:	0e 94 8f 18 	call	0x311e	; 0x311e <isPressDown>
    32ac:	89 2b       	or	r24, r25
    32ae:	09 f0       	breq	.+2      	; 0x32b2 <move_player_down+0xb0>
    32b0:	ae cf       	rjmp	.-164    	; 0x320e <move_player_down+0xc>
    32b2:	08 95       	ret

000032b4 <check_GameOver>:
		}
	}
	return matched;
}
int check_GameOver()
{
    32b4:	cf 93       	push	r28
    32b6:	df 93       	push	r29
	for(int i = 1; i <= 8; i++){
    32b8:	c1 e0       	ldi	r28, 0x01	; 1
    32ba:	d0 e0       	ldi	r29, 0x00	; 0
    32bc:	0f c0       	rjmp	.+30     	; 0x32dc <check_GameOver+0x28>
		if(board[1][i] && checkbottom_collision()) return 1;
    32be:	fe 01       	movw	r30, r28
    32c0:	39 96       	adiw	r30, 0x09	; 9
    32c2:	ee 0f       	add	r30, r30
    32c4:	ff 1f       	adc	r31, r31
    32c6:	ec 5a       	subi	r30, 0xAC	; 172
    32c8:	fe 4f       	sbci	r31, 0xFE	; 254
    32ca:	80 81       	ld	r24, Z
    32cc:	91 81       	ldd	r25, Z+1	; 0x01
    32ce:	89 2b       	or	r24, r25
    32d0:	21 f0       	breq	.+8      	; 0x32da <check_GameOver+0x26>
    32d2:	0e 94 7a 0d 	call	0x1af4	; 0x1af4 <checkbottom_collision>
    32d6:	89 2b       	or	r24, r25
    32d8:	39 f4       	brne	.+14     	; 0x32e8 <check_GameOver+0x34>
	}
	return matched;
}
int check_GameOver()
{
	for(int i = 1; i <= 8; i++){
    32da:	21 96       	adiw	r28, 0x01	; 1
    32dc:	c9 30       	cpi	r28, 0x09	; 9
    32de:	d1 05       	cpc	r29, r1
    32e0:	74 f3       	brlt	.-36     	; 0x32be <check_GameOver+0xa>
		if(board[1][i] && checkbottom_collision()) return 1;
	}
	return 0;
    32e2:	80 e0       	ldi	r24, 0x00	; 0
    32e4:	90 e0       	ldi	r25, 0x00	; 0
    32e6:	02 c0       	rjmp	.+4      	; 0x32ec <check_GameOver+0x38>
	return matched;
}
int check_GameOver()
{
	for(int i = 1; i <= 8; i++){
		if(board[1][i] && checkbottom_collision()) return 1;
    32e8:	81 e0       	ldi	r24, 0x01	; 1
    32ea:	90 e0       	ldi	r25, 0x00	; 0
	}
	return 0;
}
    32ec:	df 91       	pop	r29
    32ee:	cf 91       	pop	r28
    32f0:	08 95       	ret

000032f2 <score_display>:

void score_display(int n_score){
    32f2:	0f 93       	push	r16
    32f4:	1f 93       	push	r17
    32f6:	cf 93       	push	r28
    32f8:	df 93       	push	r29
    32fa:	cd b7       	in	r28, 0x3d	; 61
    32fc:	de b7       	in	r29, 0x3e	; 62
    32fe:	64 97       	sbiw	r28, 0x14	; 20
    3300:	0f b6       	in	r0, 0x3f	; 63
    3302:	f8 94       	cli
    3304:	de bf       	out	0x3e, r29	; 62
    3306:	0f be       	out	0x3f, r0	; 63
    3308:	cd bf       	out	0x3d, r28	; 61
	memset(tmp_LED, 0, sizeof(tmp_LED));
    330a:	20 e1       	ldi	r18, 0x10	; 16
    330c:	e8 e9       	ldi	r30, 0x98	; 152
    330e:	f2 e0       	ldi	r31, 0x02	; 2
    3310:	df 01       	movw	r26, r30
    3312:	1d 92       	st	X+, r1
    3314:	2a 95       	dec	r18
    3316:	e9 f7       	brne	.-6      	; 0x3312 <score_display+0x20>
	char result[20];
	snprintf(result, sizeof(result), "SCORE:%d  ", n_score);
    3318:	9f 93       	push	r25
    331a:	8f 93       	push	r24
    331c:	85 e3       	ldi	r24, 0x35	; 53
    331e:	91 e0       	ldi	r25, 0x01	; 1
    3320:	9f 93       	push	r25
    3322:	8f 93       	push	r24
    3324:	1f 92       	push	r1
    3326:	84 e1       	ldi	r24, 0x14	; 20
    3328:	8f 93       	push	r24
    332a:	8e 01       	movw	r16, r28
    332c:	0f 5f       	subi	r16, 0xFF	; 255
    332e:	1f 4f       	sbci	r17, 0xFF	; 255
    3330:	1f 93       	push	r17
    3332:	0f 93       	push	r16
    3334:	0e 94 90 1b 	call	0x3720	; 0x3720 <snprintf>
	scrollingText(result, 2);
    3338:	62 e0       	ldi	r22, 0x02	; 2
    333a:	70 e0       	ldi	r23, 0x00	; 0
    333c:	c8 01       	movw	r24, r16
    333e:	0e 94 c6 00 	call	0x18c	; 0x18c <scrollingText>
}
    3342:	0f b6       	in	r0, 0x3f	; 63
    3344:	f8 94       	cli
    3346:	de bf       	out	0x3e, r29	; 62
    3348:	0f be       	out	0x3f, r0	; 63
    334a:	cd bf       	out	0x3d, r28	; 61
    334c:	64 96       	adiw	r28, 0x14	; 20
    334e:	0f b6       	in	r0, 0x3f	; 63
    3350:	f8 94       	cli
    3352:	de bf       	out	0x3e, r29	; 62
    3354:	0f be       	out	0x3f, r0	; 63
    3356:	cd bf       	out	0x3d, r28	; 61
    3358:	df 91       	pop	r29
    335a:	cf 91       	pop	r28
    335c:	1f 91       	pop	r17
    335e:	0f 91       	pop	r16
    3360:	08 95       	ret

00003362 <Play>:

void Play()
{
	if(isStarted ==0) return;
    3362:	80 91 4e 01 	lds	r24, 0x014E	; 0x80014e <isStarted>
    3366:	90 91 4f 01 	lds	r25, 0x014F	; 0x80014f <isStarted+0x1>
    336a:	89 2b       	or	r24, r25
    336c:	09 f4       	brne	.+2      	; 0x3370 <Play+0xe>
    336e:	b0 c0       	rjmp	.+352    	; 0x34d0 <Play+0x16e>
	if(isPressDown()){
    3370:	0e 94 8f 18 	call	0x311e	; 0x311e <isPressDown>
    3374:	89 2b       	or	r24, r25
    3376:	11 f0       	breq	.+4      	; 0x337c <Play+0x1a>
			move_player_down();
    3378:	0e 94 01 19 	call	0x3202	; 0x3202 <move_player_down>
	}
	if(check_GameOver())
    337c:	0e 94 5a 19 	call	0x32b4	; 0x32b4 <check_GameOver>
    3380:	89 2b       	or	r24, r25
    3382:	21 f1       	breq	.+72     	; 0x33cc <Play+0x6a>
	{
		memset(board,0,sizeof(board));
    3384:	84 e4       	ldi	r24, 0x44	; 68
    3386:	91 e0       	ldi	r25, 0x01	; 1
    3388:	e4 e5       	ldi	r30, 0x54	; 84
    338a:	f1 e0       	ldi	r31, 0x01	; 1
    338c:	df 01       	movw	r26, r30
    338e:	9c 01       	movw	r18, r24
    3390:	1d 92       	st	X+, r1
    3392:	21 50       	subi	r18, 0x01	; 1
    3394:	30 40       	sbci	r19, 0x00	; 0
    3396:	e1 f7       	brne	.-8      	; 0x3390 <Play+0x2e>
		makeBOARD(60);
    3398:	8c e3       	ldi	r24, 0x3C	; 60
    339a:	90 e0       	ldi	r25, 0x00	; 0
    339c:	0e 94 78 16 	call	0x2cf0	; 0x2cf0 <makeBOARD>
		isOngoing=1;
    33a0:	81 e0       	ldi	r24, 0x01	; 1
    33a2:	90 e0       	ldi	r25, 0x00	; 0
    33a4:	90 93 4d 01 	sts	0x014D, r25	; 0x80014d <isOngoing+0x1>
    33a8:	80 93 4c 01 	sts	0x014C, r24	; 0x80014c <isOngoing>
		curX = 1;
    33ac:	90 93 14 01 	sts	0x0114, r25	; 0x800114 <curX+0x1>
    33b0:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <curX>
		curY = 4;
    33b4:	84 e0       	ldi	r24, 0x04	; 4
    33b6:	90 e0       	ldi	r25, 0x00	; 0
    33b8:	90 93 12 01 	sts	0x0112, r25	; 0x800112 <curY+0x1>
    33bc:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <curY>
		score_display(score);
    33c0:	80 91 4a 01 	lds	r24, 0x014A	; 0x80014a <__data_end>
    33c4:	90 91 4b 01 	lds	r25, 0x014B	; 0x80014b <__data_end+0x1>
    33c8:	0e 94 79 19 	call	0x32f2	; 0x32f2 <score_display>
	}
	
	if (curX == 1)
    33cc:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <curX>
    33d0:	90 91 14 01 	lds	r25, 0x0114	; 0x800114 <curX+0x1>
    33d4:	01 97       	sbiw	r24, 0x01	; 1
    33d6:	e9 f4       	brne	.+58     	; 0x3412 <Play+0xb0>
	{
		
		type = rand() % 6 +1;
    33d8:	0e 94 80 1b 	call	0x3700	; 0x3700 <rand>
    33dc:	66 e0       	ldi	r22, 0x06	; 6
    33de:	70 e0       	ldi	r23, 0x00	; 0
    33e0:	0e 94 0c 1b 	call	0x3618	; 0x3618 <__divmodhi4>
    33e4:	01 96       	adiw	r24, 0x01	; 1
    33e6:	90 93 53 01 	sts	0x0153, r25	; 0x800153 <type+0x1>
    33ea:	80 93 52 01 	sts	0x0152, r24	; 0x800152 <type>
		version=0;
    33ee:	10 92 51 01 	sts	0x0151, r1	; 0x800151 <version+0x1>
    33f2:	10 92 50 01 	sts	0x0150, r1	; 0x800150 <version>
		makeBLOCK(curX, curY, type);
    33f6:	40 91 52 01 	lds	r20, 0x0152	; 0x800152 <type>
    33fa:	50 91 53 01 	lds	r21, 0x0153	; 0x800153 <type+0x1>
    33fe:	60 91 11 01 	lds	r22, 0x0111	; 0x800111 <curY>
    3402:	70 91 12 01 	lds	r23, 0x0112	; 0x800112 <curY+0x1>
    3406:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <curX>
    340a:	90 91 14 01 	lds	r25, 0x0114	; 0x800114 <curX+0x1>
    340e:	0e 94 cc 11 	call	0x2398	; 0x2398 <makeBLOCK>
	}

	if(checkbottom_collision()==0) {
    3412:	0e 94 7a 0d 	call	0x1af4	; 0x1af4 <checkbottom_collision>
    3416:	89 2b       	or	r24, r25
    3418:	51 f5       	brne	.+84     	; 0x346e <Play+0x10c>
		removeBLOCKS(curX, curY, type);
    341a:	40 91 52 01 	lds	r20, 0x0152	; 0x800152 <type>
    341e:	50 91 53 01 	lds	r21, 0x0153	; 0x800153 <type+0x1>
    3422:	60 91 11 01 	lds	r22, 0x0111	; 0x800111 <curY>
    3426:	70 91 12 01 	lds	r23, 0x0112	; 0x800112 <curY+0x1>
    342a:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <curX>
    342e:	90 91 14 01 	lds	r25, 0x0114	; 0x800114 <curX+0x1>
    3432:	0e 94 f3 11 	call	0x23e6	; 0x23e6 <removeBLOCKS>
		curX++;
    3436:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <curX>
    343a:	90 91 14 01 	lds	r25, 0x0114	; 0x800114 <curX+0x1>
    343e:	01 96       	adiw	r24, 0x01	; 1
    3440:	90 93 14 01 	sts	0x0114, r25	; 0x800114 <curX+0x1>
    3444:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <curX>
		makeBLOCK(curX, curY, type);
    3448:	40 91 52 01 	lds	r20, 0x0152	; 0x800152 <type>
    344c:	50 91 53 01 	lds	r21, 0x0153	; 0x800153 <type+0x1>
    3450:	60 91 11 01 	lds	r22, 0x0111	; 0x800111 <curY>
    3454:	70 91 12 01 	lds	r23, 0x0112	; 0x800112 <curY+0x1>
    3458:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <curX>
    345c:	90 91 14 01 	lds	r25, 0x0114	; 0x800114 <curX+0x1>
    3460:	0e 94 cc 11 	call	0x2398	; 0x2398 <makeBLOCK>
		makeBOARD(45);
    3464:	8d e2       	ldi	r24, 0x2D	; 45
    3466:	90 e0       	ldi	r25, 0x00	; 0
    3468:	0e 94 78 16 	call	0x2cf0	; 0x2cf0 <makeBOARD>
		return;
    346c:	08 95       	ret
	}
	else{
		if(clearMatchedRow()){
    346e:	0e 94 96 18 	call	0x312c	; 0x312c <clearMatchedRow>
    3472:	89 2b       	or	r24, r25
    3474:	b9 f0       	breq	.+46     	; 0x34a4 <Play+0x142>
			makeBOARD(60);
    3476:	8c e3       	ldi	r24, 0x3C	; 60
    3478:	90 e0       	ldi	r25, 0x00	; 0
    347a:	0e 94 78 16 	call	0x2cf0	; 0x2cf0 <makeBOARD>
    347e:	85 ea       	ldi	r24, 0xA5	; 165
    3480:	9e e0       	ldi	r25, 0x0E	; 14
    3482:	01 97       	sbiw	r24, 0x01	; 1
    3484:	f1 f7       	brne	.-4      	; 0x3482 <Play+0x120>
    3486:	00 c0       	rjmp	.+0      	; 0x3488 <Play+0x126>
    3488:	00 00       	nop
			_delay_ms(15);
			curX = 1;
    348a:	81 e0       	ldi	r24, 0x01	; 1
    348c:	90 e0       	ldi	r25, 0x00	; 0
    348e:	90 93 14 01 	sts	0x0114, r25	; 0x800114 <curX+0x1>
    3492:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <curX>
			curY = 4;
    3496:	84 e0       	ldi	r24, 0x04	; 4
    3498:	90 e0       	ldi	r25, 0x00	; 0
    349a:	90 93 12 01 	sts	0x0112, r25	; 0x800112 <curY+0x1>
    349e:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <curY>
    34a2:	08 95       	ret
    34a4:	a5 ea       	ldi	r26, 0xA5	; 165
    34a6:	be e0       	ldi	r27, 0x0E	; 14
    34a8:	11 97       	sbiw	r26, 0x01	; 1
    34aa:	f1 f7       	brne	.-4      	; 0x34a8 <Play+0x146>
    34ac:	00 c0       	rjmp	.+0      	; 0x34ae <Play+0x14c>
    34ae:	00 00       	nop
		}
		else{
			_delay_ms(15);
			curX = 1;
    34b0:	81 e0       	ldi	r24, 0x01	; 1
    34b2:	90 e0       	ldi	r25, 0x00	; 0
    34b4:	90 93 14 01 	sts	0x0114, r25	; 0x800114 <curX+0x1>
    34b8:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <curX>
			curY = 4;
    34bc:	84 e0       	ldi	r24, 0x04	; 4
    34be:	90 e0       	ldi	r25, 0x00	; 0
    34c0:	90 93 12 01 	sts	0x0112, r25	; 0x800112 <curY+0x1>
    34c4:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <curY>
			makeBOARD(60);
    34c8:	8c e3       	ldi	r24, 0x3C	; 60
    34ca:	90 e0       	ldi	r25, 0x00	; 0
    34cc:	0e 94 78 16 	call	0x2cf0	; 0x2cf0 <makeBOARD>
    34d0:	08 95       	ret

000034d2 <initInterrupt>:
	}
}

void initInterrupt()
{
	GICR =  1<<INT1 | 1<<INT0 | 1<<INT2;
    34d2:	80 ee       	ldi	r24, 0xE0	; 224
    34d4:	8b bf       	out	0x3b, r24	; 59
	MCUCR = 0x0F;
    34d6:	8f e0       	ldi	r24, 0x0F	; 15
    34d8:	85 bf       	out	0x35, r24	; 53
	MCUCSR = 0x40;
    34da:	80 e4       	ldi	r24, 0x40	; 64
    34dc:	84 bf       	out	0x34, r24	; 52
	sei();
    34de:	78 94       	sei
    34e0:	08 95       	ret

000034e2 <main>:
}

int main(void)
{
	memset(board, 0, sizeof(board));
    34e2:	84 e4       	ldi	r24, 0x44	; 68
    34e4:	91 e0       	ldi	r25, 0x01	; 1
    34e6:	e4 e5       	ldi	r30, 0x54	; 84
    34e8:	f1 e0       	ldi	r31, 0x01	; 1
    34ea:	df 01       	movw	r26, r30
    34ec:	9c 01       	movw	r18, r24
    34ee:	1d 92       	st	X+, r1
    34f0:	21 50       	subi	r18, 0x01	; 1
    34f2:	30 40       	sbci	r19, 0x00	; 0
    34f4:	e1 f7       	brne	.-8      	; 0x34ee <main+0xc>
	memset(tmp_LED,0,sizeof(tmp_LED));
    34f6:	80 e1       	ldi	r24, 0x10	; 16
    34f8:	e8 e9       	ldi	r30, 0x98	; 152
    34fa:	f2 e0       	ldi	r31, 0x02	; 2
    34fc:	df 01       	movw	r26, r30
    34fe:	1d 92       	st	X+, r1
    3500:	8a 95       	dec	r24
    3502:	e9 f7       	brne	.-6      	; 0x34fe <main+0x1c>
	DDRB = 0x00;
    3504:	17 ba       	out	0x17, r1	; 23
	DDRA = 0xFF;
    3506:	8f ef       	ldi	r24, 0xFF	; 255
    3508:	8a bb       	out	0x1a, r24	; 26
	DDRD = 0b00010001;
    350a:	81 e1       	ldi	r24, 0x11	; 17
    350c:	81 bb       	out	0x11, r24	; 17
	
	initInterrupt();
    350e:	0e 94 69 1a 	call	0x34d2	; 0x34d2 <initInterrupt>
	srand(time(NULL));
    3512:	80 e0       	ldi	r24, 0x00	; 0
    3514:	90 e0       	ldi	r25, 0x00	; 0
    3516:	0e 94 49 00 	call	0x92	; 0x92 <time>
    351a:	cb 01       	movw	r24, r22
    351c:	0e 94 85 1b 	call	0x370a	; 0x370a <srand>

	while(1){
		if(PINB == 0x80){
    3520:	86 b3       	in	r24, 0x16	; 22
    3522:	80 38       	cpi	r24, 0x80	; 128
    3524:	49 f5       	brne	.+82     	; 0x3578 <main+0x96>
			isStarted =0;
    3526:	10 92 4f 01 	sts	0x014F, r1	; 0x80014f <isStarted+0x1>
    352a:	10 92 4e 01 	sts	0x014E, r1	; 0x80014e <isStarted>
			isOngoing=0;
    352e:	10 92 4d 01 	sts	0x014D, r1	; 0x80014d <isOngoing+0x1>
    3532:	10 92 4c 01 	sts	0x014C, r1	; 0x80014c <isOngoing>
			curX = 1;
    3536:	81 e0       	ldi	r24, 0x01	; 1
    3538:	90 e0       	ldi	r25, 0x00	; 0
    353a:	90 93 14 01 	sts	0x0114, r25	; 0x800114 <curX+0x1>
    353e:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <curX>
			curY = 4;
    3542:	84 e0       	ldi	r24, 0x04	; 4
    3544:	90 e0       	ldi	r25, 0x00	; 0
    3546:	90 93 12 01 	sts	0x0112, r25	; 0x800112 <curY+0x1>
    354a:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <curY>
			memset(board,0,sizeof(board));
    354e:	84 e4       	ldi	r24, 0x44	; 68
    3550:	91 e0       	ldi	r25, 0x01	; 1
    3552:	e4 e5       	ldi	r30, 0x54	; 84
    3554:	f1 e0       	ldi	r31, 0x01	; 1
    3556:	df 01       	movw	r26, r30
    3558:	9c 01       	movw	r18, r24
    355a:	1d 92       	st	X+, r1
    355c:	21 50       	subi	r18, 0x01	; 1
    355e:	30 40       	sbci	r19, 0x00	; 0
    3560:	e1 f7       	brne	.-8      	; 0x355a <main+0x78>
			memset(tmp_LED,0,sizeof(tmp_LED));
    3562:	80 e1       	ldi	r24, 0x10	; 16
    3564:	e8 e9       	ldi	r30, 0x98	; 152
    3566:	f2 e0       	ldi	r31, 0x02	; 2
    3568:	df 01       	movw	r26, r30
    356a:	1d 92       	st	X+, r1
    356c:	8a 95       	dec	r24
    356e:	e9 f7       	brne	.-6      	; 0x356a <main+0x88>
			makeBOARD(60);
    3570:	8c e3       	ldi	r24, 0x3C	; 60
    3572:	90 e0       	ldi	r25, 0x00	; 0
    3574:	0e 94 78 16 	call	0x2cf0	; 0x2cf0 <makeBOARD>
		}
		if(isStarted == 0 && isOngoing == 0){
    3578:	80 91 4e 01 	lds	r24, 0x014E	; 0x80014e <isStarted>
    357c:	90 91 4f 01 	lds	r25, 0x014F	; 0x80014f <isStarted+0x1>
    3580:	89 2b       	or	r24, r25
    3582:	61 f4       	brne	.+24     	; 0x359c <main+0xba>
    3584:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <isOngoing>
    3588:	90 91 4d 01 	lds	r25, 0x014D	; 0x80014d <isOngoing+0x1>
    358c:	89 2b       	or	r24, r25
    358e:	31 f4       	brne	.+12     	; 0x359c <main+0xba>
			scrollingText("TETRIS  ",5);
    3590:	65 e0       	ldi	r22, 0x05	; 5
    3592:	70 e0       	ldi	r23, 0x00	; 0
    3594:	80 e4       	ldi	r24, 0x40	; 64
    3596:	91 e0       	ldi	r25, 0x01	; 1
    3598:	0e 94 c6 00 	call	0x18c	; 0x18c <scrollingText>
		}
		if (isStarted==1 && isOngoing ==1){
    359c:	80 91 4e 01 	lds	r24, 0x014E	; 0x80014e <isStarted>
    35a0:	90 91 4f 01 	lds	r25, 0x014F	; 0x80014f <isStarted+0x1>
    35a4:	81 30       	cpi	r24, 0x01	; 1
    35a6:	91 05       	cpc	r25, r1
    35a8:	51 f4       	brne	.+20     	; 0x35be <main+0xdc>
    35aa:	20 91 4c 01 	lds	r18, 0x014C	; 0x80014c <isOngoing>
    35ae:	30 91 4d 01 	lds	r19, 0x014D	; 0x80014d <isOngoing+0x1>
    35b2:	21 30       	cpi	r18, 0x01	; 1
    35b4:	31 05       	cpc	r19, r1
    35b6:	19 f4       	brne	.+6      	; 0x35be <main+0xdc>
			Play();
    35b8:	0e 94 b1 19 	call	0x3362	; 0x3362 <Play>
    35bc:	b1 cf       	rjmp	.-158    	; 0x3520 <main+0x3e>
		}
		else if(isStarted == 1 && isOngoing==0)
    35be:	01 97       	sbiw	r24, 0x01	; 1
    35c0:	99 f4       	brne	.+38     	; 0x35e8 <main+0x106>
    35c2:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <isOngoing>
    35c6:	90 91 4d 01 	lds	r25, 0x014D	; 0x80014d <isOngoing+0x1>
    35ca:	89 2b       	or	r24, r25
    35cc:	69 f4       	brne	.+26     	; 0x35e8 <main+0x106>
		{
			uint8_t temp = PINB & 0x01;
			if(temp==0x01)
    35ce:	b0 9b       	sbis	0x16, 0	; 22
    35d0:	a7 cf       	rjmp	.-178    	; 0x3520 <main+0x3e>
			{
				isStarted =1;
    35d2:	81 e0       	ldi	r24, 0x01	; 1
    35d4:	90 e0       	ldi	r25, 0x00	; 0
    35d6:	90 93 4f 01 	sts	0x014F, r25	; 0x80014f <isStarted+0x1>
    35da:	80 93 4e 01 	sts	0x014E, r24	; 0x80014e <isStarted>
				isOngoing=1;
    35de:	90 93 4d 01 	sts	0x014D, r25	; 0x80014d <isOngoing+0x1>
    35e2:	80 93 4c 01 	sts	0x014C, r24	; 0x80014c <isOngoing>
    35e6:	9c cf       	rjmp	.-200    	; 0x3520 <main+0x3e>
			}
		}
		else if(PINB==0b00000001)
    35e8:	86 b3       	in	r24, 0x16	; 22
    35ea:	81 30       	cpi	r24, 0x01	; 1
    35ec:	09 f0       	breq	.+2      	; 0x35f0 <main+0x10e>
    35ee:	98 cf       	rjmp	.-208    	; 0x3520 <main+0x3e>
		{
			isStarted =1;
    35f0:	81 e0       	ldi	r24, 0x01	; 1
    35f2:	90 e0       	ldi	r25, 0x00	; 0
    35f4:	90 93 4f 01 	sts	0x014F, r25	; 0x80014f <isStarted+0x1>
    35f8:	80 93 4e 01 	sts	0x014E, r24	; 0x80014e <isStarted>
			isOngoing=1;
    35fc:	90 93 4d 01 	sts	0x014D, r25	; 0x80014d <isOngoing+0x1>
    3600:	80 93 4c 01 	sts	0x014C, r24	; 0x80014c <isOngoing>
    3604:	bf e7       	ldi	r27, 0x7F	; 127
    3606:	28 e3       	ldi	r18, 0x38	; 56
    3608:	31 e0       	ldi	r19, 0x01	; 1
    360a:	b1 50       	subi	r27, 0x01	; 1
    360c:	20 40       	sbci	r18, 0x00	; 0
    360e:	30 40       	sbci	r19, 0x00	; 0
    3610:	e1 f7       	brne	.-8      	; 0x360a <main+0x128>
    3612:	00 c0       	rjmp	.+0      	; 0x3614 <main+0x132>
    3614:	00 00       	nop
    3616:	84 cf       	rjmp	.-248    	; 0x3520 <main+0x3e>

00003618 <__divmodhi4>:
    3618:	97 fb       	bst	r25, 7
    361a:	07 2e       	mov	r0, r23
    361c:	16 f4       	brtc	.+4      	; 0x3622 <__divmodhi4+0xa>
    361e:	00 94       	com	r0
    3620:	07 d0       	rcall	.+14     	; 0x3630 <__divmodhi4_neg1>
    3622:	77 fd       	sbrc	r23, 7
    3624:	09 d0       	rcall	.+18     	; 0x3638 <__divmodhi4_neg2>
    3626:	0e 94 20 1b 	call	0x3640	; 0x3640 <__udivmodhi4>
    362a:	07 fc       	sbrc	r0, 7
    362c:	05 d0       	rcall	.+10     	; 0x3638 <__divmodhi4_neg2>
    362e:	3e f4       	brtc	.+14     	; 0x363e <__divmodhi4_exit>

00003630 <__divmodhi4_neg1>:
    3630:	90 95       	com	r25
    3632:	81 95       	neg	r24
    3634:	9f 4f       	sbci	r25, 0xFF	; 255
    3636:	08 95       	ret

00003638 <__divmodhi4_neg2>:
    3638:	70 95       	com	r23
    363a:	61 95       	neg	r22
    363c:	7f 4f       	sbci	r23, 0xFF	; 255

0000363e <__divmodhi4_exit>:
    363e:	08 95       	ret

00003640 <__udivmodhi4>:
    3640:	aa 1b       	sub	r26, r26
    3642:	bb 1b       	sub	r27, r27
    3644:	51 e1       	ldi	r21, 0x11	; 17
    3646:	07 c0       	rjmp	.+14     	; 0x3656 <__udivmodhi4_ep>

00003648 <__udivmodhi4_loop>:
    3648:	aa 1f       	adc	r26, r26
    364a:	bb 1f       	adc	r27, r27
    364c:	a6 17       	cp	r26, r22
    364e:	b7 07       	cpc	r27, r23
    3650:	10 f0       	brcs	.+4      	; 0x3656 <__udivmodhi4_ep>
    3652:	a6 1b       	sub	r26, r22
    3654:	b7 0b       	sbc	r27, r23

00003656 <__udivmodhi4_ep>:
    3656:	88 1f       	adc	r24, r24
    3658:	99 1f       	adc	r25, r25
    365a:	5a 95       	dec	r21
    365c:	a9 f7       	brne	.-22     	; 0x3648 <__udivmodhi4_loop>
    365e:	80 95       	com	r24
    3660:	90 95       	com	r25
    3662:	bc 01       	movw	r22, r24
    3664:	cd 01       	movw	r24, r26
    3666:	08 95       	ret

00003668 <do_rand>:
    3668:	8f 92       	push	r8
    366a:	9f 92       	push	r9
    366c:	af 92       	push	r10
    366e:	bf 92       	push	r11
    3670:	cf 92       	push	r12
    3672:	df 92       	push	r13
    3674:	ef 92       	push	r14
    3676:	ff 92       	push	r15
    3678:	cf 93       	push	r28
    367a:	df 93       	push	r29
    367c:	ec 01       	movw	r28, r24
    367e:	68 81       	ld	r22, Y
    3680:	79 81       	ldd	r23, Y+1	; 0x01
    3682:	8a 81       	ldd	r24, Y+2	; 0x02
    3684:	9b 81       	ldd	r25, Y+3	; 0x03
    3686:	61 15       	cp	r22, r1
    3688:	71 05       	cpc	r23, r1
    368a:	81 05       	cpc	r24, r1
    368c:	91 05       	cpc	r25, r1
    368e:	21 f4       	brne	.+8      	; 0x3698 <do_rand+0x30>
    3690:	64 e2       	ldi	r22, 0x24	; 36
    3692:	79 ed       	ldi	r23, 0xD9	; 217
    3694:	8b e5       	ldi	r24, 0x5B	; 91
    3696:	97 e0       	ldi	r25, 0x07	; 7
    3698:	2d e1       	ldi	r18, 0x1D	; 29
    369a:	33 ef       	ldi	r19, 0xF3	; 243
    369c:	41 e0       	ldi	r20, 0x01	; 1
    369e:	50 e0       	ldi	r21, 0x00	; 0
    36a0:	0e 94 51 1e 	call	0x3ca2	; 0x3ca2 <__divmodsi4>
    36a4:	49 01       	movw	r8, r18
    36a6:	5a 01       	movw	r10, r20
    36a8:	9b 01       	movw	r18, r22
    36aa:	ac 01       	movw	r20, r24
    36ac:	a7 ea       	ldi	r26, 0xA7	; 167
    36ae:	b1 e4       	ldi	r27, 0x41	; 65
    36b0:	0e 94 70 1e 	call	0x3ce0	; 0x3ce0 <__muluhisi3>
    36b4:	6b 01       	movw	r12, r22
    36b6:	7c 01       	movw	r14, r24
    36b8:	ac ee       	ldi	r26, 0xEC	; 236
    36ba:	b4 ef       	ldi	r27, 0xF4	; 244
    36bc:	a5 01       	movw	r20, r10
    36be:	94 01       	movw	r18, r8
    36c0:	0e 94 7e 1e 	call	0x3cfc	; 0x3cfc <__mulohisi3>
    36c4:	dc 01       	movw	r26, r24
    36c6:	cb 01       	movw	r24, r22
    36c8:	8c 0d       	add	r24, r12
    36ca:	9d 1d       	adc	r25, r13
    36cc:	ae 1d       	adc	r26, r14
    36ce:	bf 1d       	adc	r27, r15
    36d0:	b7 ff       	sbrs	r27, 7
    36d2:	03 c0       	rjmp	.+6      	; 0x36da <do_rand+0x72>
    36d4:	01 97       	sbiw	r24, 0x01	; 1
    36d6:	a1 09       	sbc	r26, r1
    36d8:	b0 48       	sbci	r27, 0x80	; 128
    36da:	88 83       	st	Y, r24
    36dc:	99 83       	std	Y+1, r25	; 0x01
    36de:	aa 83       	std	Y+2, r26	; 0x02
    36e0:	bb 83       	std	Y+3, r27	; 0x03
    36e2:	9f 77       	andi	r25, 0x7F	; 127
    36e4:	df 91       	pop	r29
    36e6:	cf 91       	pop	r28
    36e8:	ff 90       	pop	r15
    36ea:	ef 90       	pop	r14
    36ec:	df 90       	pop	r13
    36ee:	cf 90       	pop	r12
    36f0:	bf 90       	pop	r11
    36f2:	af 90       	pop	r10
    36f4:	9f 90       	pop	r9
    36f6:	8f 90       	pop	r8
    36f8:	08 95       	ret

000036fa <rand_r>:
    36fa:	0e 94 34 1b 	call	0x3668	; 0x3668 <do_rand>
    36fe:	08 95       	ret

00003700 <rand>:
    3700:	80 e6       	ldi	r24, 0x60	; 96
    3702:	90 e0       	ldi	r25, 0x00	; 0
    3704:	0e 94 34 1b 	call	0x3668	; 0x3668 <do_rand>
    3708:	08 95       	ret

0000370a <srand>:
    370a:	a0 e0       	ldi	r26, 0x00	; 0
    370c:	b0 e0       	ldi	r27, 0x00	; 0
    370e:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
    3712:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
    3716:	a0 93 62 00 	sts	0x0062, r26	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
    371a:	b0 93 63 00 	sts	0x0063, r27	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
    371e:	08 95       	ret

00003720 <snprintf>:
    3720:	ae e0       	ldi	r26, 0x0E	; 14
    3722:	b0 e0       	ldi	r27, 0x00	; 0
    3724:	e6 e9       	ldi	r30, 0x96	; 150
    3726:	fb e1       	ldi	r31, 0x1B	; 27
    3728:	0c 94 91 1e 	jmp	0x3d22	; 0x3d22 <__prologue_saves__+0x1c>
    372c:	0d 89       	ldd	r16, Y+21	; 0x15
    372e:	1e 89       	ldd	r17, Y+22	; 0x16
    3730:	8f 89       	ldd	r24, Y+23	; 0x17
    3732:	98 8d       	ldd	r25, Y+24	; 0x18
    3734:	26 e0       	ldi	r18, 0x06	; 6
    3736:	2c 83       	std	Y+4, r18	; 0x04
    3738:	1a 83       	std	Y+2, r17	; 0x02
    373a:	09 83       	std	Y+1, r16	; 0x01
    373c:	97 ff       	sbrs	r25, 7
    373e:	02 c0       	rjmp	.+4      	; 0x3744 <snprintf+0x24>
    3740:	80 e0       	ldi	r24, 0x00	; 0
    3742:	90 e8       	ldi	r25, 0x80	; 128
    3744:	01 97       	sbiw	r24, 0x01	; 1
    3746:	9e 83       	std	Y+6, r25	; 0x06
    3748:	8d 83       	std	Y+5, r24	; 0x05
    374a:	ae 01       	movw	r20, r28
    374c:	45 5e       	subi	r20, 0xE5	; 229
    374e:	5f 4f       	sbci	r21, 0xFF	; 255
    3750:	69 8d       	ldd	r22, Y+25	; 0x19
    3752:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3754:	ce 01       	movw	r24, r28
    3756:	01 96       	adiw	r24, 0x01	; 1
    3758:	0e 94 c0 1b 	call	0x3780	; 0x3780 <vfprintf>
    375c:	4d 81       	ldd	r20, Y+5	; 0x05
    375e:	5e 81       	ldd	r21, Y+6	; 0x06
    3760:	57 fd       	sbrc	r21, 7
    3762:	0a c0       	rjmp	.+20     	; 0x3778 <snprintf+0x58>
    3764:	2f 81       	ldd	r18, Y+7	; 0x07
    3766:	38 85       	ldd	r19, Y+8	; 0x08
    3768:	42 17       	cp	r20, r18
    376a:	53 07       	cpc	r21, r19
    376c:	0c f4       	brge	.+2      	; 0x3770 <snprintf+0x50>
    376e:	9a 01       	movw	r18, r20
    3770:	f8 01       	movw	r30, r16
    3772:	e2 0f       	add	r30, r18
    3774:	f3 1f       	adc	r31, r19
    3776:	10 82       	st	Z, r1
    3778:	2e 96       	adiw	r28, 0x0e	; 14
    377a:	e4 e0       	ldi	r30, 0x04	; 4
    377c:	0c 94 ad 1e 	jmp	0x3d5a	; 0x3d5a <__epilogue_restores__+0x1c>

00003780 <vfprintf>:
    3780:	ab e0       	ldi	r26, 0x0B	; 11
    3782:	b0 e0       	ldi	r27, 0x00	; 0
    3784:	e6 ec       	ldi	r30, 0xC6	; 198
    3786:	fb e1       	ldi	r31, 0x1B	; 27
    3788:	0c 94 83 1e 	jmp	0x3d06	; 0x3d06 <__prologue_saves__>
    378c:	6c 01       	movw	r12, r24
    378e:	7b 01       	movw	r14, r22
    3790:	8a 01       	movw	r16, r20
    3792:	fc 01       	movw	r30, r24
    3794:	17 82       	std	Z+7, r1	; 0x07
    3796:	16 82       	std	Z+6, r1	; 0x06
    3798:	83 81       	ldd	r24, Z+3	; 0x03
    379a:	81 ff       	sbrs	r24, 1
    379c:	cc c1       	rjmp	.+920    	; 0x3b36 <vfprintf+0x3b6>
    379e:	ce 01       	movw	r24, r28
    37a0:	01 96       	adiw	r24, 0x01	; 1
    37a2:	3c 01       	movw	r6, r24
    37a4:	f6 01       	movw	r30, r12
    37a6:	93 81       	ldd	r25, Z+3	; 0x03
    37a8:	f7 01       	movw	r30, r14
    37aa:	93 fd       	sbrc	r25, 3
    37ac:	85 91       	lpm	r24, Z+
    37ae:	93 ff       	sbrs	r25, 3
    37b0:	81 91       	ld	r24, Z+
    37b2:	7f 01       	movw	r14, r30
    37b4:	88 23       	and	r24, r24
    37b6:	09 f4       	brne	.+2      	; 0x37ba <vfprintf+0x3a>
    37b8:	ba c1       	rjmp	.+884    	; 0x3b2e <vfprintf+0x3ae>
    37ba:	85 32       	cpi	r24, 0x25	; 37
    37bc:	39 f4       	brne	.+14     	; 0x37cc <vfprintf+0x4c>
    37be:	93 fd       	sbrc	r25, 3
    37c0:	85 91       	lpm	r24, Z+
    37c2:	93 ff       	sbrs	r25, 3
    37c4:	81 91       	ld	r24, Z+
    37c6:	7f 01       	movw	r14, r30
    37c8:	85 32       	cpi	r24, 0x25	; 37
    37ca:	29 f4       	brne	.+10     	; 0x37d6 <vfprintf+0x56>
    37cc:	b6 01       	movw	r22, r12
    37ce:	90 e0       	ldi	r25, 0x00	; 0
    37d0:	0e 94 b7 1d 	call	0x3b6e	; 0x3b6e <fputc>
    37d4:	e7 cf       	rjmp	.-50     	; 0x37a4 <vfprintf+0x24>
    37d6:	91 2c       	mov	r9, r1
    37d8:	21 2c       	mov	r2, r1
    37da:	31 2c       	mov	r3, r1
    37dc:	ff e1       	ldi	r31, 0x1F	; 31
    37de:	f3 15       	cp	r31, r3
    37e0:	d8 f0       	brcs	.+54     	; 0x3818 <vfprintf+0x98>
    37e2:	8b 32       	cpi	r24, 0x2B	; 43
    37e4:	79 f0       	breq	.+30     	; 0x3804 <vfprintf+0x84>
    37e6:	38 f4       	brcc	.+14     	; 0x37f6 <vfprintf+0x76>
    37e8:	80 32       	cpi	r24, 0x20	; 32
    37ea:	79 f0       	breq	.+30     	; 0x380a <vfprintf+0x8a>
    37ec:	83 32       	cpi	r24, 0x23	; 35
    37ee:	a1 f4       	brne	.+40     	; 0x3818 <vfprintf+0x98>
    37f0:	23 2d       	mov	r18, r3
    37f2:	20 61       	ori	r18, 0x10	; 16
    37f4:	1d c0       	rjmp	.+58     	; 0x3830 <vfprintf+0xb0>
    37f6:	8d 32       	cpi	r24, 0x2D	; 45
    37f8:	61 f0       	breq	.+24     	; 0x3812 <vfprintf+0x92>
    37fa:	80 33       	cpi	r24, 0x30	; 48
    37fc:	69 f4       	brne	.+26     	; 0x3818 <vfprintf+0x98>
    37fe:	23 2d       	mov	r18, r3
    3800:	21 60       	ori	r18, 0x01	; 1
    3802:	16 c0       	rjmp	.+44     	; 0x3830 <vfprintf+0xb0>
    3804:	83 2d       	mov	r24, r3
    3806:	82 60       	ori	r24, 0x02	; 2
    3808:	38 2e       	mov	r3, r24
    380a:	e3 2d       	mov	r30, r3
    380c:	e4 60       	ori	r30, 0x04	; 4
    380e:	3e 2e       	mov	r3, r30
    3810:	2a c0       	rjmp	.+84     	; 0x3866 <vfprintf+0xe6>
    3812:	f3 2d       	mov	r31, r3
    3814:	f8 60       	ori	r31, 0x08	; 8
    3816:	1d c0       	rjmp	.+58     	; 0x3852 <vfprintf+0xd2>
    3818:	37 fc       	sbrc	r3, 7
    381a:	2d c0       	rjmp	.+90     	; 0x3876 <vfprintf+0xf6>
    381c:	20 ed       	ldi	r18, 0xD0	; 208
    381e:	28 0f       	add	r18, r24
    3820:	2a 30       	cpi	r18, 0x0A	; 10
    3822:	40 f0       	brcs	.+16     	; 0x3834 <vfprintf+0xb4>
    3824:	8e 32       	cpi	r24, 0x2E	; 46
    3826:	b9 f4       	brne	.+46     	; 0x3856 <vfprintf+0xd6>
    3828:	36 fc       	sbrc	r3, 6
    382a:	81 c1       	rjmp	.+770    	; 0x3b2e <vfprintf+0x3ae>
    382c:	23 2d       	mov	r18, r3
    382e:	20 64       	ori	r18, 0x40	; 64
    3830:	32 2e       	mov	r3, r18
    3832:	19 c0       	rjmp	.+50     	; 0x3866 <vfprintf+0xe6>
    3834:	36 fe       	sbrs	r3, 6
    3836:	06 c0       	rjmp	.+12     	; 0x3844 <vfprintf+0xc4>
    3838:	8a e0       	ldi	r24, 0x0A	; 10
    383a:	98 9e       	mul	r9, r24
    383c:	20 0d       	add	r18, r0
    383e:	11 24       	eor	r1, r1
    3840:	92 2e       	mov	r9, r18
    3842:	11 c0       	rjmp	.+34     	; 0x3866 <vfprintf+0xe6>
    3844:	ea e0       	ldi	r30, 0x0A	; 10
    3846:	2e 9e       	mul	r2, r30
    3848:	20 0d       	add	r18, r0
    384a:	11 24       	eor	r1, r1
    384c:	22 2e       	mov	r2, r18
    384e:	f3 2d       	mov	r31, r3
    3850:	f0 62       	ori	r31, 0x20	; 32
    3852:	3f 2e       	mov	r3, r31
    3854:	08 c0       	rjmp	.+16     	; 0x3866 <vfprintf+0xe6>
    3856:	8c 36       	cpi	r24, 0x6C	; 108
    3858:	21 f4       	brne	.+8      	; 0x3862 <vfprintf+0xe2>
    385a:	83 2d       	mov	r24, r3
    385c:	80 68       	ori	r24, 0x80	; 128
    385e:	38 2e       	mov	r3, r24
    3860:	02 c0       	rjmp	.+4      	; 0x3866 <vfprintf+0xe6>
    3862:	88 36       	cpi	r24, 0x68	; 104
    3864:	41 f4       	brne	.+16     	; 0x3876 <vfprintf+0xf6>
    3866:	f7 01       	movw	r30, r14
    3868:	93 fd       	sbrc	r25, 3
    386a:	85 91       	lpm	r24, Z+
    386c:	93 ff       	sbrs	r25, 3
    386e:	81 91       	ld	r24, Z+
    3870:	7f 01       	movw	r14, r30
    3872:	81 11       	cpse	r24, r1
    3874:	b3 cf       	rjmp	.-154    	; 0x37dc <vfprintf+0x5c>
    3876:	98 2f       	mov	r25, r24
    3878:	9f 7d       	andi	r25, 0xDF	; 223
    387a:	95 54       	subi	r25, 0x45	; 69
    387c:	93 30       	cpi	r25, 0x03	; 3
    387e:	28 f4       	brcc	.+10     	; 0x388a <vfprintf+0x10a>
    3880:	0c 5f       	subi	r16, 0xFC	; 252
    3882:	1f 4f       	sbci	r17, 0xFF	; 255
    3884:	9f e3       	ldi	r25, 0x3F	; 63
    3886:	99 83       	std	Y+1, r25	; 0x01
    3888:	0d c0       	rjmp	.+26     	; 0x38a4 <vfprintf+0x124>
    388a:	83 36       	cpi	r24, 0x63	; 99
    388c:	31 f0       	breq	.+12     	; 0x389a <vfprintf+0x11a>
    388e:	83 37       	cpi	r24, 0x73	; 115
    3890:	71 f0       	breq	.+28     	; 0x38ae <vfprintf+0x12e>
    3892:	83 35       	cpi	r24, 0x53	; 83
    3894:	09 f0       	breq	.+2      	; 0x3898 <vfprintf+0x118>
    3896:	59 c0       	rjmp	.+178    	; 0x394a <vfprintf+0x1ca>
    3898:	21 c0       	rjmp	.+66     	; 0x38dc <vfprintf+0x15c>
    389a:	f8 01       	movw	r30, r16
    389c:	80 81       	ld	r24, Z
    389e:	89 83       	std	Y+1, r24	; 0x01
    38a0:	0e 5f       	subi	r16, 0xFE	; 254
    38a2:	1f 4f       	sbci	r17, 0xFF	; 255
    38a4:	88 24       	eor	r8, r8
    38a6:	83 94       	inc	r8
    38a8:	91 2c       	mov	r9, r1
    38aa:	53 01       	movw	r10, r6
    38ac:	13 c0       	rjmp	.+38     	; 0x38d4 <vfprintf+0x154>
    38ae:	28 01       	movw	r4, r16
    38b0:	f2 e0       	ldi	r31, 0x02	; 2
    38b2:	4f 0e       	add	r4, r31
    38b4:	51 1c       	adc	r5, r1
    38b6:	f8 01       	movw	r30, r16
    38b8:	a0 80       	ld	r10, Z
    38ba:	b1 80       	ldd	r11, Z+1	; 0x01
    38bc:	36 fe       	sbrs	r3, 6
    38be:	03 c0       	rjmp	.+6      	; 0x38c6 <vfprintf+0x146>
    38c0:	69 2d       	mov	r22, r9
    38c2:	70 e0       	ldi	r23, 0x00	; 0
    38c4:	02 c0       	rjmp	.+4      	; 0x38ca <vfprintf+0x14a>
    38c6:	6f ef       	ldi	r22, 0xFF	; 255
    38c8:	7f ef       	ldi	r23, 0xFF	; 255
    38ca:	c5 01       	movw	r24, r10
    38cc:	0e 94 ac 1d 	call	0x3b58	; 0x3b58 <strnlen>
    38d0:	4c 01       	movw	r8, r24
    38d2:	82 01       	movw	r16, r4
    38d4:	f3 2d       	mov	r31, r3
    38d6:	ff 77       	andi	r31, 0x7F	; 127
    38d8:	3f 2e       	mov	r3, r31
    38da:	16 c0       	rjmp	.+44     	; 0x3908 <vfprintf+0x188>
    38dc:	28 01       	movw	r4, r16
    38de:	22 e0       	ldi	r18, 0x02	; 2
    38e0:	42 0e       	add	r4, r18
    38e2:	51 1c       	adc	r5, r1
    38e4:	f8 01       	movw	r30, r16
    38e6:	a0 80       	ld	r10, Z
    38e8:	b1 80       	ldd	r11, Z+1	; 0x01
    38ea:	36 fe       	sbrs	r3, 6
    38ec:	03 c0       	rjmp	.+6      	; 0x38f4 <vfprintf+0x174>
    38ee:	69 2d       	mov	r22, r9
    38f0:	70 e0       	ldi	r23, 0x00	; 0
    38f2:	02 c0       	rjmp	.+4      	; 0x38f8 <vfprintf+0x178>
    38f4:	6f ef       	ldi	r22, 0xFF	; 255
    38f6:	7f ef       	ldi	r23, 0xFF	; 255
    38f8:	c5 01       	movw	r24, r10
    38fa:	0e 94 a1 1d 	call	0x3b42	; 0x3b42 <strnlen_P>
    38fe:	4c 01       	movw	r8, r24
    3900:	f3 2d       	mov	r31, r3
    3902:	f0 68       	ori	r31, 0x80	; 128
    3904:	3f 2e       	mov	r3, r31
    3906:	82 01       	movw	r16, r4
    3908:	33 fc       	sbrc	r3, 3
    390a:	1b c0       	rjmp	.+54     	; 0x3942 <vfprintf+0x1c2>
    390c:	82 2d       	mov	r24, r2
    390e:	90 e0       	ldi	r25, 0x00	; 0
    3910:	88 16       	cp	r8, r24
    3912:	99 06       	cpc	r9, r25
    3914:	b0 f4       	brcc	.+44     	; 0x3942 <vfprintf+0x1c2>
    3916:	b6 01       	movw	r22, r12
    3918:	80 e2       	ldi	r24, 0x20	; 32
    391a:	90 e0       	ldi	r25, 0x00	; 0
    391c:	0e 94 b7 1d 	call	0x3b6e	; 0x3b6e <fputc>
    3920:	2a 94       	dec	r2
    3922:	f4 cf       	rjmp	.-24     	; 0x390c <vfprintf+0x18c>
    3924:	f5 01       	movw	r30, r10
    3926:	37 fc       	sbrc	r3, 7
    3928:	85 91       	lpm	r24, Z+
    392a:	37 fe       	sbrs	r3, 7
    392c:	81 91       	ld	r24, Z+
    392e:	5f 01       	movw	r10, r30
    3930:	b6 01       	movw	r22, r12
    3932:	90 e0       	ldi	r25, 0x00	; 0
    3934:	0e 94 b7 1d 	call	0x3b6e	; 0x3b6e <fputc>
    3938:	21 10       	cpse	r2, r1
    393a:	2a 94       	dec	r2
    393c:	21 e0       	ldi	r18, 0x01	; 1
    393e:	82 1a       	sub	r8, r18
    3940:	91 08       	sbc	r9, r1
    3942:	81 14       	cp	r8, r1
    3944:	91 04       	cpc	r9, r1
    3946:	71 f7       	brne	.-36     	; 0x3924 <vfprintf+0x1a4>
    3948:	e8 c0       	rjmp	.+464    	; 0x3b1a <vfprintf+0x39a>
    394a:	84 36       	cpi	r24, 0x64	; 100
    394c:	11 f0       	breq	.+4      	; 0x3952 <vfprintf+0x1d2>
    394e:	89 36       	cpi	r24, 0x69	; 105
    3950:	41 f5       	brne	.+80     	; 0x39a2 <vfprintf+0x222>
    3952:	f8 01       	movw	r30, r16
    3954:	37 fe       	sbrs	r3, 7
    3956:	07 c0       	rjmp	.+14     	; 0x3966 <vfprintf+0x1e6>
    3958:	60 81       	ld	r22, Z
    395a:	71 81       	ldd	r23, Z+1	; 0x01
    395c:	82 81       	ldd	r24, Z+2	; 0x02
    395e:	93 81       	ldd	r25, Z+3	; 0x03
    3960:	0c 5f       	subi	r16, 0xFC	; 252
    3962:	1f 4f       	sbci	r17, 0xFF	; 255
    3964:	08 c0       	rjmp	.+16     	; 0x3976 <vfprintf+0x1f6>
    3966:	60 81       	ld	r22, Z
    3968:	71 81       	ldd	r23, Z+1	; 0x01
    396a:	07 2e       	mov	r0, r23
    396c:	00 0c       	add	r0, r0
    396e:	88 0b       	sbc	r24, r24
    3970:	99 0b       	sbc	r25, r25
    3972:	0e 5f       	subi	r16, 0xFE	; 254
    3974:	1f 4f       	sbci	r17, 0xFF	; 255
    3976:	f3 2d       	mov	r31, r3
    3978:	ff 76       	andi	r31, 0x6F	; 111
    397a:	3f 2e       	mov	r3, r31
    397c:	97 ff       	sbrs	r25, 7
    397e:	09 c0       	rjmp	.+18     	; 0x3992 <vfprintf+0x212>
    3980:	90 95       	com	r25
    3982:	80 95       	com	r24
    3984:	70 95       	com	r23
    3986:	61 95       	neg	r22
    3988:	7f 4f       	sbci	r23, 0xFF	; 255
    398a:	8f 4f       	sbci	r24, 0xFF	; 255
    398c:	9f 4f       	sbci	r25, 0xFF	; 255
    398e:	f0 68       	ori	r31, 0x80	; 128
    3990:	3f 2e       	mov	r3, r31
    3992:	2a e0       	ldi	r18, 0x0A	; 10
    3994:	30 e0       	ldi	r19, 0x00	; 0
    3996:	a3 01       	movw	r20, r6
    3998:	0e 94 f3 1d 	call	0x3be6	; 0x3be6 <__ultoa_invert>
    399c:	88 2e       	mov	r8, r24
    399e:	86 18       	sub	r8, r6
    39a0:	45 c0       	rjmp	.+138    	; 0x3a2c <vfprintf+0x2ac>
    39a2:	85 37       	cpi	r24, 0x75	; 117
    39a4:	31 f4       	brne	.+12     	; 0x39b2 <vfprintf+0x232>
    39a6:	23 2d       	mov	r18, r3
    39a8:	2f 7e       	andi	r18, 0xEF	; 239
    39aa:	b2 2e       	mov	r11, r18
    39ac:	2a e0       	ldi	r18, 0x0A	; 10
    39ae:	30 e0       	ldi	r19, 0x00	; 0
    39b0:	25 c0       	rjmp	.+74     	; 0x39fc <vfprintf+0x27c>
    39b2:	93 2d       	mov	r25, r3
    39b4:	99 7f       	andi	r25, 0xF9	; 249
    39b6:	b9 2e       	mov	r11, r25
    39b8:	8f 36       	cpi	r24, 0x6F	; 111
    39ba:	c1 f0       	breq	.+48     	; 0x39ec <vfprintf+0x26c>
    39bc:	18 f4       	brcc	.+6      	; 0x39c4 <vfprintf+0x244>
    39be:	88 35       	cpi	r24, 0x58	; 88
    39c0:	79 f0       	breq	.+30     	; 0x39e0 <vfprintf+0x260>
    39c2:	b5 c0       	rjmp	.+362    	; 0x3b2e <vfprintf+0x3ae>
    39c4:	80 37       	cpi	r24, 0x70	; 112
    39c6:	19 f0       	breq	.+6      	; 0x39ce <vfprintf+0x24e>
    39c8:	88 37       	cpi	r24, 0x78	; 120
    39ca:	21 f0       	breq	.+8      	; 0x39d4 <vfprintf+0x254>
    39cc:	b0 c0       	rjmp	.+352    	; 0x3b2e <vfprintf+0x3ae>
    39ce:	e9 2f       	mov	r30, r25
    39d0:	e0 61       	ori	r30, 0x10	; 16
    39d2:	be 2e       	mov	r11, r30
    39d4:	b4 fe       	sbrs	r11, 4
    39d6:	0d c0       	rjmp	.+26     	; 0x39f2 <vfprintf+0x272>
    39d8:	fb 2d       	mov	r31, r11
    39da:	f4 60       	ori	r31, 0x04	; 4
    39dc:	bf 2e       	mov	r11, r31
    39de:	09 c0       	rjmp	.+18     	; 0x39f2 <vfprintf+0x272>
    39e0:	34 fe       	sbrs	r3, 4
    39e2:	0a c0       	rjmp	.+20     	; 0x39f8 <vfprintf+0x278>
    39e4:	29 2f       	mov	r18, r25
    39e6:	26 60       	ori	r18, 0x06	; 6
    39e8:	b2 2e       	mov	r11, r18
    39ea:	06 c0       	rjmp	.+12     	; 0x39f8 <vfprintf+0x278>
    39ec:	28 e0       	ldi	r18, 0x08	; 8
    39ee:	30 e0       	ldi	r19, 0x00	; 0
    39f0:	05 c0       	rjmp	.+10     	; 0x39fc <vfprintf+0x27c>
    39f2:	20 e1       	ldi	r18, 0x10	; 16
    39f4:	30 e0       	ldi	r19, 0x00	; 0
    39f6:	02 c0       	rjmp	.+4      	; 0x39fc <vfprintf+0x27c>
    39f8:	20 e1       	ldi	r18, 0x10	; 16
    39fa:	32 e0       	ldi	r19, 0x02	; 2
    39fc:	f8 01       	movw	r30, r16
    39fe:	b7 fe       	sbrs	r11, 7
    3a00:	07 c0       	rjmp	.+14     	; 0x3a10 <vfprintf+0x290>
    3a02:	60 81       	ld	r22, Z
    3a04:	71 81       	ldd	r23, Z+1	; 0x01
    3a06:	82 81       	ldd	r24, Z+2	; 0x02
    3a08:	93 81       	ldd	r25, Z+3	; 0x03
    3a0a:	0c 5f       	subi	r16, 0xFC	; 252
    3a0c:	1f 4f       	sbci	r17, 0xFF	; 255
    3a0e:	06 c0       	rjmp	.+12     	; 0x3a1c <vfprintf+0x29c>
    3a10:	60 81       	ld	r22, Z
    3a12:	71 81       	ldd	r23, Z+1	; 0x01
    3a14:	80 e0       	ldi	r24, 0x00	; 0
    3a16:	90 e0       	ldi	r25, 0x00	; 0
    3a18:	0e 5f       	subi	r16, 0xFE	; 254
    3a1a:	1f 4f       	sbci	r17, 0xFF	; 255
    3a1c:	a3 01       	movw	r20, r6
    3a1e:	0e 94 f3 1d 	call	0x3be6	; 0x3be6 <__ultoa_invert>
    3a22:	88 2e       	mov	r8, r24
    3a24:	86 18       	sub	r8, r6
    3a26:	fb 2d       	mov	r31, r11
    3a28:	ff 77       	andi	r31, 0x7F	; 127
    3a2a:	3f 2e       	mov	r3, r31
    3a2c:	36 fe       	sbrs	r3, 6
    3a2e:	0d c0       	rjmp	.+26     	; 0x3a4a <vfprintf+0x2ca>
    3a30:	23 2d       	mov	r18, r3
    3a32:	2e 7f       	andi	r18, 0xFE	; 254
    3a34:	a2 2e       	mov	r10, r18
    3a36:	89 14       	cp	r8, r9
    3a38:	58 f4       	brcc	.+22     	; 0x3a50 <vfprintf+0x2d0>
    3a3a:	34 fe       	sbrs	r3, 4
    3a3c:	0b c0       	rjmp	.+22     	; 0x3a54 <vfprintf+0x2d4>
    3a3e:	32 fc       	sbrc	r3, 2
    3a40:	09 c0       	rjmp	.+18     	; 0x3a54 <vfprintf+0x2d4>
    3a42:	83 2d       	mov	r24, r3
    3a44:	8e 7e       	andi	r24, 0xEE	; 238
    3a46:	a8 2e       	mov	r10, r24
    3a48:	05 c0       	rjmp	.+10     	; 0x3a54 <vfprintf+0x2d4>
    3a4a:	b8 2c       	mov	r11, r8
    3a4c:	a3 2c       	mov	r10, r3
    3a4e:	03 c0       	rjmp	.+6      	; 0x3a56 <vfprintf+0x2d6>
    3a50:	b8 2c       	mov	r11, r8
    3a52:	01 c0       	rjmp	.+2      	; 0x3a56 <vfprintf+0x2d6>
    3a54:	b9 2c       	mov	r11, r9
    3a56:	a4 fe       	sbrs	r10, 4
    3a58:	0f c0       	rjmp	.+30     	; 0x3a78 <vfprintf+0x2f8>
    3a5a:	fe 01       	movw	r30, r28
    3a5c:	e8 0d       	add	r30, r8
    3a5e:	f1 1d       	adc	r31, r1
    3a60:	80 81       	ld	r24, Z
    3a62:	80 33       	cpi	r24, 0x30	; 48
    3a64:	21 f4       	brne	.+8      	; 0x3a6e <vfprintf+0x2ee>
    3a66:	9a 2d       	mov	r25, r10
    3a68:	99 7e       	andi	r25, 0xE9	; 233
    3a6a:	a9 2e       	mov	r10, r25
    3a6c:	09 c0       	rjmp	.+18     	; 0x3a80 <vfprintf+0x300>
    3a6e:	a2 fe       	sbrs	r10, 2
    3a70:	06 c0       	rjmp	.+12     	; 0x3a7e <vfprintf+0x2fe>
    3a72:	b3 94       	inc	r11
    3a74:	b3 94       	inc	r11
    3a76:	04 c0       	rjmp	.+8      	; 0x3a80 <vfprintf+0x300>
    3a78:	8a 2d       	mov	r24, r10
    3a7a:	86 78       	andi	r24, 0x86	; 134
    3a7c:	09 f0       	breq	.+2      	; 0x3a80 <vfprintf+0x300>
    3a7e:	b3 94       	inc	r11
    3a80:	a3 fc       	sbrc	r10, 3
    3a82:	11 c0       	rjmp	.+34     	; 0x3aa6 <vfprintf+0x326>
    3a84:	a0 fe       	sbrs	r10, 0
    3a86:	06 c0       	rjmp	.+12     	; 0x3a94 <vfprintf+0x314>
    3a88:	b2 14       	cp	r11, r2
    3a8a:	88 f4       	brcc	.+34     	; 0x3aae <vfprintf+0x32e>
    3a8c:	28 0c       	add	r2, r8
    3a8e:	92 2c       	mov	r9, r2
    3a90:	9b 18       	sub	r9, r11
    3a92:	0e c0       	rjmp	.+28     	; 0x3ab0 <vfprintf+0x330>
    3a94:	b2 14       	cp	r11, r2
    3a96:	60 f4       	brcc	.+24     	; 0x3ab0 <vfprintf+0x330>
    3a98:	b6 01       	movw	r22, r12
    3a9a:	80 e2       	ldi	r24, 0x20	; 32
    3a9c:	90 e0       	ldi	r25, 0x00	; 0
    3a9e:	0e 94 b7 1d 	call	0x3b6e	; 0x3b6e <fputc>
    3aa2:	b3 94       	inc	r11
    3aa4:	f7 cf       	rjmp	.-18     	; 0x3a94 <vfprintf+0x314>
    3aa6:	b2 14       	cp	r11, r2
    3aa8:	18 f4       	brcc	.+6      	; 0x3ab0 <vfprintf+0x330>
    3aaa:	2b 18       	sub	r2, r11
    3aac:	02 c0       	rjmp	.+4      	; 0x3ab2 <vfprintf+0x332>
    3aae:	98 2c       	mov	r9, r8
    3ab0:	21 2c       	mov	r2, r1
    3ab2:	a4 fe       	sbrs	r10, 4
    3ab4:	10 c0       	rjmp	.+32     	; 0x3ad6 <vfprintf+0x356>
    3ab6:	b6 01       	movw	r22, r12
    3ab8:	80 e3       	ldi	r24, 0x30	; 48
    3aba:	90 e0       	ldi	r25, 0x00	; 0
    3abc:	0e 94 b7 1d 	call	0x3b6e	; 0x3b6e <fputc>
    3ac0:	a2 fe       	sbrs	r10, 2
    3ac2:	17 c0       	rjmp	.+46     	; 0x3af2 <vfprintf+0x372>
    3ac4:	a1 fc       	sbrc	r10, 1
    3ac6:	03 c0       	rjmp	.+6      	; 0x3ace <vfprintf+0x34e>
    3ac8:	88 e7       	ldi	r24, 0x78	; 120
    3aca:	90 e0       	ldi	r25, 0x00	; 0
    3acc:	02 c0       	rjmp	.+4      	; 0x3ad2 <vfprintf+0x352>
    3ace:	88 e5       	ldi	r24, 0x58	; 88
    3ad0:	90 e0       	ldi	r25, 0x00	; 0
    3ad2:	b6 01       	movw	r22, r12
    3ad4:	0c c0       	rjmp	.+24     	; 0x3aee <vfprintf+0x36e>
    3ad6:	8a 2d       	mov	r24, r10
    3ad8:	86 78       	andi	r24, 0x86	; 134
    3ada:	59 f0       	breq	.+22     	; 0x3af2 <vfprintf+0x372>
    3adc:	a1 fe       	sbrs	r10, 1
    3ade:	02 c0       	rjmp	.+4      	; 0x3ae4 <vfprintf+0x364>
    3ae0:	8b e2       	ldi	r24, 0x2B	; 43
    3ae2:	01 c0       	rjmp	.+2      	; 0x3ae6 <vfprintf+0x366>
    3ae4:	80 e2       	ldi	r24, 0x20	; 32
    3ae6:	a7 fc       	sbrc	r10, 7
    3ae8:	8d e2       	ldi	r24, 0x2D	; 45
    3aea:	b6 01       	movw	r22, r12
    3aec:	90 e0       	ldi	r25, 0x00	; 0
    3aee:	0e 94 b7 1d 	call	0x3b6e	; 0x3b6e <fputc>
    3af2:	89 14       	cp	r8, r9
    3af4:	38 f4       	brcc	.+14     	; 0x3b04 <vfprintf+0x384>
    3af6:	b6 01       	movw	r22, r12
    3af8:	80 e3       	ldi	r24, 0x30	; 48
    3afa:	90 e0       	ldi	r25, 0x00	; 0
    3afc:	0e 94 b7 1d 	call	0x3b6e	; 0x3b6e <fputc>
    3b00:	9a 94       	dec	r9
    3b02:	f7 cf       	rjmp	.-18     	; 0x3af2 <vfprintf+0x372>
    3b04:	8a 94       	dec	r8
    3b06:	f3 01       	movw	r30, r6
    3b08:	e8 0d       	add	r30, r8
    3b0a:	f1 1d       	adc	r31, r1
    3b0c:	80 81       	ld	r24, Z
    3b0e:	b6 01       	movw	r22, r12
    3b10:	90 e0       	ldi	r25, 0x00	; 0
    3b12:	0e 94 b7 1d 	call	0x3b6e	; 0x3b6e <fputc>
    3b16:	81 10       	cpse	r8, r1
    3b18:	f5 cf       	rjmp	.-22     	; 0x3b04 <vfprintf+0x384>
    3b1a:	22 20       	and	r2, r2
    3b1c:	09 f4       	brne	.+2      	; 0x3b20 <vfprintf+0x3a0>
    3b1e:	42 ce       	rjmp	.-892    	; 0x37a4 <vfprintf+0x24>
    3b20:	b6 01       	movw	r22, r12
    3b22:	80 e2       	ldi	r24, 0x20	; 32
    3b24:	90 e0       	ldi	r25, 0x00	; 0
    3b26:	0e 94 b7 1d 	call	0x3b6e	; 0x3b6e <fputc>
    3b2a:	2a 94       	dec	r2
    3b2c:	f6 cf       	rjmp	.-20     	; 0x3b1a <vfprintf+0x39a>
    3b2e:	f6 01       	movw	r30, r12
    3b30:	86 81       	ldd	r24, Z+6	; 0x06
    3b32:	97 81       	ldd	r25, Z+7	; 0x07
    3b34:	02 c0       	rjmp	.+4      	; 0x3b3a <vfprintf+0x3ba>
    3b36:	8f ef       	ldi	r24, 0xFF	; 255
    3b38:	9f ef       	ldi	r25, 0xFF	; 255
    3b3a:	2b 96       	adiw	r28, 0x0b	; 11
    3b3c:	e2 e1       	ldi	r30, 0x12	; 18
    3b3e:	0c 94 9f 1e 	jmp	0x3d3e	; 0x3d3e <__epilogue_restores__>

00003b42 <strnlen_P>:
    3b42:	fc 01       	movw	r30, r24
    3b44:	05 90       	lpm	r0, Z+
    3b46:	61 50       	subi	r22, 0x01	; 1
    3b48:	70 40       	sbci	r23, 0x00	; 0
    3b4a:	01 10       	cpse	r0, r1
    3b4c:	d8 f7       	brcc	.-10     	; 0x3b44 <strnlen_P+0x2>
    3b4e:	80 95       	com	r24
    3b50:	90 95       	com	r25
    3b52:	8e 0f       	add	r24, r30
    3b54:	9f 1f       	adc	r25, r31
    3b56:	08 95       	ret

00003b58 <strnlen>:
    3b58:	fc 01       	movw	r30, r24
    3b5a:	61 50       	subi	r22, 0x01	; 1
    3b5c:	70 40       	sbci	r23, 0x00	; 0
    3b5e:	01 90       	ld	r0, Z+
    3b60:	01 10       	cpse	r0, r1
    3b62:	d8 f7       	brcc	.-10     	; 0x3b5a <strnlen+0x2>
    3b64:	80 95       	com	r24
    3b66:	90 95       	com	r25
    3b68:	8e 0f       	add	r24, r30
    3b6a:	9f 1f       	adc	r25, r31
    3b6c:	08 95       	ret

00003b6e <fputc>:
    3b6e:	0f 93       	push	r16
    3b70:	1f 93       	push	r17
    3b72:	cf 93       	push	r28
    3b74:	df 93       	push	r29
    3b76:	fb 01       	movw	r30, r22
    3b78:	23 81       	ldd	r18, Z+3	; 0x03
    3b7a:	21 fd       	sbrc	r18, 1
    3b7c:	03 c0       	rjmp	.+6      	; 0x3b84 <fputc+0x16>
    3b7e:	8f ef       	ldi	r24, 0xFF	; 255
    3b80:	9f ef       	ldi	r25, 0xFF	; 255
    3b82:	2c c0       	rjmp	.+88     	; 0x3bdc <fputc+0x6e>
    3b84:	22 ff       	sbrs	r18, 2
    3b86:	16 c0       	rjmp	.+44     	; 0x3bb4 <fputc+0x46>
    3b88:	46 81       	ldd	r20, Z+6	; 0x06
    3b8a:	57 81       	ldd	r21, Z+7	; 0x07
    3b8c:	24 81       	ldd	r18, Z+4	; 0x04
    3b8e:	35 81       	ldd	r19, Z+5	; 0x05
    3b90:	42 17       	cp	r20, r18
    3b92:	53 07       	cpc	r21, r19
    3b94:	44 f4       	brge	.+16     	; 0x3ba6 <fputc+0x38>
    3b96:	a0 81       	ld	r26, Z
    3b98:	b1 81       	ldd	r27, Z+1	; 0x01
    3b9a:	9d 01       	movw	r18, r26
    3b9c:	2f 5f       	subi	r18, 0xFF	; 255
    3b9e:	3f 4f       	sbci	r19, 0xFF	; 255
    3ba0:	31 83       	std	Z+1, r19	; 0x01
    3ba2:	20 83       	st	Z, r18
    3ba4:	8c 93       	st	X, r24
    3ba6:	26 81       	ldd	r18, Z+6	; 0x06
    3ba8:	37 81       	ldd	r19, Z+7	; 0x07
    3baa:	2f 5f       	subi	r18, 0xFF	; 255
    3bac:	3f 4f       	sbci	r19, 0xFF	; 255
    3bae:	37 83       	std	Z+7, r19	; 0x07
    3bb0:	26 83       	std	Z+6, r18	; 0x06
    3bb2:	14 c0       	rjmp	.+40     	; 0x3bdc <fputc+0x6e>
    3bb4:	8b 01       	movw	r16, r22
    3bb6:	ec 01       	movw	r28, r24
    3bb8:	fb 01       	movw	r30, r22
    3bba:	00 84       	ldd	r0, Z+8	; 0x08
    3bbc:	f1 85       	ldd	r31, Z+9	; 0x09
    3bbe:	e0 2d       	mov	r30, r0
    3bc0:	09 95       	icall
    3bc2:	89 2b       	or	r24, r25
    3bc4:	e1 f6       	brne	.-72     	; 0x3b7e <fputc+0x10>
    3bc6:	d8 01       	movw	r26, r16
    3bc8:	16 96       	adiw	r26, 0x06	; 6
    3bca:	8d 91       	ld	r24, X+
    3bcc:	9c 91       	ld	r25, X
    3bce:	17 97       	sbiw	r26, 0x07	; 7
    3bd0:	01 96       	adiw	r24, 0x01	; 1
    3bd2:	17 96       	adiw	r26, 0x07	; 7
    3bd4:	9c 93       	st	X, r25
    3bd6:	8e 93       	st	-X, r24
    3bd8:	16 97       	sbiw	r26, 0x06	; 6
    3bda:	ce 01       	movw	r24, r28
    3bdc:	df 91       	pop	r29
    3bde:	cf 91       	pop	r28
    3be0:	1f 91       	pop	r17
    3be2:	0f 91       	pop	r16
    3be4:	08 95       	ret

00003be6 <__ultoa_invert>:
    3be6:	fa 01       	movw	r30, r20
    3be8:	aa 27       	eor	r26, r26
    3bea:	28 30       	cpi	r18, 0x08	; 8
    3bec:	51 f1       	breq	.+84     	; 0x3c42 <__ultoa_invert+0x5c>
    3bee:	20 31       	cpi	r18, 0x10	; 16
    3bf0:	81 f1       	breq	.+96     	; 0x3c52 <__ultoa_invert+0x6c>
    3bf2:	e8 94       	clt
    3bf4:	6f 93       	push	r22
    3bf6:	6e 7f       	andi	r22, 0xFE	; 254
    3bf8:	6e 5f       	subi	r22, 0xFE	; 254
    3bfa:	7f 4f       	sbci	r23, 0xFF	; 255
    3bfc:	8f 4f       	sbci	r24, 0xFF	; 255
    3bfe:	9f 4f       	sbci	r25, 0xFF	; 255
    3c00:	af 4f       	sbci	r26, 0xFF	; 255
    3c02:	b1 e0       	ldi	r27, 0x01	; 1
    3c04:	3e d0       	rcall	.+124    	; 0x3c82 <__ultoa_invert+0x9c>
    3c06:	b4 e0       	ldi	r27, 0x04	; 4
    3c08:	3c d0       	rcall	.+120    	; 0x3c82 <__ultoa_invert+0x9c>
    3c0a:	67 0f       	add	r22, r23
    3c0c:	78 1f       	adc	r23, r24
    3c0e:	89 1f       	adc	r24, r25
    3c10:	9a 1f       	adc	r25, r26
    3c12:	a1 1d       	adc	r26, r1
    3c14:	68 0f       	add	r22, r24
    3c16:	79 1f       	adc	r23, r25
    3c18:	8a 1f       	adc	r24, r26
    3c1a:	91 1d       	adc	r25, r1
    3c1c:	a1 1d       	adc	r26, r1
    3c1e:	6a 0f       	add	r22, r26
    3c20:	71 1d       	adc	r23, r1
    3c22:	81 1d       	adc	r24, r1
    3c24:	91 1d       	adc	r25, r1
    3c26:	a1 1d       	adc	r26, r1
    3c28:	20 d0       	rcall	.+64     	; 0x3c6a <__ultoa_invert+0x84>
    3c2a:	09 f4       	brne	.+2      	; 0x3c2e <__ultoa_invert+0x48>
    3c2c:	68 94       	set
    3c2e:	3f 91       	pop	r19
    3c30:	2a e0       	ldi	r18, 0x0A	; 10
    3c32:	26 9f       	mul	r18, r22
    3c34:	11 24       	eor	r1, r1
    3c36:	30 19       	sub	r19, r0
    3c38:	30 5d       	subi	r19, 0xD0	; 208
    3c3a:	31 93       	st	Z+, r19
    3c3c:	de f6       	brtc	.-74     	; 0x3bf4 <__ultoa_invert+0xe>
    3c3e:	cf 01       	movw	r24, r30
    3c40:	08 95       	ret
    3c42:	46 2f       	mov	r20, r22
    3c44:	47 70       	andi	r20, 0x07	; 7
    3c46:	40 5d       	subi	r20, 0xD0	; 208
    3c48:	41 93       	st	Z+, r20
    3c4a:	b3 e0       	ldi	r27, 0x03	; 3
    3c4c:	0f d0       	rcall	.+30     	; 0x3c6c <__ultoa_invert+0x86>
    3c4e:	c9 f7       	brne	.-14     	; 0x3c42 <__ultoa_invert+0x5c>
    3c50:	f6 cf       	rjmp	.-20     	; 0x3c3e <__ultoa_invert+0x58>
    3c52:	46 2f       	mov	r20, r22
    3c54:	4f 70       	andi	r20, 0x0F	; 15
    3c56:	40 5d       	subi	r20, 0xD0	; 208
    3c58:	4a 33       	cpi	r20, 0x3A	; 58
    3c5a:	18 f0       	brcs	.+6      	; 0x3c62 <__ultoa_invert+0x7c>
    3c5c:	49 5d       	subi	r20, 0xD9	; 217
    3c5e:	31 fd       	sbrc	r19, 1
    3c60:	40 52       	subi	r20, 0x20	; 32
    3c62:	41 93       	st	Z+, r20
    3c64:	02 d0       	rcall	.+4      	; 0x3c6a <__ultoa_invert+0x84>
    3c66:	a9 f7       	brne	.-22     	; 0x3c52 <__ultoa_invert+0x6c>
    3c68:	ea cf       	rjmp	.-44     	; 0x3c3e <__ultoa_invert+0x58>
    3c6a:	b4 e0       	ldi	r27, 0x04	; 4
    3c6c:	a6 95       	lsr	r26
    3c6e:	97 95       	ror	r25
    3c70:	87 95       	ror	r24
    3c72:	77 95       	ror	r23
    3c74:	67 95       	ror	r22
    3c76:	ba 95       	dec	r27
    3c78:	c9 f7       	brne	.-14     	; 0x3c6c <__ultoa_invert+0x86>
    3c7a:	00 97       	sbiw	r24, 0x00	; 0
    3c7c:	61 05       	cpc	r22, r1
    3c7e:	71 05       	cpc	r23, r1
    3c80:	08 95       	ret
    3c82:	9b 01       	movw	r18, r22
    3c84:	ac 01       	movw	r20, r24
    3c86:	0a 2e       	mov	r0, r26
    3c88:	06 94       	lsr	r0
    3c8a:	57 95       	ror	r21
    3c8c:	47 95       	ror	r20
    3c8e:	37 95       	ror	r19
    3c90:	27 95       	ror	r18
    3c92:	ba 95       	dec	r27
    3c94:	c9 f7       	brne	.-14     	; 0x3c88 <__ultoa_invert+0xa2>
    3c96:	62 0f       	add	r22, r18
    3c98:	73 1f       	adc	r23, r19
    3c9a:	84 1f       	adc	r24, r20
    3c9c:	95 1f       	adc	r25, r21
    3c9e:	a0 1d       	adc	r26, r0
    3ca0:	08 95       	ret

00003ca2 <__divmodsi4>:
    3ca2:	05 2e       	mov	r0, r21
    3ca4:	97 fb       	bst	r25, 7
    3ca6:	1e f4       	brtc	.+6      	; 0x3cae <__divmodsi4+0xc>
    3ca8:	00 94       	com	r0
    3caa:	0e 94 68 1e 	call	0x3cd0	; 0x3cd0 <__negsi2>
    3cae:	57 fd       	sbrc	r21, 7
    3cb0:	07 d0       	rcall	.+14     	; 0x3cc0 <__divmodsi4_neg2>
    3cb2:	0e 94 ba 1e 	call	0x3d74	; 0x3d74 <__udivmodsi4>
    3cb6:	07 fc       	sbrc	r0, 7
    3cb8:	03 d0       	rcall	.+6      	; 0x3cc0 <__divmodsi4_neg2>
    3cba:	4e f4       	brtc	.+18     	; 0x3cce <__divmodsi4_exit>
    3cbc:	0c 94 68 1e 	jmp	0x3cd0	; 0x3cd0 <__negsi2>

00003cc0 <__divmodsi4_neg2>:
    3cc0:	50 95       	com	r21
    3cc2:	40 95       	com	r20
    3cc4:	30 95       	com	r19
    3cc6:	21 95       	neg	r18
    3cc8:	3f 4f       	sbci	r19, 0xFF	; 255
    3cca:	4f 4f       	sbci	r20, 0xFF	; 255
    3ccc:	5f 4f       	sbci	r21, 0xFF	; 255

00003cce <__divmodsi4_exit>:
    3cce:	08 95       	ret

00003cd0 <__negsi2>:
    3cd0:	90 95       	com	r25
    3cd2:	80 95       	com	r24
    3cd4:	70 95       	com	r23
    3cd6:	61 95       	neg	r22
    3cd8:	7f 4f       	sbci	r23, 0xFF	; 255
    3cda:	8f 4f       	sbci	r24, 0xFF	; 255
    3cdc:	9f 4f       	sbci	r25, 0xFF	; 255
    3cde:	08 95       	ret

00003ce0 <__muluhisi3>:
    3ce0:	0e 94 dc 1e 	call	0x3db8	; 0x3db8 <__umulhisi3>
    3ce4:	a5 9f       	mul	r26, r21
    3ce6:	90 0d       	add	r25, r0
    3ce8:	b4 9f       	mul	r27, r20
    3cea:	90 0d       	add	r25, r0
    3cec:	a4 9f       	mul	r26, r20
    3cee:	80 0d       	add	r24, r0
    3cf0:	91 1d       	adc	r25, r1
    3cf2:	11 24       	eor	r1, r1
    3cf4:	08 95       	ret

00003cf6 <__mulshisi3>:
    3cf6:	b7 ff       	sbrs	r27, 7
    3cf8:	0c 94 70 1e 	jmp	0x3ce0	; 0x3ce0 <__muluhisi3>

00003cfc <__mulohisi3>:
    3cfc:	0e 94 70 1e 	call	0x3ce0	; 0x3ce0 <__muluhisi3>
    3d00:	82 1b       	sub	r24, r18
    3d02:	93 0b       	sbc	r25, r19
    3d04:	08 95       	ret

00003d06 <__prologue_saves__>:
    3d06:	2f 92       	push	r2
    3d08:	3f 92       	push	r3
    3d0a:	4f 92       	push	r4
    3d0c:	5f 92       	push	r5
    3d0e:	6f 92       	push	r6
    3d10:	7f 92       	push	r7
    3d12:	8f 92       	push	r8
    3d14:	9f 92       	push	r9
    3d16:	af 92       	push	r10
    3d18:	bf 92       	push	r11
    3d1a:	cf 92       	push	r12
    3d1c:	df 92       	push	r13
    3d1e:	ef 92       	push	r14
    3d20:	ff 92       	push	r15
    3d22:	0f 93       	push	r16
    3d24:	1f 93       	push	r17
    3d26:	cf 93       	push	r28
    3d28:	df 93       	push	r29
    3d2a:	cd b7       	in	r28, 0x3d	; 61
    3d2c:	de b7       	in	r29, 0x3e	; 62
    3d2e:	ca 1b       	sub	r28, r26
    3d30:	db 0b       	sbc	r29, r27
    3d32:	0f b6       	in	r0, 0x3f	; 63
    3d34:	f8 94       	cli
    3d36:	de bf       	out	0x3e, r29	; 62
    3d38:	0f be       	out	0x3f, r0	; 63
    3d3a:	cd bf       	out	0x3d, r28	; 61
    3d3c:	09 94       	ijmp

00003d3e <__epilogue_restores__>:
    3d3e:	2a 88       	ldd	r2, Y+18	; 0x12
    3d40:	39 88       	ldd	r3, Y+17	; 0x11
    3d42:	48 88       	ldd	r4, Y+16	; 0x10
    3d44:	5f 84       	ldd	r5, Y+15	; 0x0f
    3d46:	6e 84       	ldd	r6, Y+14	; 0x0e
    3d48:	7d 84       	ldd	r7, Y+13	; 0x0d
    3d4a:	8c 84       	ldd	r8, Y+12	; 0x0c
    3d4c:	9b 84       	ldd	r9, Y+11	; 0x0b
    3d4e:	aa 84       	ldd	r10, Y+10	; 0x0a
    3d50:	b9 84       	ldd	r11, Y+9	; 0x09
    3d52:	c8 84       	ldd	r12, Y+8	; 0x08
    3d54:	df 80       	ldd	r13, Y+7	; 0x07
    3d56:	ee 80       	ldd	r14, Y+6	; 0x06
    3d58:	fd 80       	ldd	r15, Y+5	; 0x05
    3d5a:	0c 81       	ldd	r16, Y+4	; 0x04
    3d5c:	1b 81       	ldd	r17, Y+3	; 0x03
    3d5e:	aa 81       	ldd	r26, Y+2	; 0x02
    3d60:	b9 81       	ldd	r27, Y+1	; 0x01
    3d62:	ce 0f       	add	r28, r30
    3d64:	d1 1d       	adc	r29, r1
    3d66:	0f b6       	in	r0, 0x3f	; 63
    3d68:	f8 94       	cli
    3d6a:	de bf       	out	0x3e, r29	; 62
    3d6c:	0f be       	out	0x3f, r0	; 63
    3d6e:	cd bf       	out	0x3d, r28	; 61
    3d70:	ed 01       	movw	r28, r26
    3d72:	08 95       	ret

00003d74 <__udivmodsi4>:
    3d74:	a1 e2       	ldi	r26, 0x21	; 33
    3d76:	1a 2e       	mov	r1, r26
    3d78:	aa 1b       	sub	r26, r26
    3d7a:	bb 1b       	sub	r27, r27
    3d7c:	fd 01       	movw	r30, r26
    3d7e:	0d c0       	rjmp	.+26     	; 0x3d9a <__udivmodsi4_ep>

00003d80 <__udivmodsi4_loop>:
    3d80:	aa 1f       	adc	r26, r26
    3d82:	bb 1f       	adc	r27, r27
    3d84:	ee 1f       	adc	r30, r30
    3d86:	ff 1f       	adc	r31, r31
    3d88:	a2 17       	cp	r26, r18
    3d8a:	b3 07       	cpc	r27, r19
    3d8c:	e4 07       	cpc	r30, r20
    3d8e:	f5 07       	cpc	r31, r21
    3d90:	20 f0       	brcs	.+8      	; 0x3d9a <__udivmodsi4_ep>
    3d92:	a2 1b       	sub	r26, r18
    3d94:	b3 0b       	sbc	r27, r19
    3d96:	e4 0b       	sbc	r30, r20
    3d98:	f5 0b       	sbc	r31, r21

00003d9a <__udivmodsi4_ep>:
    3d9a:	66 1f       	adc	r22, r22
    3d9c:	77 1f       	adc	r23, r23
    3d9e:	88 1f       	adc	r24, r24
    3da0:	99 1f       	adc	r25, r25
    3da2:	1a 94       	dec	r1
    3da4:	69 f7       	brne	.-38     	; 0x3d80 <__udivmodsi4_loop>
    3da6:	60 95       	com	r22
    3da8:	70 95       	com	r23
    3daa:	80 95       	com	r24
    3dac:	90 95       	com	r25
    3dae:	9b 01       	movw	r18, r22
    3db0:	ac 01       	movw	r20, r24
    3db2:	bd 01       	movw	r22, r26
    3db4:	cf 01       	movw	r24, r30
    3db6:	08 95       	ret

00003db8 <__umulhisi3>:
    3db8:	a2 9f       	mul	r26, r18
    3dba:	b0 01       	movw	r22, r0
    3dbc:	b3 9f       	mul	r27, r19
    3dbe:	c0 01       	movw	r24, r0
    3dc0:	a3 9f       	mul	r26, r19
    3dc2:	70 0d       	add	r23, r0
    3dc4:	81 1d       	adc	r24, r1
    3dc6:	11 24       	eor	r1, r1
    3dc8:	91 1d       	adc	r25, r1
    3dca:	b2 9f       	mul	r27, r18
    3dcc:	70 0d       	add	r23, r0
    3dce:	81 1d       	adc	r24, r1
    3dd0:	11 24       	eor	r1, r1
    3dd2:	91 1d       	adc	r25, r1
    3dd4:	08 95       	ret

00003dd6 <_exit>:
    3dd6:	f8 94       	cli

00003dd8 <__stop_program>:
    3dd8:	ff cf       	rjmp	.-2      	; 0x3dd8 <__stop_program>
